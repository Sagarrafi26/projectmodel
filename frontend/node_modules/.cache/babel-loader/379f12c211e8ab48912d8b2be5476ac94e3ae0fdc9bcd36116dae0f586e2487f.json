{"ast":null,"code":"var _jsxFileName = \"D:\\\\projectmodel\\\\frontend\\\\src\\\\Components\\\\Table.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n\n// const Table = ({ modelIds }) => {\n//   const [editingCell, setEditingCell] = useState(null);\n//   const [cellValues, setCellValues] = useState({});\n//   const[data,setData]=useState([])\n//   // Function to handle cell click\n//   const handleCellClick = (rowId, colId) => {\n//     console.log(\"Clicked cell:\", rowId, colId);\n//     setEditingCell({ rowId, colId });\n//     // Initialize cell value if not present\n//     setCellValues((prevState) => ({\n//       ...prevState,\n//       [`${rowId}-${colId}`]: prevState[`${rowId}-${colId}`] || \"\",\n//     }));\n//   };\n\n//   // Function to handle input change\n//   const handleInputChange = (e) => {\n\n//     if (editingCell) {\n//       const { rowId, colId } = editingCell;\n//       const value = e.target.value;\n//       setCellValues((prevState) => ({\n//         ...prevState,\n//         [`${rowId}-${colId}`]: value,\n//       }));\n//     }\n//   };\n\n//   // Function to handle input blur\n//   const handleInputBlur = () => {\n//     setEditingCell(null);\n//   };\n//   const handleCancel = () => {\n//     setEditingCell(null); // Clear editingCell state\n//     setCellValues({}); // Clear cellValues state\n//   };\n\n//   // Function to handle saving edited cell values\n//   const handleSave = async (e) => {\n//      e.preventDefault();\n//     console.log(\"Current editingCell:\", editingCell);\n//     if (editingCell) {\n//       const { rowId, colId } = editingCell;\n//       console.log(\"rowId:\", rowId); // Log the value of rowId\n//     console.log(\"colId:\", colId); // Log the value of colId\n//     console.log(\"modelId:\", modelIds[rowId]); // Log the value of modelId\n//     console.log(\"Id:\", ids[colId]); // Log the value of Id\n//      const  value = cellValues[`${rowId}-${colId}`];\n\n//     try {\n\n//         // Make the update request\n//         const response = await fetch(`http://localhost:8082/update`, {\n//           method: \"PUT\",\n//           headers: {\n//             \"Content-Type\": \"application/json\",\n//           },\n//           body: JSON.stringify({\n//             productionValue: value,\n//             id: rowId,\n//             modelId: modelIds[colId],\n//           }),\n//         });\n\n//         // Check if the response is successful\n//         if (!response.ok) {\n//           throw new Error(`HTTP error! Status: ${response.status}`);\n//         }\n//         const newData = [...data];\n//         newData[rowId][colId] = value;\n//         setData(newData);\n\n//         // Update the state if the response is successful\n//         setEditingCell(null);\n//         console.log(\"Data updated successfully\");\n//       } catch (error) {\n//         console.error(\"Error updating data:\", error);\n//       }\n//     } else {\n//       console.error(\"Editing cell is null\");\n\n//   };\n//     }\n//     useEffect(() => {\n//       // API call to fetch data from backend\n//       fetch('http://localhost:8082/data')\n//         .then(response => response.json())\n//         .then(result => {\n//           console.log(\"Received data:\", result.data); // Log the received data\n//           // Check if data is an array before calling map\n//           if (Array.isArray(result.data)) {\n//             // Transform data into the desired format\n//             const transformedData = result.data.map(item => ({\n//               modelId: item.ModelID,\n//               date: item.date\n//               // Add other properties you need\n//             }));\n\n//             // Update state with transformed data\n//             setData(transformedData);\n//           } else {\n//             console.error(\"Received data is not an array:\", result.data);\n//           }\n//         })\n//         .catch(error => console.error('Error fetching model data:', error));\n//     }, []);\n\n//   // Generate IDs 1 to 30\n//   const ids = Array.from({ length: 30 }, (_, i) => i + 1);\n\n//   return (\n//     <div className=\"overflow-x-auto\">\n//       <table className=\"table-auto border border-collapse border-gray-500\">\n//         <thead>\n//         <tr className=\"bg-gray-200\">\n//       <th colSpan=\"40\" className=\"text-center\">\n//         <span className=\"mx-8\">Monthly data for April</span>\n//       </th>\n//     </tr>\n//           <tr className=\"bg-gray-200\">\n\n//             <th className=\"border border-gray-500\"></th>\n//             {/* Render IDs horizontally */}\n//             {ids.map((date) => (\n//               <th key={date} className=\"border border-gray-500 px-4 py-2\">\n//                 {date}\n//               </th>\n//             ))}\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {/* Render ModelIds vertically */}\n//           {modelIds.map((modelId, rowIndex) => (\n//             <tr key={modelId}>\n//               <td className=\"border border-gray-500 px-4 py-2\">{modelId}</td>\n//               {ids.map((id, colIndex) => {\n//                 const cellKey = `${rowIndex}-${colIndex}`;\n//                 const productionValue = data.find(item => item.modelId === modelId && item.date === id)?.productionValue || \"\";\n\n//                 return (\n//                   <td\n//                     key={id}\n//                     className=\"border border-gray-500 px-4 py-2\"\n//                     onClick={() => handleCellClick(rowIndex, colIndex)}\n//                   >\n//                     {/* Conditionally render input field */}\n//                     {editingCell &&\n//                     editingCell.rowId === rowIndex &&\n//                     editingCell.colId === colIndex ? (\n//                       <input\n//                         type=\"text\"\n//                         value={cellValues[cellKey]}\n//                         onChange={handleInputChange}\n//                         onBlur={handleInputBlur}\n//                       />\n//                     ) : (\n//                       productionValue\n//                     )}\n//                   </td>\n//                 );\n//               })}\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//       {/* Save button */}\n//       <div className=\"flex justify-center my-10 \">\n//       <button\n//         onClick={handleSave}\n//         className=\"py-0 mx-4 border   border-gray-500 px-6   \"\n//       >\n//         Save\n//       </button>\n//       <button\n//         onClick={handleCancel}\n//         className=\"py-0 mx-4 border  border-gray-500 px-6 \"\n//       >\n//         Cancel\n//       </button>\n//       </div>            \n//     </div>\n//   );\n// };\n\n// export default Table;\n\n// import React, { useState } from \"react\";\n\n// const Table = ({ modelIds }) => {\n//   const [editingCell, setEditingCell] = useState({ rowId: null, colId: null });\n//   const [cellValues, setCellValues] = useState({});\n//   const [data, setData] = useState([]);\n\n//   const handleCellClick = (rowId, colId) => {\n//     console.log(\"Clicked cell:\", rowId, colId);\n//     setEditingCell({ rowId, colId });\n//     const cellKey = `${rowId}-${colId}`;\n//     setCellValues((prevState) => ({\n//       ...prevState,\n//       [cellKey]: prevState[cellKey] || \"\",\n//     }));\n//   };\n\n//   const handleInputChange = (e) => {\n//     const { rowId, colId } = editingCell;\n//     const value = e.target.value;\n//     setCellValues((prevState) => ({\n//       ...prevState,\n//       [`${rowId}-${colId}`]: value,\n//     }));\n//   };\n\n//   const handleInputBlur = () => {\n//     setEditingCell({ rowId: null, colId: null });\n//   };\n\n//   const handleCancel = () => {\n//     setEditingCell({ rowId: null, colId: null });\n//     setCellValues({});\n//   };\n\n//   const handleSave = async (e) => {\n//     e.preventDefault();\n//     console.log(\"Current editingCell:\", editingCell);\n//     if (editingCell && editingCell.rowId !== undefined && editingCell.colId !== undefined) {\n//       const { rowId, colId } = editingCell;\n//       console.log(\"rowId:\", rowId); // Log the value of rowId\n//       console.log(\"colId:\", colId); // Log the value of colId\n//       console.log(\"modelId:\", modelIds[rowId]); // Log the value of modelId\n//       console.log(\"Id:\", dates[colId]); // Log the value of Id\n\n//     const value = cellValues[`${rowId}-${colId}`];\n//     // Assuming the month is April\n\n//     try {\n//       const response = await fetch(`http://localhost:8082/update`, {\n//         method: \"PUT\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//         body: JSON.stringify({\n//           productionValue: value,\n//           date: dates,\n\n//           modelId: modelIds[rowId],\n//         }),\n//       });\n\n//       if (!response.ok) {\n//         throw new Error(`HTTP error! Status: ${response.status}`);\n//       }\n\n//       const newData = [...data];\n//       newData[rowId][colId] = value;\n//       setData(newData);\n\n//       setEditingCell({ rowId: null, colId: null });\n//       console.log(\"Data updated successfully\");\n//     } catch (error) {\n//       console.error(\"Error updating data:\", error);\n//     }\n//   }else {\n//       console.error(\"Editing cell is null\");\n//     }\n\n//   };\n\n//   const dates = Array.from({ length: 30 }, (_, i) => {\n//     const day = i + 1;\n//     const formattedDay = day < 10 ? `0${day}` : day; // Add leading zero if day is less than 10\n//     return `2024-04-${formattedDay}`;\n//   }); // Assuming there are 30 days in a month\n\n//   return (\n//     <div className=\"overflow-x-auto\">\n//       <table className=\"table-auto border border-collapse border-gray-500\">\n//         <thead>\n//           <tr className=\"bg-gray-200\">\n//             <th colSpan={days.length + 1} className=\"text-center\">\n//               <span className=\"mx-8\">Monthly data for April</span>\n//             </th>\n//           </tr>\n//           <tr className=\"bg-gray-200\">\n//             <th className=\"border border-gray-500\"></th>\n//             {dates.map((day,index) => (\n//               <th key={index} className=\"border border-gray-500 px-4 py-2\">\n//                 {day}\n//               </th>\n//             ))}\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {modelIds.map((modelId, rowIndex) => (\n//             <tr key={modelId}>\n//               <td className=\"border border-gray-500 px-4 py-2\">{modelId}</td>\n//               {days.map((day, colIndex) => {\n//                 const cellKey = `${rowIndex}-${colIndex}`;\n//                 return (\n//                   <td\n//                     key={day}\n//                     className=\"border border-gray-500 px-4 py-2\"\n//                     onClick={() => handleCellClick(rowIndex, colIndex)}\n//                   >\n//                     {editingCell.rowId === rowIndex &&\n//                     editingCell.colId === colIndex ? (\n//                       <input\n//                         type=\"text\"\n//                         value={cellValues[cellKey] || \"\"}\n//                         onChange={handleInputChange}\n//                         onBlur={handleInputBlur}\n//                       />\n//                     ) : (\n//                       cellValues[cellKey] || \"\"\n//                     )}\n//                   </td>\n//                 );\n//               })}\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//       <div className=\"flex justify-center my-10 \">\n//         <button\n//           onClick={handleSave}\n//           className=\"py-0 mx-4 border   border-gray-500 px-6   \"\n//         >\n//           Save\n//         </button>\n//         <button\n//           onClick={handleCancel}\n//           className=\"py-0 mx-4 border  border-gray-500 px-6 \"\n//         >\n//           Cancel\n//         </button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Table;\n\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Table = ({\n  modelIds\n}) => {\n  _s();\n  const [editingCell, setEditingCell] = useState({\n    rowId: null,\n    colId: null\n  });\n  const [cellValues, setCellValues] = useState(0);\n  const [data, setData] = useState([]);\n  const [state, setState] = useState({\n    rowId: 0,\n    colId: 0,\n    cellValue: 0\n  });\n\n  // Generate dates array for the month of April\n  const dates = Array.from({\n    length: 30\n  }, (_, i) => {\n    const day = i + 1;\n    const formattedDay = day < 10 ? `0${day}` : day; // Add leading zero if day is less than 10\n    return `2024-04-${formattedDay}`;\n  });\n  const handleCellClick = (rowId, colId) => {\n    setState(prev => {\n      return {\n        ...prev,\n        [\"rowId\"]: rowId,\n        [\"colId\"]: colId\n      };\n    });\n    setEditingCell({\n      rowId,\n      colId\n    });\n    const cellKey = `${rowId}-${colId}`;\n    setCellValues(prevState => ({\n      ...prevState,\n      [cellKey]: prevState[cellKey] || \"\"\n    }));\n  };\n  const handleInputChange = e => {\n    // const { rowId, colId } = editingCell;\n    // console.log('colrowid',rowId,colId)\n    // setCellValues(e.target.value);\n    setState(prev => {\n      return {\n        ...prev,\n        [\"cellValue\"]: e.target.value\n      };\n    });\n  };\n  const handleInputBlur = () => {\n    setEditingCell({\n      rowId: null,\n      colId: null\n    });\n  };\n  const handleCancel = () => {\n    setEditingCell({\n      rowId: null,\n      colId: null\n    });\n    setCellValues({});\n  };\n  const handleSave = async e => {\n    e.preventDefault();\n    // console.log(\"Current editingCell:\", editingCell);\n    // if (\n    //   editingCell &&\n    //   editingCell.rowId !== undefined &&\n    //   editingCell.colId !== undefined\n    // ) \n    if (cellValues !== 0 && state.rowId !== 0 && state.colId !== 0) {\n      // const { rowId, colId } = editingCell;\n      console.log(\"rowId:\", state.rowId); // Log the value of rowId\n      console.log(\"colId:\", state.colId); // Log the value of colId\n      console.log(\"modelId:\", modelIds[state.rowId]); // Log the value of modelId\n      console.log(\"Id:\", dates[state.colId]); // Log the value of Id\n\n      //const value = cellValues[`${rowId}-${colId}`];\n      const value = state.cellValue;\n      let col = Number(state.colId);\n      const date = dates[col]; // Get the date from the dates array\n\n      try {\n        const response = await fetch(`http://localhost:8082/update`, {\n          method: \"PUT\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            productionValue: value,\n            date: date,\n            modelId: modelIds[state.rowId]\n          })\n        });\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        const newData = [...data];\n        newData[state.rowId][col] = value;\n        setData(newData);\n        setEditingCell({\n          rowId: null,\n          colId: null\n        });\n        console.log(\"Data updated successfully\");\n      } catch (error) {\n        console.error(\"Error updating data:\", error);\n      }\n    } else {\n      console.error(\"Editing cell is null\");\n    }\n  };\n  console.log(state);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"overflow-x-auto\",\n    children: [/*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"table-auto border border-collapse border-gray-500\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n          className: \"bg-gray-200\",\n          children: /*#__PURE__*/_jsxDEV(\"th\", {\n            colSpan: dates.length + 1,\n            className: \"text-center\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"mx-8\",\n              children: \"Monthly data for April\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 455,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 454,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 453,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n          className: \"bg-gray-200\",\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            className: \"border border-gray-500\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 459,\n            columnNumber: 13\n          }, this), dates.map((date, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n            className: \"border border-gray-500 px-4 py-2\",\n            children: date\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 461,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 458,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 452,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: modelIds.map((modelId, rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"border border-gray-500 px-4 py-2\",\n            children: modelId\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 470,\n            columnNumber: 15\n          }, this), dates.map((day, colIndex) => {\n            const cellKey = `${rowIndex}-${colIndex}`;\n            return /*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"border border-gray-500 px-4 py-2\",\n              onClick: () => handleCellClick(rowIndex, colIndex),\n              children: editingCell.rowId === rowIndex && editingCell.colId === colIndex ? /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"number\",\n                value: state.cellValue,\n                onChange: handleInputChange,\n                onBlur: handleInputBlur\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 481,\n                columnNumber: 23\n              }, this) : cellValues[cellKey] || \"\"\n            }, colIndex, false, {\n              fileName: _jsxFileName,\n              lineNumber: 474,\n              columnNumber: 19\n            }, this);\n          })]\n        }, rowIndex, true, {\n          fileName: _jsxFileName,\n          lineNumber: 469,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 467,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 451,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-center my-10\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSave,\n        className: \"py-0 mx-4 border   border-gray-500 px-6\",\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 499,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleCancel,\n        className: \"py-0 mx-4 border  border-gray-500 px-6\",\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 505,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 498,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 450,\n    columnNumber: 5\n  }, this);\n};\n_s(Table, \"jxkCwTyv0EiQk4UrriCGlDec5i4=\");\n_c = Table;\nexport default Table;\nvar _c;\n$RefreshReg$(_c, \"Table\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Table","modelIds","_s","editingCell","setEditingCell","rowId","colId","cellValues","setCellValues","data","setData","state","setState","cellValue","dates","Array","from","length","_","i","day","formattedDay","handleCellClick","prev","cellKey","prevState","handleInputChange","e","target","value","handleInputBlur","handleCancel","handleSave","preventDefault","console","log","col","Number","date","response","fetch","method","headers","body","JSON","stringify","productionValue","modelId","ok","Error","status","newData","error","className","children","colSpan","fileName","_jsxFileName","lineNumber","columnNumber","map","index","rowIndex","colIndex","onClick","type","onChange","onBlur","_c","$RefreshReg$"],"sources":["D:/projectmodel/frontend/src/Components/Table.js"],"sourcesContent":[" \r\n// import React, { useState, useEffect } from \"react\";\r\n \r\n// const Table = ({ modelIds }) => {\r\n//   const [editingCell, setEditingCell] = useState(null);\r\n//   const [cellValues, setCellValues] = useState({});\r\n//   const[data,setData]=useState([])\r\n//   // Function to handle cell click\r\n//   const handleCellClick = (rowId, colId) => {\r\n//     console.log(\"Clicked cell:\", rowId, colId);\r\n//     setEditingCell({ rowId, colId });\r\n//     // Initialize cell value if not present\r\n//     setCellValues((prevState) => ({\r\n//       ...prevState,\r\n//       [`${rowId}-${colId}`]: prevState[`${rowId}-${colId}`] || \"\",\r\n//     }));\r\n//   };\r\n \r\n//   // Function to handle input change\r\n//   const handleInputChange = (e) => {\r\n   \r\n//     if (editingCell) {\r\n//       const { rowId, colId } = editingCell;\r\n//       const value = e.target.value;\r\n//       setCellValues((prevState) => ({\r\n//         ...prevState,\r\n//         [`${rowId}-${colId}`]: value,\r\n//       }));\r\n//     }\r\n//   };\r\n \r\n//   // Function to handle input blur\r\n//   const handleInputBlur = () => {\r\n//     setEditingCell(null);\r\n//   };\r\n//   const handleCancel = () => {\r\n//     setEditingCell(null); // Clear editingCell state\r\n//     setCellValues({}); // Clear cellValues state\r\n//   };\r\n \r\n//   // Function to handle saving edited cell values\r\n//   const handleSave = async (e) => {\r\n//      e.preventDefault();\r\n//     console.log(\"Current editingCell:\", editingCell);\r\n//     if (editingCell) {\r\n//       const { rowId, colId } = editingCell;\r\n//       console.log(\"rowId:\", rowId); // Log the value of rowId\r\n//     console.log(\"colId:\", colId); // Log the value of colId\r\n//     console.log(\"modelId:\", modelIds[rowId]); // Log the value of modelId\r\n//     console.log(\"Id:\", ids[colId]); // Log the value of Id\r\n//      const  value = cellValues[`${rowId}-${colId}`];\r\n   \r\n//     try {\r\n   \r\n     \r\n//         // Make the update request\r\n//         const response = await fetch(`http://localhost:8082/update`, {\r\n//           method: \"PUT\",\r\n//           headers: {\r\n//             \"Content-Type\": \"application/json\",\r\n//           },\r\n//           body: JSON.stringify({\r\n//             productionValue: value,\r\n//             id: rowId,\r\n//             modelId: modelIds[colId],\r\n//           }),\r\n//         });\r\n       \r\n \r\n//         // Check if the response is successful\r\n//         if (!response.ok) {\r\n//           throw new Error(`HTTP error! Status: ${response.status}`);\r\n//         }\r\n//         const newData = [...data];\r\n//         newData[rowId][colId] = value;\r\n//         setData(newData);\r\n \r\n//         // Update the state if the response is successful\r\n//         setEditingCell(null);\r\n//         console.log(\"Data updated successfully\");\r\n//       } catch (error) {\r\n//         console.error(\"Error updating data:\", error);\r\n//       }\r\n//     } else {\r\n//       console.error(\"Editing cell is null\");\r\n \r\n//   };\r\n//     }\r\n//     useEffect(() => {\r\n//       // API call to fetch data from backend\r\n//       fetch('http://localhost:8082/data')\r\n//         .then(response => response.json())\r\n//         .then(result => {\r\n//           console.log(\"Received data:\", result.data); // Log the received data\r\n//           // Check if data is an array before calling map\r\n//           if (Array.isArray(result.data)) {\r\n//             // Transform data into the desired format\r\n//             const transformedData = result.data.map(item => ({\r\n//               modelId: item.ModelID,\r\n//               date: item.date\r\n//               // Add other properties you need\r\n//             }));\r\n   \r\n//             // Update state with transformed data\r\n//             setData(transformedData);\r\n//           } else {\r\n//             console.error(\"Received data is not an array:\", result.data);\r\n//           }\r\n//         })\r\n//         .catch(error => console.error('Error fetching model data:', error));\r\n//     }, []);\r\n \r\n   \r\n \r\n \r\n//   // Generate IDs 1 to 30\r\n//   const ids = Array.from({ length: 30 }, (_, i) => i + 1);\r\n \r\n//   return (\r\n//     <div className=\"overflow-x-auto\">\r\n//       <table className=\"table-auto border border-collapse border-gray-500\">\r\n//         <thead>\r\n//         <tr className=\"bg-gray-200\">\r\n//       <th colSpan=\"40\" className=\"text-center\">\r\n//         <span className=\"mx-8\">Monthly data for April</span>\r\n//       </th>\r\n//     </tr>\r\n//           <tr className=\"bg-gray-200\">\r\n         \r\n//             <th className=\"border border-gray-500\"></th>\r\n//             {/* Render IDs horizontally */}\r\n//             {ids.map((date) => (\r\n//               <th key={date} className=\"border border-gray-500 px-4 py-2\">\r\n//                 {date}\r\n//               </th>\r\n//             ))}\r\n//           </tr>\r\n//         </thead>\r\n//         <tbody>\r\n//           {/* Render ModelIds vertically */}\r\n//           {modelIds.map((modelId, rowIndex) => (\r\n//             <tr key={modelId}>\r\n//               <td className=\"border border-gray-500 px-4 py-2\">{modelId}</td>\r\n//               {ids.map((id, colIndex) => {\r\n//                 const cellKey = `${rowIndex}-${colIndex}`;\r\n//                 const productionValue = data.find(item => item.modelId === modelId && item.date === id)?.productionValue || \"\";\r\n \r\n//                 return (\r\n//                   <td\r\n//                     key={id}\r\n//                     className=\"border border-gray-500 px-4 py-2\"\r\n//                     onClick={() => handleCellClick(rowIndex, colIndex)}\r\n//                   >\r\n//                     {/* Conditionally render input field */}\r\n//                     {editingCell &&\r\n//                     editingCell.rowId === rowIndex &&\r\n//                     editingCell.colId === colIndex ? (\r\n//                       <input\r\n//                         type=\"text\"\r\n//                         value={cellValues[cellKey]}\r\n//                         onChange={handleInputChange}\r\n//                         onBlur={handleInputBlur}\r\n//                       />\r\n//                     ) : (\r\n//                       productionValue\r\n//                     )}\r\n//                   </td>\r\n//                 );\r\n//               })}\r\n//             </tr>\r\n//           ))}\r\n//         </tbody>\r\n//       </table>\r\n//       {/* Save button */}\r\n//       <div className=\"flex justify-center my-10 \">\r\n//       <button\r\n//         onClick={handleSave}\r\n//         className=\"py-0 mx-4 border   border-gray-500 px-6   \"\r\n//       >\r\n//         Save\r\n//       </button>\r\n//       <button\r\n//         onClick={handleCancel}\r\n//         className=\"py-0 mx-4 border  border-gray-500 px-6 \"\r\n//       >\r\n//         Cancel\r\n//       </button>\r\n//       </div>            \r\n//     </div>\r\n//   );\r\n// };\r\n \r\n// export default Table;\r\n \r\n// import React, { useState } from \"react\";\r\n\r\n// const Table = ({ modelIds }) => {\r\n//   const [editingCell, setEditingCell] = useState({ rowId: null, colId: null });\r\n//   const [cellValues, setCellValues] = useState({});\r\n//   const [data, setData] = useState([]);\r\n\r\n//   const handleCellClick = (rowId, colId) => {\r\n//     console.log(\"Clicked cell:\", rowId, colId);\r\n//     setEditingCell({ rowId, colId });\r\n//     const cellKey = `${rowId}-${colId}`;\r\n//     setCellValues((prevState) => ({\r\n//       ...prevState,\r\n//       [cellKey]: prevState[cellKey] || \"\",\r\n//     }));\r\n//   };\r\n\r\n//   const handleInputChange = (e) => {\r\n//     const { rowId, colId } = editingCell;\r\n//     const value = e.target.value;\r\n//     setCellValues((prevState) => ({\r\n//       ...prevState,\r\n//       [`${rowId}-${colId}`]: value,\r\n//     }));\r\n//   };\r\n\r\n//   const handleInputBlur = () => {\r\n//     setEditingCell({ rowId: null, colId: null });\r\n//   };\r\n\r\n//   const handleCancel = () => {\r\n//     setEditingCell({ rowId: null, colId: null });\r\n//     setCellValues({});\r\n//   };\r\n\r\n//   const handleSave = async (e) => {\r\n//     e.preventDefault();\r\n//     console.log(\"Current editingCell:\", editingCell);\r\n//     if (editingCell && editingCell.rowId !== undefined && editingCell.colId !== undefined) {\r\n//       const { rowId, colId } = editingCell;\r\n//       console.log(\"rowId:\", rowId); // Log the value of rowId\r\n//       console.log(\"colId:\", colId); // Log the value of colId\r\n//       console.log(\"modelId:\", modelIds[rowId]); // Log the value of modelId\r\n//       console.log(\"Id:\", dates[colId]); // Log the value of Id\r\n   \r\n//     const value = cellValues[`${rowId}-${colId}`];\r\n//     // Assuming the month is April\r\n\r\n//     try {\r\n//       const response = await fetch(`http://localhost:8082/update`, {\r\n//         method: \"PUT\",\r\n//         headers: {\r\n//           \"Content-Type\": \"application/json\",\r\n//         },\r\n//         body: JSON.stringify({\r\n//           productionValue: value,\r\n//           date: dates,\r\n          \r\n//           modelId: modelIds[rowId],\r\n//         }),\r\n//       });\r\n\r\n//       if (!response.ok) {\r\n//         throw new Error(`HTTP error! Status: ${response.status}`);\r\n//       }\r\n\r\n//       const newData = [...data];\r\n//       newData[rowId][colId] = value;\r\n//       setData(newData);\r\n\r\n//       setEditingCell({ rowId: null, colId: null });\r\n//       console.log(\"Data updated successfully\");\r\n//     } catch (error) {\r\n//       console.error(\"Error updating data:\", error);\r\n//     }\r\n//   }else {\r\n//       console.error(\"Editing cell is null\");\r\n//     }\r\n  \r\n//   };\r\n\r\n//   const dates = Array.from({ length: 30 }, (_, i) => {\r\n//     const day = i + 1;\r\n//     const formattedDay = day < 10 ? `0${day}` : day; // Add leading zero if day is less than 10\r\n//     return `2024-04-${formattedDay}`;\r\n//   }); // Assuming there are 30 days in a month\r\n\r\n//   return (\r\n//     <div className=\"overflow-x-auto\">\r\n//       <table className=\"table-auto border border-collapse border-gray-500\">\r\n//         <thead>\r\n//           <tr className=\"bg-gray-200\">\r\n//             <th colSpan={days.length + 1} className=\"text-center\">\r\n//               <span className=\"mx-8\">Monthly data for April</span>\r\n//             </th>\r\n//           </tr>\r\n//           <tr className=\"bg-gray-200\">\r\n//             <th className=\"border border-gray-500\"></th>\r\n//             {dates.map((day,index) => (\r\n//               <th key={index} className=\"border border-gray-500 px-4 py-2\">\r\n//                 {day}\r\n//               </th>\r\n//             ))}\r\n//           </tr>\r\n//         </thead>\r\n//         <tbody>\r\n//           {modelIds.map((modelId, rowIndex) => (\r\n//             <tr key={modelId}>\r\n//               <td className=\"border border-gray-500 px-4 py-2\">{modelId}</td>\r\n//               {days.map((day, colIndex) => {\r\n//                 const cellKey = `${rowIndex}-${colIndex}`;\r\n//                 return (\r\n//                   <td\r\n//                     key={day}\r\n//                     className=\"border border-gray-500 px-4 py-2\"\r\n//                     onClick={() => handleCellClick(rowIndex, colIndex)}\r\n//                   >\r\n//                     {editingCell.rowId === rowIndex &&\r\n//                     editingCell.colId === colIndex ? (\r\n//                       <input\r\n//                         type=\"text\"\r\n//                         value={cellValues[cellKey] || \"\"}\r\n//                         onChange={handleInputChange}\r\n//                         onBlur={handleInputBlur}\r\n//                       />\r\n//                     ) : (\r\n//                       cellValues[cellKey] || \"\"\r\n//                     )}\r\n//                   </td>\r\n//                 );\r\n//               })}\r\n//             </tr>\r\n//           ))}\r\n//         </tbody>\r\n//       </table>\r\n//       <div className=\"flex justify-center my-10 \">\r\n//         <button\r\n//           onClick={handleSave}\r\n//           className=\"py-0 mx-4 border   border-gray-500 px-6   \"\r\n//         >\r\n//           Save\r\n//         </button>\r\n//         <button\r\n//           onClick={handleCancel}\r\n//           className=\"py-0 mx-4 border  border-gray-500 px-6 \"\r\n//         >\r\n//           Cancel\r\n//         </button>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n\r\n// export default Table;\r\n\r\n\r\nimport React, { useState } from \"react\";\r\n\r\nconst Table = ({ modelIds }) => {\r\n  const [editingCell, setEditingCell] = useState({ rowId: null, colId: null });\r\n  const [cellValues, setCellValues] = useState(0);\r\n  const [data, setData] = useState([]);\r\n  const [state,setState]=useState({ \r\n    rowId:0,colId:0,cellValue:0\r\n         })\r\n\r\n  // Generate dates array for the month of April\r\n  const dates = Array.from({ length: 30 }, (_, i) => {\r\n    const day = i + 1;\r\n    const formattedDay = day < 10 ? `0${day}` : day; // Add leading zero if day is less than 10\r\n    return `2024-04-${formattedDay}`;\r\n  });\r\n\r\n  const handleCellClick = (rowId, colId) => {\r\n    setState(prev=>{\r\n      return {...prev, [\"rowId\"]:rowId,[\"colId\"]:colId}\r\n    })\r\n    setEditingCell({ rowId, colId });\r\n    const cellKey = `${rowId}-${colId}`;\r\n    setCellValues((prevState) => ({\r\n      ...prevState,\r\n      [cellKey]: prevState[cellKey] || \"\",\r\n    }));\r\n  };\r\n  const handleInputChange = (e) => {\r\n   // const { rowId, colId } = editingCell;\r\n   // console.log('colrowid',rowId,colId)\r\n   // setCellValues(e.target.value);\r\n   setState(prev=>{\r\n    return {...prev, [\"cellValue\"]:e.target.value}\r\n   })\r\n  };\r\n\r\n  const handleInputBlur = () => {\r\n    setEditingCell({ rowId: null, colId: null });\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setEditingCell({ rowId: null, colId: null });\r\n    setCellValues({});\r\n  };\r\n  const handleSave = async (e) => {\r\n    e.preventDefault();\r\n   // console.log(\"Current editingCell:\", editingCell);\r\n    // if (\r\n    //   editingCell &&\r\n    //   editingCell.rowId !== undefined &&\r\n    //   editingCell.colId !== undefined\r\n    // ) \r\n    if(cellValues !== 0 && state.rowId !== 0 && state.colId !== 0){\r\n     // const { rowId, colId } = editingCell;\r\n      console.log(\"rowId:\", state.rowId); // Log the value of rowId\r\n      console.log(\"colId:\", state.colId); // Log the value of colId\r\n      console.log(\"modelId:\", modelIds[state.rowId]); // Log the value of modelId\r\n      console.log(\"Id:\", dates[state.colId]); // Log the value of Id\r\n\r\n      //const value = cellValues[`${rowId}-${colId}`];\r\n      const value = state.cellValue;\r\n      let col = Number(state.colId);\r\n      const date = dates[col]; // Get the date from the dates array\r\n\r\n      try {\r\n        const response = await fetch(`http://localhost:8082/update`, {\r\n          method: \"PUT\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({\r\n            productionValue: value,\r\n            date: date,\r\n            modelId: modelIds[state.rowId],\r\n          }),\r\n        });\r\n\r\n        if (!response.ok) {\r\n          throw new Error(`HTTP error! Status: ${response.status}`);\r\n        }\r\n\r\n        const newData = [...data];\r\n        newData[state.rowId][col] = value;\r\n        setData(newData);\r\n\r\n        setEditingCell({ rowId: null, colId: null });\r\n        console.log(\"Data updated successfully\");\r\n      } catch (error) {\r\n        console.error(\"Error updating data:\", error);\r\n      }\r\n    } else {\r\n      console.error(\"Editing cell is null\");\r\n    }\r\n  };\r\n  console.log(state);\r\n\r\n  return (\r\n    <div className=\"overflow-x-auto\">\r\n      <table className=\"table-auto border border-collapse border-gray-500\">\r\n        <thead>\r\n          <tr className=\"bg-gray-200\">\r\n            <th colSpan={dates.length + 1} className=\"text-center\">\r\n              <span className=\"mx-8\">Monthly data for April</span>\r\n            </th>\r\n          </tr>\r\n          <tr className=\"bg-gray-200\">\r\n            <th className=\"border border-gray-500\"></th>\r\n            {dates.map((date, index) => (\r\n              <th key={index} className=\"border border-gray-500 px-4 py-2\">\r\n                {date}\r\n              </th>\r\n            ))}\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n         {modelIds.map((modelId, rowIndex) => (\r\n            <tr key={rowIndex}>\r\n              <td className=\"border border-gray-500 px-4 py-2\">{modelId}</td>\r\n              {dates.map((day, colIndex) => {\r\n                const cellKey = `${rowIndex}-${colIndex}`;\r\n                return (\r\n                  <td\r\n                    key={colIndex}\r\n                    className=\"border border-gray-500 px-4 py-2\"\r\n                    onClick={() => handleCellClick(rowIndex, colIndex)}\r\n                  >\r\n                    {editingCell.rowId === rowIndex &&\r\n                    editingCell.colId === colIndex ? (\r\n                      <input\r\n                        type=\"number\"\r\n                        value={state.cellValue}\r\n                        onChange={handleInputChange}\r\n                        onBlur={handleInputBlur}\r\n                      />\r\n                    ) : (\r\n                      cellValues[cellKey] || \"\"\r\n                    )}\r\n                  </td>\r\n                );\r\n              })}\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n      {/* Save and Cancel buttons */}\r\n      <div className=\"flex justify-center my-10\">\r\n        <button\r\n          onClick={handleSave}\r\n          className=\"py-0 mx-4 border   border-gray-500 px-6\"\r\n        >\r\n          Save\r\n        </button>\r\n        <button\r\n          onClick={handleCancel}\r\n          className=\"py-0 mx-4 border  border-gray-500 px-6\"\r\n        >\r\n          Cancel\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Table;\r\n"],"mappings":";;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}