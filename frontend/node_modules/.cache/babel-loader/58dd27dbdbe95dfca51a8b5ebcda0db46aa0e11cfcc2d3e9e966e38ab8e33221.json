{"ast":null,"code":"var _jsxFileName = \"D:\\\\projectmodel\\\\frontend\\\\src\\\\Components\\\\Table.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Table = ({}) => {\n  _s();\n  const [editingCell, setEditingCell] = useState({\n    rowId: null,\n    colId: null\n  });\n  const [cellValues, setCellValues] = useState(0);\n  const [data, setData] = useState([]);\n  const [state, setState] = useState({\n    rowId: 0,\n    colId: 0,\n    cellValue: 0,\n    cId: 0\n  });\n  const [dateD, setDateD] = useState(\"\");\n  const [modelD, setModelD] = useState(\"\");\n  const [productionD, setProductionD] = useState(\"\");\n  const [fetchData, setFetchData] = useState(\"\");\n  useEffect(() => {\n    // API call to fetch data from backend\n    fetch('http://localhost:8082/data').then(response => response.json()).then(async data => {\n      setFetchData(data.data);\n      const transformedData = data.data.map(item => ({\n        date: item.date.split('T')[0],\n        modelId: item.modelId,\n        productionValue: item.productionValue\n      }));\n      let ar1 = [],\n        ar2 = [],\n        ar3 = [];\n      await data.data.map(item => {\n        ar1.push(item.date);\n        ar2.push(item.ModelId);\n        ar3.push(item.Production_values);\n      });\n      let arU = [...new Set(ar1)];\n      let arV = [...new Set(ar2)];\n      setDateD(arU);\n      setModelD(arV);\n      setProductionD(ar3);\n      console.log(\"Fetched data:\", data); // Log the fetched data\n      // console.log(\"Data type:\", typeof data); // Log the type of data\n      setData(transformedData);\n    }).catch(error => console.error('Error fetching company data:', error));\n  }, []);\n  const handleCellClick = (rowId, colId, cellId) => {\n    setState(prev => {\n      return {\n        ...prev,\n        [\"rowId\"]: rowId,\n        [\"colId\"]: colId,\n        [\"cId\"]: cellId\n      };\n    });\n    setEditingCell({\n      rowId,\n      colId\n    });\n    const cellKey = `${rowId}-${colId}`;\n    setCellValues(prevState => ({\n      ...prevState,\n      [cellKey]: prevState[cellKey] || \"\"\n    }));\n  };\n  const handleInputChange = e => {\n    // const { rowId, colId } = editingCell;\n    // console.log('colrowid',rowId,colId)\n    // setCellValues(e.target.value);\n    setState(prev => {\n      return {\n        ...prev,\n        [\"cellValue\"]: e.target.value\n      };\n    });\n  };\n  const handleInputBlur = () => {\n    setEditingCell({\n      rowId: null,\n      colId: null\n    });\n  };\n  const handleCancel = () => {\n    setEditingCell({\n      rowId: null,\n      colId: null\n    });\n    setCellValues({});\n  };\n  const handleSave = async e => {\n    e.preventDefault();\n    // console.log(\"Current editingCell:\", editingCell);\n    // if (\n    //   editingCell &&\n    //   editingCell.rowId !== undefined &&\n    //   editingCell.colId !== undefined\n    // )\n    if (cellValues !== 0 && state.rowId !== 0 && state.colId !== 0 && state.cId !== 0) {\n      // const { rowId, colId } = editingCell;\n      // console.log(\"rowId:\", state.rowId); // Log the value of rowId\n      // console.log(\"colId:\", state.colId); // Log the value of colId\n      // console.log(\"modelId:\", modelD[state.rowId]); // Log the value of modelId\n      // console.log(\"Id:\", dateD[state.colId]); // Log the value of Id\n\n      //const value = cellValues[`${rowId}-${colId}`];\n      const value = state.cellValue;\n      let col = Number(state.colId);\n      const date = dateD[col]; // Get the date from the dates array\n\n      try {\n        const response = await fetch(`http://localhost:8082/update`, {\n          method: \"PUT\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            productionValue: value,\n            date: date,\n            modelId: modelD[state.rowId],\n            id: state.cId\n          })\n        });\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        const newData = [...data];\n        console.log(newData);\n        newData[state.rowId][col] = value;\n        setData(newData);\n        setEditingCell({\n          rowId: null,\n          colId: null\n        });\n        console.log(\"Data updated successfully\");\n      } catch (error) {\n        console.error(\"Error updating data:\", error);\n      }\n    } else {\n      console.error(\"Editing cell is null\");\n    }\n  };\n  console.log('update', state);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"overflow-x-auto\",\n    children: [/*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"table-auto border border-collapse border-gray-500\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n          className: \"bg-gray-200\",\n          children: /*#__PURE__*/_jsxDEV(\"th\", {\n            colSpan: dateD.length + 1,\n            className: \"text-center\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"mx-8\",\n              children: \"Monthly data for April\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n          className: \"bg-gray-200\",\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            className: \"border border-gray-500\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 13\n          }, this), dateD.length > 0 ? dateD.map((item, index) => {\n            let dewDate = item.split('T')[0];\n            return /*#__PURE__*/_jsxDEV(\"th\", {\n              className: \"border border-gray-500 px-4 py-2\",\n              children: dewDate\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 154,\n              columnNumber: 21\n            }, this);\n          }) : \"\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: modelD.length > 0 ? modelD.map((modelId, rowIndex) => {\n          return /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"border border-gray-500 px-4 py-2\",\n              children: modelId\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 15\n            }, this), dateD.map((date, colIndex) => {\n              let productionValue = null,\n                cellId = 0;\n              fetchData.forEach(el => {\n                let elDate = el.date.split('T')[0];\n                let cDate = date.split('T')[0];\n                if (elDate == cDate && el.ModelId === modelId) {\n                  productionValue = el.Production_values;\n                  cellId = el.Id;\n                }\n                // console.log(modelId,\"el date\", el.date, \"date from state\", date)\n              });\n              // console.log(modelId,date);\n\n              return /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"border border-gray-500 px-4 py-2\",\n                onClick: () => handleCellClick(rowIndex, colIndex, cellId),\n                children: editingCell.rowId === rowIndex && editingCell.colId === colIndex ? /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"number\",\n                  value: productionValue,\n                  onChange: handleInputChange,\n                  onBlur: handleInputBlur\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 190,\n                  columnNumber: 23\n                }, this) : productionValue === null ? \"\" : productionValue\n              }, colIndex, false, {\n                fileName: _jsxFileName,\n                lineNumber: 183,\n                columnNumber: 19\n              }, this);\n            })]\n          }, rowIndex, true, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 15\n          }, this);\n        }) : \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-center my-10\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSave,\n        className: \"py-0 mx-4 border   border-gray-500 px-6\",\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleCancel,\n        className: \"py-0 mx-4 border  border-gray-500 px-6\",\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 5\n  }, this);\n};\n_s(Table, \"8Obs5UDSS7lFrvPiaa/cwZ4HOHI=\");\n_c = Table;\nexport default Table;\n\n// import React, { useState } from \"react\";\n\n// const Table = ({ modelIds, data }) => {\n//   const [editingCell, setEditingCell] = useState({ rowId: null, colId: null });\n//   const [cellValues, setCellValues] = useState({});\n\n//   const getValueForCell = (modelId, date) => {\n//     const rowData = data.find(item => item.date === date && item.modelId === modelId);\n//     return rowData ? rowData.productionValue : \"NA\";\n//   };\n\n//   const handleCellClick = (rowId, colId) => {\n//     setEditingCell({ rowId, colId });\n//     const cellKey = `${rowId}-${colId}`;\n//     setCellValues(prevState => ({\n//       ...prevState,\n//       [cellKey]: prevState[cellKey] || \"\",\n//     }));\n//   };\n\n//   const handleInputChange = (e) => {\n//     const { rowId, colId } = editingCell;\n//     const cellKey = `${rowId}-${colId}`;\n//     setCellValues(prevState => ({\n//       ...prevState,\n//       [cellKey]: e.target.value,\n//     }));\n//   };\n\n//   return (\n//     <div className=\"overflow-x-auto\">\n//       <table className=\"table-auto border border-collapse border-gray-500\">\n//         <thead>\n//           <tr className=\"bg-gray-200\">\n//             <th className=\"border border-gray-500\"></th>\n//             {data.map((item, index) => (\n//               <th key={index} className=\"border border-gray-500 px-4 py-2\">\n//                 {item.date.split('T')[0]}\n//               </th>\n//             ))}\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {modelIds.map((modelId, rowIndex) => (\n//             <tr key={rowIndex}>\n//               <td className=\"border border-gray-500 px-4 py-2\">{modelId}</td>\n//               {data.map((item, colIndex) => (\n//                 <td\n//                   key={colIndex}\n//                   className=\"border border-gray-500 px-4 py-2\"\n//                   onClick={() => handleCellClick(rowIndex, colIndex)}\n//                 >\n//                   {editingCell.rowId === rowIndex && editingCell.colId === colIndex ? (\n//                     <input\n//                       type=\"text\"\n//                       value={cellValues[`${rowIndex}-${colIndex}`] || \"\"}\n//                       onChange={handleInputChange}\n//                     />\n//                   ) : (\n//                     getValueForCell(modelId, item.date)\n//                   )}\n//                 </td>\n//               ))}\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default Table;\nvar _c;\n$RefreshReg$(_c, \"Table\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Table","_s","editingCell","setEditingCell","rowId","colId","cellValues","setCellValues","data","setData","state","setState","cellValue","cId","dateD","setDateD","modelD","setModelD","productionD","setProductionD","fetchData","setFetchData","fetch","then","response","json","transformedData","map","item","date","split","modelId","productionValue","ar1","ar2","ar3","push","ModelId","Production_values","arU","Set","arV","console","log","catch","error","handleCellClick","cellId","prev","cellKey","prevState","handleInputChange","e","target","value","handleInputBlur","handleCancel","handleSave","preventDefault","col","Number","method","headers","body","JSON","stringify","id","ok","Error","status","newData","className","children","colSpan","length","fileName","_jsxFileName","lineNumber","columnNumber","index","dewDate","rowIndex","colIndex","forEach","el","elDate","cDate","Id","onClick","type","onChange","onBlur","_c","$RefreshReg$"],"sources":["D:/projectmodel/frontend/src/Components/Table.js"],"sourcesContent":["\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nconst Table = ({  }) => {\r\n  const [editingCell, setEditingCell] = useState({ rowId: null, colId: null });\r\n  const [cellValues, setCellValues] = useState(0);\r\n  const [data, setData] = useState([]);\r\n  const [state, setState] = useState({\r\n    rowId: 0,\r\n    colId: 0,\r\n    cellValue: 0,\r\n    cId : 0\r\n  });\r\n  const [dateD,setDateD] = useState(\"\");\r\n  const [modelD,setModelD] = useState(\"\");\r\n  const [productionD,setProductionD] = useState(\"\");\r\n  const [fetchData,setFetchData] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    // API call to fetch data from backend\r\n    fetch('http://localhost:8082/data')\r\n      .then(response => response.json())\r\n      .then(async data => {\r\n        setFetchData(data.data);\r\n        const transformedData = data.data.map(item => ({\r\n          date:item.date.split('T')[0],\r\n          modelId:item.modelId,\r\n          productionValue:item.productionValue\r\n        }));\r\n        let ar1 =[],ar2=[],ar3=[];\r\n      await  data.data.map(item=>{\r\n           ar1.push(item.date);\r\n           ar2.push(item.ModelId);\r\n           ar3.push(item.Production_values);\r\n        })\r\n        let arU = [...new Set(ar1)]\r\n        let arV=  [...new Set(ar2)]\r\n        setDateD(arU);\r\n          setModelD(arV);\r\n          setProductionD(ar3)\r\n  \r\n        console.log(\"Fetched data:\", data); // Log the fetched data\r\n        // console.log(\"Data type:\", typeof data); // Log the type of data\r\n        setData(transformedData);\r\n      })\r\n      .catch(error => console.error('Error fetching company data:', error));\r\n  }, []);\r\n  \r\n  \r\n \r\n\r\n  const handleCellClick = (rowId, colId , cellId) => {\r\n    setState((prev) => {\r\n      return { ...prev, [\"rowId\"]: rowId, [\"colId\"]: colId , [\"cId\"]: cellId};\r\n    });\r\n    setEditingCell({ rowId, colId });\r\n    const cellKey = `${rowId}-${colId}`;\r\n    setCellValues((prevState) => ({\r\n      ...prevState,\r\n      [cellKey]: prevState[cellKey] || \"\",\r\n    }));\r\n  };\r\n  const handleInputChange = (e) => {\r\n    // const { rowId, colId } = editingCell;\r\n    // console.log('colrowid',rowId,colId)\r\n    // setCellValues(e.target.value);\r\n    setState((prev) => {\r\n      return { ...prev, [\"cellValue\"]: e.target.value };\r\n    });\r\n  };\r\n\r\n  const handleInputBlur = () => {\r\n    setEditingCell({ rowId: null, colId: null });\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setEditingCell({ rowId: null, colId: null });\r\n    setCellValues({});\r\n  };\r\n  const handleSave = async (e) => {\r\n    e.preventDefault();\r\n    // console.log(\"Current editingCell:\", editingCell);\r\n    // if (\r\n    //   editingCell &&\r\n    //   editingCell.rowId !== undefined &&\r\n    //   editingCell.colId !== undefined\r\n    // )\r\n    if (cellValues !== 0 && state.rowId !== 0 && state.colId !== 0 && state.cId !== 0) {\r\n      // const { rowId, colId } = editingCell;\r\n      // console.log(\"rowId:\", state.rowId); // Log the value of rowId\r\n      // console.log(\"colId:\", state.colId); // Log the value of colId\r\n      // console.log(\"modelId:\", modelD[state.rowId]); // Log the value of modelId\r\n      // console.log(\"Id:\", dateD[state.colId]); // Log the value of Id\r\n\r\n      //const value = cellValues[`${rowId}-${colId}`];\r\n      const value = state.cellValue;\r\n      let col = Number(state.colId);\r\n      const date = dateD[col]; // Get the date from the dates array\r\n\r\n      try {\r\n        const response = await fetch(`http://localhost:8082/update`, {\r\n          method: \"PUT\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({\r\n            productionValue: value,\r\n            date: date,\r\n            modelId: modelD[state.rowId],\r\n            id :state.cId\r\n          }),\r\n        });\r\n\r\n        if (!response.ok) {\r\n          throw new Error(`HTTP error! Status: ${response.status}`);\r\n        }\r\n\r\n        const newData = [...data];\r\n        console.log(newData);\r\n        newData[state.rowId][col] = value;\r\n        setData(newData);\r\n   \r\n        setEditingCell({ rowId: null, colId: null });\r\n        console.log(\"Data updated successfully\");\r\n      } catch (error) {\r\n        console.error(\"Error updating data:\", error);\r\n      }\r\n    } else {\r\n      console.error(\"Editing cell is null\");\r\n    }\r\n  };\r\nconsole.log('update',state)\r\n  return (\r\n    <div className=\"overflow-x-auto\">\r\n      <table className=\"table-auto border border-collapse border-gray-500\">\r\n        <thead>\r\n          <tr className=\"bg-gray-200\">\r\n            <th colSpan={dateD.length + 1} className=\"text-center\">\r\n              <span className=\"mx-8\">Monthly data for April</span>\r\n            </th>\r\n          </tr>\r\n          <tr className=\"bg-gray-200\">\r\n            <th className=\"border border-gray-500\"></th>\r\n            {/* {dates.map((date, index) => (\r\n              <th key={index} className=\"border border-gray-500 px-4 py-2\">\r\n                {date}\r\n              </th>\r\n            ))} */}\r\n            {\r\n              dateD.length > 0 ? dateD.map((item,index)=>{\r\n                let dewDate = item.split('T')[0];\r\n                  return(\r\n                    <th key={index} className=\"border border-gray-500 px-4 py-2\">\r\n                    {dewDate}\r\n              </th>\r\n                  )\r\n              })\r\n              : \"\"\r\n            }\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n        {modelD.length > 0 ? (\r\n          modelD.map((modelId, rowIndex) => {\r\n            return(\r\n              <tr key={rowIndex}>\r\n              <td className=\"border border-gray-500 px-4 py-2\">{modelId}</td>\r\n              {dateD.map((date, colIndex) => {\r\n                 let productionValue=null , cellId = 0;\r\n                 fetchData.forEach(el=>{\r\n                  let elDate  =  el.date.split('T')[0];\r\n                  let cDate = date.split('T')[0];\r\n                  if( elDate == cDate && el.ModelId === modelId){\r\n                    productionValue = el.Production_values;\r\n                    cellId = el.Id;\r\n                  }\r\n                 // console.log(modelId,\"el date\", el.date, \"date from state\", date)\r\n                 })\r\n                // console.log(modelId,date);\r\n                 \r\n                return (\r\n                  <td\r\n                    key={colIndex}\r\n                    className=\"border border-gray-500 px-4 py-2\"\r\n                    onClick={() => handleCellClick(rowIndex, colIndex , cellId)}\r\n                  >\r\n                    {editingCell.rowId === rowIndex &&\r\n                    editingCell.colId === colIndex ? (\r\n                      <input\r\n                        type=\"number\"\r\n                        value={productionValue}\r\n                        onChange={handleInputChange}\r\n                        onBlur={handleInputBlur}\r\n                      />\r\n                     ) : (\r\n                      productionValue === null ? \"\" : productionValue\r\n                     )}\r\n                  </td>\r\n                );\r\n              })}\r\n            </tr>\r\n            )\r\n          })\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </tbody>\r\n      </table>\r\n      {/* Save and Cancel buttons */}\r\n      <div className=\"flex justify-center my-10\">\r\n        <button\r\n          onClick={handleSave}\r\n          className=\"py-0 mx-4 border   border-gray-500 px-6\"\r\n        >\r\n          Save\r\n        </button>\r\n        <button\r\n          onClick={handleCancel}\r\n          className=\"py-0 mx-4 border  border-gray-500 px-6\"\r\n        >\r\n          Cancel\r\n        </button> \r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Table;\r\n\r\n// import React, { useState } from \"react\";\r\n\r\n// const Table = ({ modelIds, data }) => {\r\n//   const [editingCell, setEditingCell] = useState({ rowId: null, colId: null });\r\n//   const [cellValues, setCellValues] = useState({});\r\n\r\n//   const getValueForCell = (modelId, date) => {\r\n//     const rowData = data.find(item => item.date === date && item.modelId === modelId);\r\n//     return rowData ? rowData.productionValue : \"NA\";\r\n//   };\r\n\r\n//   const handleCellClick = (rowId, colId) => {\r\n//     setEditingCell({ rowId, colId });\r\n//     const cellKey = `${rowId}-${colId}`;\r\n//     setCellValues(prevState => ({\r\n//       ...prevState,\r\n//       [cellKey]: prevState[cellKey] || \"\",\r\n//     }));\r\n//   };\r\n\r\n//   const handleInputChange = (e) => {\r\n//     const { rowId, colId } = editingCell;\r\n//     const cellKey = `${rowId}-${colId}`;\r\n//     setCellValues(prevState => ({\r\n//       ...prevState,\r\n//       [cellKey]: e.target.value,\r\n//     }));\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"overflow-x-auto\">\r\n//       <table className=\"table-auto border border-collapse border-gray-500\">\r\n//         <thead>\r\n//           <tr className=\"bg-gray-200\">\r\n//             <th className=\"border border-gray-500\"></th>\r\n//             {data.map((item, index) => (\r\n//               <th key={index} className=\"border border-gray-500 px-4 py-2\">\r\n//                 {item.date.split('T')[0]}\r\n//               </th>\r\n//             ))}\r\n//           </tr>\r\n//         </thead>\r\n//         <tbody>\r\n//           {modelIds.map((modelId, rowIndex) => (\r\n//             <tr key={rowIndex}>\r\n//               <td className=\"border border-gray-500 px-4 py-2\">{modelId}</td>\r\n//               {data.map((item, colIndex) => (\r\n//                 <td\r\n//                   key={colIndex}\r\n//                   className=\"border border-gray-500 px-4 py-2\"\r\n//                   onClick={() => handleCellClick(rowIndex, colIndex)}\r\n//                 >\r\n//                   {editingCell.rowId === rowIndex && editingCell.colId === colIndex ? (\r\n//                     <input\r\n//                       type=\"text\"\r\n//                       value={cellValues[`${rowIndex}-${colIndex}`] || \"\"}\r\n//                       onChange={handleInputChange}\r\n//                     />\r\n//                   ) : (\r\n//                     getValueForCell(modelId, item.date)\r\n//                   )}\r\n//                 </td>\r\n//               ))}\r\n//             </tr>\r\n//           ))}\r\n//         </tbody>\r\n//       </table>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Table;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}