{"ast":null,"code":"var _jsxFileName = \"D:\\\\projectmodel\\\\frontend\\\\src\\\\Components\\\\Table.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n\n// const Table = ({ modelIds }) => {\n//   const [editingCell, setEditingCell] = useState(null);\n//   const [cellValues, setCellValues] = useState({});\n//   const[data,setData]=useState([])\n//   // Function to handle cell click\n//   const handleCellClick = (rowId, colId) => {\n//     console.log(\"Clicked cell:\", rowId, colId);\n//     setEditingCell({ rowId, colId });\n//     // Initialize cell value if not present\n//     setCellValues((prevState) => ({\n//       ...prevState,\n//       [`${rowId}-${colId}`]: prevState[`${rowId}-${colId}`] || \"\",\n//     }));\n//   };\n\n//   // Function to handle input change\n//   const handleInputChange = (e) => {\n\n//     if (editingCell) {\n//       const { rowId, colId } = editingCell;\n//       const value = e.target.value;\n//       setCellValues((prevState) => ({\n//         ...prevState,\n//         [`${rowId}-${colId}`]: value,\n//       }));\n//     }\n//   };\n\n//   // Function to handle input blur\n//   const handleInputBlur = () => {\n//     setEditingCell(null);\n//   };\n//   const handleCancel = () => {\n//     setEditingCell(null); // Clear editingCell state\n//     setCellValues({}); // Clear cellValues state\n//   };\n\n//   // Function to handle saving edited cell values\n//   const handleSave = async (e) => {\n//      e.preventDefault();\n//     console.log(\"Current editingCell:\", editingCell);\n//     if (editingCell) {\n//       const { rowId, colId } = editingCell;\n//       console.log(\"rowId:\", rowId); // Log the value of rowId\n//     console.log(\"colId:\", colId); // Log the value of colId\n//     console.log(\"modelId:\", modelIds[rowId]); // Log the value of modelId\n//     console.log(\"Id:\", ids[colId]); // Log the value of Id\n//      const  value = cellValues[`${rowId}-${colId}`];\n\n//     try {\n\n//         // Make the update request\n//         const response = await fetch(`http://localhost:8082/update`, {\n//           method: \"PUT\",\n//           headers: {\n//             \"Content-Type\": \"application/json\",\n//           },\n//           body: JSON.stringify({\n//             productionValue: value,\n//             id: rowId,\n//             modelId: modelIds[colId],\n//           }),\n//         });\n\n//         // Check if the response is successful\n//         if (!response.ok) {\n//           throw new Error(`HTTP error! Status: ${response.status}`);\n//         }\n//         const newData = [...data];\n//         newData[rowId][colId] = value;\n//         setData(newData);\n\n//         // Update the state if the response is successful\n//         setEditingCell(null);\n//         console.log(\"Data updated successfully\");\n//       } catch (error) {\n//         console.error(\"Error updating data:\", error);\n//       }\n//     } else {\n//       console.error(\"Editing cell is null\");\n\n//   };\n//     }\n//     useEffect(() => {\n//       // API call to fetch data from backend\n//       fetch('http://localhost:8082/data')\n//         .then(response => response.json())\n//         .then(result => {\n//           console.log(\"Received data:\", result.data); // Log the received data\n//           // Check if data is an array before calling map\n//           if (Array.isArray(result.data)) {\n//             // Transform data into the desired format\n//             const transformedData = result.data.map(item => ({\n//               modelId: item.ModelID,\n//               date: item.date\n//               // Add other properties you need\n//             }));\n\n//             // Update state with transformed data\n//             setData(transformedData);\n//           } else {\n//             console.error(\"Received data is not an array:\", result.data);\n//           }\n//         })\n//         .catch(error => console.error('Error fetching model data:', error));\n//     }, []);\n\n//   // Generate IDs 1 to 30\n//   const ids = Array.from({ length: 30 }, (_, i) => i + 1);\n\n//   return (\n//     <div className=\"overflow-x-auto\">\n//       <table className=\"table-auto border border-collapse border-gray-500\">\n//         <thead>\n//         <tr className=\"bg-gray-200\">\n//       <th colSpan=\"40\" className=\"text-center\">\n//         <span className=\"mx-8\">Monthly data for April</span>\n//       </th>\n//     </tr>\n//           <tr className=\"bg-gray-200\">\n\n//             <th className=\"border border-gray-500\"></th>\n//             {/* Render IDs horizontally */}\n//             {ids.map((date) => (\n//               <th key={date} className=\"border border-gray-500 px-4 py-2\">\n//                 {date}\n//               </th>\n//             ))}\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {/* Render ModelIds vertically */}\n//           {modelIds.map((modelId, rowIndex) => (\n//             <tr key={modelId}>\n//               <td className=\"border border-gray-500 px-4 py-2\">{modelId}</td>\n//               {ids.map((id, colIndex) => {\n//                 const cellKey = `${rowIndex}-${colIndex}`;\n//                 const productionValue = data.find(item => item.modelId === modelId && item.date === id)?.productionValue || \"\";\n\n//                 return (\n//                   <td\n//                     key={id}\n//                     className=\"border border-gray-500 px-4 py-2\"\n//                     onClick={() => handleCellClick(rowIndex, colIndex)}\n//                   >\n//                     {/* Conditionally render input field */}\n//                     {editingCell &&\n//                     editingCell.rowId === rowIndex &&\n//                     editingCell.colId === colIndex ? (\n//                       <input\n//                         type=\"text\"\n//                         value={cellValues[cellKey]}\n//                         onChange={handleInputChange}\n//                         onBlur={handleInputBlur}\n//                       />\n//                     ) : (\n//                       productionValue\n//                     )}\n//                   </td>\n//                 );\n//               })}\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//       {/* Save button */}\n//       <div className=\"flex justify-center my-10 \">\n//       <button\n//         onClick={handleSave}\n//         className=\"py-0 mx-4 border   border-gray-500 px-6   \"\n//       >\n//         Save\n//       </button>\n//       <button\n//         onClick={handleCancel}\n//         className=\"py-0 mx-4 border  border-gray-500 px-6 \"\n//       >\n//         Cancel\n//       </button>\n//       </div>            \n//     </div>\n//   );\n// };\n\n// export default Table;\n\n// import React, { useState } from \"react\";\n\n// const Table = ({ modelIds }) => {\n//   const [editingCell, setEditingCell] = useState({ rowId: null, colId: null });\n//   const [cellValues, setCellValues] = useState({});\n//   const [data, setData] = useState([]);\n\n//   const handleCellClick = (rowId, colId) => {\n//     console.log(\"Clicked cell:\", rowId, colId);\n//     setEditingCell({ rowId, colId });\n//     const cellKey = `${rowId}-${colId}`;\n//     setCellValues((prevState) => ({\n//       ...prevState,\n//       [cellKey]: prevState[cellKey] || \"\",\n//     }));\n//   };\n\n//   const handleInputChange = (e) => {\n//     const { rowId, colId } = editingCell;\n//     const value = e.target.value;\n//     setCellValues((prevState) => ({\n//       ...prevState,\n//       [`${rowId}-${colId}`]: value,\n//     }));\n//   };\n\n//   const handleInputBlur = () => {\n//     setEditingCell({ rowId: null, colId: null });\n//   };\n\n//   const handleCancel = () => {\n//     setEditingCell({ rowId: null, colId: null });\n//     setCellValues({});\n//   };\n\n//   const handleSave = async (e) => {\n//     e.preventDefault();\n//     console.log(\"Current editingCell:\", editingCell);\n//     if (editingCell && editingCell.rowId !== undefined && editingCell.colId !== undefined) {\n//       const { rowId, colId } = editingCell;\n//       console.log(\"rowId:\", rowId); // Log the value of rowId\n//       console.log(\"colId:\", colId); // Log the value of colId\n//       console.log(\"modelId:\", modelIds[rowId]); // Log the value of modelId\n//       console.log(\"Id:\", days[colId]); // Log the value of Id\n\n//     const value = cellValues[`${rowId}-${colId}`];\n//     const date = `${new Date().getFullYear()}-04-${colId + 1}`; // Assuming the month is April\n\n//     try {\n//       const response = await fetch(`http://localhost:8082/update`, {\n//         method: \"PUT\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//         body: JSON.stringify({\n//           productionValue: value,\n//           date: date,\n\n//           modelId: modelIds[rowId],\n//         }),\n//       });\n\n//       if (!response.ok) {\n//         throw new Error(`HTTP error! Status: ${response.status}`);\n//       }\n\n//       const newData = [...data];\n//       newData[rowId][colId] = value;\n//       setData(newData);\n\n//       setEditingCell({ rowId: null, colId: null });\n//       console.log(\"Data updated successfully\");\n//     } catch (error) {\n//       console.error(\"Error updating data:\", error);\n//     }\n//   }else {\n//       console.error(\"Editing cell is null\");\n//     }\n\n//   };\n\n//   const days = Array.from({ length: 30 }, (_, i) => i + 1); // Assuming there are 30 days in a month\n\n//   return (\n//     <div className=\"overflow-x-auto\">\n//       <table className=\"table-auto border border-collapse border-gray-500\">\n//         <thead>\n//           <tr className=\"bg-gray-200\">\n//             <th colSpan={days.length + 1} className=\"text-center\">\n//               <span className=\"mx-8\">Monthly data for April</span>\n//             </th>\n//           </tr>\n//           <tr className=\"bg-gray-200\">\n//             <th className=\"border border-gray-500\"></th>\n//             {days.map((day) => (\n//               <th key={day} className=\"border border-gray-500 px-4 py-2\">\n//                 {day}\n//               </th>\n//             ))}\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {modelIds.map((modelId, rowIndex) => (\n//             <tr key={modelId}>\n//               <td className=\"border border-gray-500 px-4 py-2\">{modelId}</td>\n//               {days.map((day, colIndex) => {\n//                 const cellKey = `${rowIndex}-${colIndex}`;\n//                 return (\n//                   <td\n//                     key={day}\n//                     className=\"border border-gray-500 px-4 py-2\"\n//                     onClick={() => handleCellClick(rowIndex, colIndex)}\n//                   >\n//                     {editingCell.rowId === rowIndex &&\n//                     editingCell.colId === colIndex ? (\n//                       <input\n//                         type=\"text\"\n//                         value={cellValues[cellKey] || \"\"}\n//                         onChange={handleInputChange}\n//                         onBlur={handleInputBlur}\n//                       />\n//                     ) : (\n//                       cellValues[cellKey] || \"\"\n//                     )}\n//                   </td>\n//                 );\n//               })}\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//       <div className=\"flex justify-center my-10 \">\n//         <button\n//           onClick={handleSave}\n//           className=\"py-0 mx-4 border   border-gray-500 px-6   \"\n//         >\n//           Save\n//         </button>\n//         <button\n//           onClick={handleCancel}\n//           className=\"py-0 mx-4 border  border-gray-500 px-6 \"\n//         >\n//           Cancel\n//         </button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Table;\n\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Table = ({\n  modelIds\n}) => {\n  _s();\n  const [editingCell, setEditingCell] = useState({\n    rowId: null,\n    colId: null\n  });\n  const [cellValues, setCellValues] = useState({});\n  const [data, setData] = useState([]);\n  const handleCellClick = (rowId, colId) => {\n    console.log(\"Clicked cell:\", rowId, colId);\n    setEditingCell({\n      rowId,\n      colId\n    });\n    const cellKey = `${rowId}-${colId}`;\n    setCellValues(prevState => ({\n      ...prevState,\n      [cellKey]: prevState[cellKey] || \"\"\n    }));\n  };\n  const handleInputChange = e => {\n    const {\n      rowId,\n      colId\n    } = editingCell;\n    const value = e.target.value;\n    setCellValues(prevState => ({\n      ...prevState,\n      [`${rowId}-${colId}`]: value\n    }));\n  };\n  const handleInputBlur = () => {\n    setEditingCell({\n      rowId: null,\n      colId: null\n    });\n  };\n  const handleCancel = () => {\n    setEditingCell({\n      rowId: null,\n      colId: null\n    });\n    setCellValues({});\n  };\n  const handleSave = async e => {\n    e.preventDefault();\n    console.log(\"Current editingCell:\", editingCell);\n    if (editingCell && editingCell.rowId !== undefined && editingCell.colId !== undefined) {\n      const {\n        rowId,\n        colId\n      } = editingCell;\n      console.log(\"rowId:\", rowId); // Log the value of rowId\n      console.log(\"colId:\", colId); // Log the value of colId\n      console.log(\"modelId:\", modelIds[rowId]); // Log the value of modelId\n      console.log(\"Id:\", dates[colId]); // Log the value of Id\n\n      const value = cellValues[`${rowId}-${colId}`];\n      const date = dates[colId];\n      try {\n        const response = await fetch(`http://localhost:8082/update`, {\n          method: \"PUT\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            productionValue: value,\n            date: date,\n            id: dates[colId],\n            modelId: modelIds[rowId]\n          })\n        });\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        const newData = [...data];\n        newData[rowId][colId] = value;\n        setData(newData);\n        setEditingCell({\n          rowId: null,\n          colId: null\n        });\n        console.log(\"Data updated successfully\");\n      } catch (error) {\n        console.error(\"Error updating data:\", error);\n      }\n    } else {\n      console.error(\"Editing cell is null\");\n    }\n  };\n\n  // Generate an array of dates in the format YYYY-MM-DD\n  const startDate = new Date(new Date().getFullYear(), 3, 1); // April 1st\n  const endDate = new Date(new Date().getFullYear(), 3, 30); // April 30th\n  const dates = [];\n  for (let date = startDate; date <= endDate; date.setDate(date.getDate() + 1)) {\n    dates.push(date.toISOString().slice(0, 10));\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"overflow-x-auto\",\n    children: [modelIds.map((modelId, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-lg font-semibold mb-2\",\n        children: modelId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 440,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"table-auto border border-collapse border-gray-500\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n            className: \"bg-gray-200\",\n            children: /*#__PURE__*/_jsxDEV(\"th\", {\n              colSpan: dates.length + 1,\n              className: \"text-center\",\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"mx-8\",\n                children: \"Monthly data for April\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 445,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 444,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 443,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n            className: \"bg-gray-200\",\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              className: \"border border-gray-500\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 449,\n              columnNumber: 17\n            }, this), dates.map((date, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n              className: \"border border-gray-500 px-4 py-2\",\n              children: date\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 451,\n              columnNumber: 19\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 448,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 442,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"border border-gray-500 px-4 py-2\",\n              children: modelId\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 459,\n              columnNumber: 17\n            }, this), dates.map((date, colIndex) => {\n              const cellKey = `${rowIndex}-${colIndex}`;\n              return /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"border border-gray-500 px-4 py-2\",\n                onClick: () => handleCellClick(rowIndex, colIndex),\n                children: editingCell.rowId === rowIndex && editingCell.colId === colIndex ? /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  value: cellValues[cellKey] || \"\",\n                  onChange: handleInputChange,\n                  onBlur: handleInputBlur\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 470,\n                  columnNumber: 25\n                }, this) : cellValues[cellKey] || \"\"\n              }, date, false, {\n                fileName: _jsxFileName,\n                lineNumber: 463,\n                columnNumber: 21\n              }, this);\n            })]\n          }, modelId, true, {\n            fileName: _jsxFileName,\n            lineNumber: 458,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 457,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 441,\n        columnNumber: 11\n      }, this)]\n    }, modelId, true, {\n      fileName: _jsxFileName,\n      lineNumber: 439,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-center my-10 \",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSave,\n        className: \"py-0 mx-4 border   border-gray-500 px-6   \",\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 488,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleCancel,\n        className: \"py-0 mx-4 border  border-gray-500 px-6 \",\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 494,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 487,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 437,\n    columnNumber: 5\n  }, this);\n};\n_s(Table, \"1KxGARsz2ba7ObXv7mYFt9ThQ2k=\");\n_c = Table;\nexport default Table;\nvar _c;\n$RefreshReg$(_c, \"Table\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Table","modelIds","_s","editingCell","setEditingCell","rowId","colId","cellValues","setCellValues","data","setData","handleCellClick","console","log","cellKey","prevState","handleInputChange","e","value","target","handleInputBlur","handleCancel","handleSave","preventDefault","undefined","dates","date","response","fetch","method","headers","body","JSON","stringify","productionValue","id","modelId","ok","Error","status","newData","error","startDate","Date","getFullYear","endDate","setDate","getDate","push","toISOString","slice","className","children","map","rowIndex","fileName","_jsxFileName","lineNumber","columnNumber","colSpan","length","index","colIndex","onClick","type","onChange","onBlur","_c","$RefreshReg$"],"sources":["D:/projectmodel/frontend/src/Components/Table.js"],"sourcesContent":[" \r\n// import React, { useState, useEffect } from \"react\";\r\n \r\n// const Table = ({ modelIds }) => {\r\n//   const [editingCell, setEditingCell] = useState(null);\r\n//   const [cellValues, setCellValues] = useState({});\r\n//   const[data,setData]=useState([])\r\n//   // Function to handle cell click\r\n//   const handleCellClick = (rowId, colId) => {\r\n//     console.log(\"Clicked cell:\", rowId, colId);\r\n//     setEditingCell({ rowId, colId });\r\n//     // Initialize cell value if not present\r\n//     setCellValues((prevState) => ({\r\n//       ...prevState,\r\n//       [`${rowId}-${colId}`]: prevState[`${rowId}-${colId}`] || \"\",\r\n//     }));\r\n//   };\r\n \r\n//   // Function to handle input change\r\n//   const handleInputChange = (e) => {\r\n   \r\n//     if (editingCell) {\r\n//       const { rowId, colId } = editingCell;\r\n//       const value = e.target.value;\r\n//       setCellValues((prevState) => ({\r\n//         ...prevState,\r\n//         [`${rowId}-${colId}`]: value,\r\n//       }));\r\n//     }\r\n//   };\r\n \r\n//   // Function to handle input blur\r\n//   const handleInputBlur = () => {\r\n//     setEditingCell(null);\r\n//   };\r\n//   const handleCancel = () => {\r\n//     setEditingCell(null); // Clear editingCell state\r\n//     setCellValues({}); // Clear cellValues state\r\n//   };\r\n \r\n//   // Function to handle saving edited cell values\r\n//   const handleSave = async (e) => {\r\n//      e.preventDefault();\r\n//     console.log(\"Current editingCell:\", editingCell);\r\n//     if (editingCell) {\r\n//       const { rowId, colId } = editingCell;\r\n//       console.log(\"rowId:\", rowId); // Log the value of rowId\r\n//     console.log(\"colId:\", colId); // Log the value of colId\r\n//     console.log(\"modelId:\", modelIds[rowId]); // Log the value of modelId\r\n//     console.log(\"Id:\", ids[colId]); // Log the value of Id\r\n//      const  value = cellValues[`${rowId}-${colId}`];\r\n   \r\n//     try {\r\n   \r\n     \r\n//         // Make the update request\r\n//         const response = await fetch(`http://localhost:8082/update`, {\r\n//           method: \"PUT\",\r\n//           headers: {\r\n//             \"Content-Type\": \"application/json\",\r\n//           },\r\n//           body: JSON.stringify({\r\n//             productionValue: value,\r\n//             id: rowId,\r\n//             modelId: modelIds[colId],\r\n//           }),\r\n//         });\r\n       \r\n \r\n//         // Check if the response is successful\r\n//         if (!response.ok) {\r\n//           throw new Error(`HTTP error! Status: ${response.status}`);\r\n//         }\r\n//         const newData = [...data];\r\n//         newData[rowId][colId] = value;\r\n//         setData(newData);\r\n \r\n//         // Update the state if the response is successful\r\n//         setEditingCell(null);\r\n//         console.log(\"Data updated successfully\");\r\n//       } catch (error) {\r\n//         console.error(\"Error updating data:\", error);\r\n//       }\r\n//     } else {\r\n//       console.error(\"Editing cell is null\");\r\n \r\n//   };\r\n//     }\r\n//     useEffect(() => {\r\n//       // API call to fetch data from backend\r\n//       fetch('http://localhost:8082/data')\r\n//         .then(response => response.json())\r\n//         .then(result => {\r\n//           console.log(\"Received data:\", result.data); // Log the received data\r\n//           // Check if data is an array before calling map\r\n//           if (Array.isArray(result.data)) {\r\n//             // Transform data into the desired format\r\n//             const transformedData = result.data.map(item => ({\r\n//               modelId: item.ModelID,\r\n//               date: item.date\r\n//               // Add other properties you need\r\n//             }));\r\n   \r\n//             // Update state with transformed data\r\n//             setData(transformedData);\r\n//           } else {\r\n//             console.error(\"Received data is not an array:\", result.data);\r\n//           }\r\n//         })\r\n//         .catch(error => console.error('Error fetching model data:', error));\r\n//     }, []);\r\n \r\n   \r\n \r\n \r\n//   // Generate IDs 1 to 30\r\n//   const ids = Array.from({ length: 30 }, (_, i) => i + 1);\r\n \r\n//   return (\r\n//     <div className=\"overflow-x-auto\">\r\n//       <table className=\"table-auto border border-collapse border-gray-500\">\r\n//         <thead>\r\n//         <tr className=\"bg-gray-200\">\r\n//       <th colSpan=\"40\" className=\"text-center\">\r\n//         <span className=\"mx-8\">Monthly data for April</span>\r\n//       </th>\r\n//     </tr>\r\n//           <tr className=\"bg-gray-200\">\r\n         \r\n//             <th className=\"border border-gray-500\"></th>\r\n//             {/* Render IDs horizontally */}\r\n//             {ids.map((date) => (\r\n//               <th key={date} className=\"border border-gray-500 px-4 py-2\">\r\n//                 {date}\r\n//               </th>\r\n//             ))}\r\n//           </tr>\r\n//         </thead>\r\n//         <tbody>\r\n//           {/* Render ModelIds vertically */}\r\n//           {modelIds.map((modelId, rowIndex) => (\r\n//             <tr key={modelId}>\r\n//               <td className=\"border border-gray-500 px-4 py-2\">{modelId}</td>\r\n//               {ids.map((id, colIndex) => {\r\n//                 const cellKey = `${rowIndex}-${colIndex}`;\r\n//                 const productionValue = data.find(item => item.modelId === modelId && item.date === id)?.productionValue || \"\";\r\n \r\n//                 return (\r\n//                   <td\r\n//                     key={id}\r\n//                     className=\"border border-gray-500 px-4 py-2\"\r\n//                     onClick={() => handleCellClick(rowIndex, colIndex)}\r\n//                   >\r\n//                     {/* Conditionally render input field */}\r\n//                     {editingCell &&\r\n//                     editingCell.rowId === rowIndex &&\r\n//                     editingCell.colId === colIndex ? (\r\n//                       <input\r\n//                         type=\"text\"\r\n//                         value={cellValues[cellKey]}\r\n//                         onChange={handleInputChange}\r\n//                         onBlur={handleInputBlur}\r\n//                       />\r\n//                     ) : (\r\n//                       productionValue\r\n//                     )}\r\n//                   </td>\r\n//                 );\r\n//               })}\r\n//             </tr>\r\n//           ))}\r\n//         </tbody>\r\n//       </table>\r\n//       {/* Save button */}\r\n//       <div className=\"flex justify-center my-10 \">\r\n//       <button\r\n//         onClick={handleSave}\r\n//         className=\"py-0 mx-4 border   border-gray-500 px-6   \"\r\n//       >\r\n//         Save\r\n//       </button>\r\n//       <button\r\n//         onClick={handleCancel}\r\n//         className=\"py-0 mx-4 border  border-gray-500 px-6 \"\r\n//       >\r\n//         Cancel\r\n//       </button>\r\n//       </div>            \r\n//     </div>\r\n//   );\r\n// };\r\n \r\n// export default Table;\r\n \r\n// import React, { useState } from \"react\";\r\n\r\n// const Table = ({ modelIds }) => {\r\n//   const [editingCell, setEditingCell] = useState({ rowId: null, colId: null });\r\n//   const [cellValues, setCellValues] = useState({});\r\n//   const [data, setData] = useState([]);\r\n\r\n//   const handleCellClick = (rowId, colId) => {\r\n//     console.log(\"Clicked cell:\", rowId, colId);\r\n//     setEditingCell({ rowId, colId });\r\n//     const cellKey = `${rowId}-${colId}`;\r\n//     setCellValues((prevState) => ({\r\n//       ...prevState,\r\n//       [cellKey]: prevState[cellKey] || \"\",\r\n//     }));\r\n//   };\r\n\r\n//   const handleInputChange = (e) => {\r\n//     const { rowId, colId } = editingCell;\r\n//     const value = e.target.value;\r\n//     setCellValues((prevState) => ({\r\n//       ...prevState,\r\n//       [`${rowId}-${colId}`]: value,\r\n//     }));\r\n//   };\r\n\r\n//   const handleInputBlur = () => {\r\n//     setEditingCell({ rowId: null, colId: null });\r\n//   };\r\n\r\n//   const handleCancel = () => {\r\n//     setEditingCell({ rowId: null, colId: null });\r\n//     setCellValues({});\r\n//   };\r\n\r\n//   const handleSave = async (e) => {\r\n//     e.preventDefault();\r\n//     console.log(\"Current editingCell:\", editingCell);\r\n//     if (editingCell && editingCell.rowId !== undefined && editingCell.colId !== undefined) {\r\n//       const { rowId, colId } = editingCell;\r\n//       console.log(\"rowId:\", rowId); // Log the value of rowId\r\n//       console.log(\"colId:\", colId); // Log the value of colId\r\n//       console.log(\"modelId:\", modelIds[rowId]); // Log the value of modelId\r\n//       console.log(\"Id:\", days[colId]); // Log the value of Id\r\n   \r\n//     const value = cellValues[`${rowId}-${colId}`];\r\n//     const date = `${new Date().getFullYear()}-04-${colId + 1}`; // Assuming the month is April\r\n\r\n//     try {\r\n//       const response = await fetch(`http://localhost:8082/update`, {\r\n//         method: \"PUT\",\r\n//         headers: {\r\n//           \"Content-Type\": \"application/json\",\r\n//         },\r\n//         body: JSON.stringify({\r\n//           productionValue: value,\r\n//           date: date,\r\n          \r\n//           modelId: modelIds[rowId],\r\n//         }),\r\n//       });\r\n\r\n//       if (!response.ok) {\r\n//         throw new Error(`HTTP error! Status: ${response.status}`);\r\n//       }\r\n\r\n//       const newData = [...data];\r\n//       newData[rowId][colId] = value;\r\n//       setData(newData);\r\n\r\n//       setEditingCell({ rowId: null, colId: null });\r\n//       console.log(\"Data updated successfully\");\r\n//     } catch (error) {\r\n//       console.error(\"Error updating data:\", error);\r\n//     }\r\n//   }else {\r\n//       console.error(\"Editing cell is null\");\r\n//     }\r\n  \r\n//   };\r\n\r\n//   const days = Array.from({ length: 30 }, (_, i) => i + 1); // Assuming there are 30 days in a month\r\n\r\n//   return (\r\n//     <div className=\"overflow-x-auto\">\r\n//       <table className=\"table-auto border border-collapse border-gray-500\">\r\n//         <thead>\r\n//           <tr className=\"bg-gray-200\">\r\n//             <th colSpan={days.length + 1} className=\"text-center\">\r\n//               <span className=\"mx-8\">Monthly data for April</span>\r\n//             </th>\r\n//           </tr>\r\n//           <tr className=\"bg-gray-200\">\r\n//             <th className=\"border border-gray-500\"></th>\r\n//             {days.map((day) => (\r\n//               <th key={day} className=\"border border-gray-500 px-4 py-2\">\r\n//                 {day}\r\n//               </th>\r\n//             ))}\r\n//           </tr>\r\n//         </thead>\r\n//         <tbody>\r\n//           {modelIds.map((modelId, rowIndex) => (\r\n//             <tr key={modelId}>\r\n//               <td className=\"border border-gray-500 px-4 py-2\">{modelId}</td>\r\n//               {days.map((day, colIndex) => {\r\n//                 const cellKey = `${rowIndex}-${colIndex}`;\r\n//                 return (\r\n//                   <td\r\n//                     key={day}\r\n//                     className=\"border border-gray-500 px-4 py-2\"\r\n//                     onClick={() => handleCellClick(rowIndex, colIndex)}\r\n//                   >\r\n//                     {editingCell.rowId === rowIndex &&\r\n//                     editingCell.colId === colIndex ? (\r\n//                       <input\r\n//                         type=\"text\"\r\n//                         value={cellValues[cellKey] || \"\"}\r\n//                         onChange={handleInputChange}\r\n//                         onBlur={handleInputBlur}\r\n//                       />\r\n//                     ) : (\r\n//                       cellValues[cellKey] || \"\"\r\n//                     )}\r\n//                   </td>\r\n//                 );\r\n//               })}\r\n//             </tr>\r\n//           ))}\r\n//         </tbody>\r\n//       </table>\r\n//       <div className=\"flex justify-center my-10 \">\r\n//         <button\r\n//           onClick={handleSave}\r\n//           className=\"py-0 mx-4 border   border-gray-500 px-6   \"\r\n//         >\r\n//           Save\r\n//         </button>\r\n//         <button\r\n//           onClick={handleCancel}\r\n//           className=\"py-0 mx-4 border  border-gray-500 px-6 \"\r\n//         >\r\n//           Cancel\r\n//         </button>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n\r\n// export default Table;\r\n\r\n\r\nimport React, { useState } from \"react\";\r\n\r\nconst Table = ({ modelIds }) => {\r\n  const [editingCell, setEditingCell] = useState({ rowId: null, colId: null });\r\n  const [cellValues, setCellValues] = useState({});\r\n  const [data, setData] = useState([]);\r\n\r\n  const handleCellClick = (rowId, colId) => {\r\n    console.log(\"Clicked cell:\", rowId, colId);\r\n    setEditingCell({ rowId, colId });\r\n    const cellKey = `${rowId}-${colId}`;\r\n    setCellValues((prevState) => ({\r\n      ...prevState,\r\n      [cellKey]: prevState[cellKey] || \"\",\r\n    }));\r\n  };\r\n\r\n  const handleInputChange = (e) => {\r\n    const { rowId, colId } = editingCell;\r\n    const value = e.target.value;\r\n    setCellValues((prevState) => ({\r\n      ...prevState,\r\n      [`${rowId}-${colId}`]: value,\r\n    }));\r\n  };\r\n\r\n  const handleInputBlur = () => {\r\n    setEditingCell({ rowId: null, colId: null });\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setEditingCell({ rowId: null, colId: null });\r\n    setCellValues({});\r\n  };\r\n\r\n  const handleSave = async (e) => {\r\n    e.preventDefault();\r\n    console.log(\"Current editingCell:\", editingCell);\r\n    if (editingCell && editingCell.rowId !== undefined && editingCell.colId !== undefined) {\r\n      const { rowId, colId } = editingCell;\r\n      console.log(\"rowId:\", rowId); // Log the value of rowId\r\n      console.log(\"colId:\", colId); // Log the value of colId\r\n      console.log(\"modelId:\", modelIds[rowId]); // Log the value of modelId\r\n      console.log(\"Id:\", dates[colId]); // Log the value of Id\r\n   \r\n      const value = cellValues[`${rowId}-${colId}`];\r\n      const date = dates[colId];\r\n\r\n      try {\r\n        const response = await fetch(`http://localhost:8082/update`, {\r\n          method: \"PUT\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({\r\n            productionValue: value,\r\n            date: date,\r\n            id: dates[colId],\r\n            modelId: modelIds[rowId],\r\n          }),\r\n        });\r\n\r\n        if (!response.ok) {\r\n          throw new Error(`HTTP error! Status: ${response.status}`);\r\n        }\r\n\r\n        const newData = [...data];\r\n        newData[rowId][colId] = value;\r\n        setData(newData);\r\n\r\n        setEditingCell({ rowId: null, colId: null });\r\n        console.log(\"Data updated successfully\");\r\n      } catch (error) {\r\n        console.error(\"Error updating data:\", error);\r\n      }\r\n    } else {\r\n      console.error(\"Editing cell is null\");\r\n    }\r\n  };\r\n\r\n  // Generate an array of dates in the format YYYY-MM-DD\r\n  const startDate = new Date(new Date().getFullYear(), 3, 1); // April 1st\r\n  const endDate = new Date(new Date().getFullYear(), 3, 30); // April 30th\r\n  const dates = [];\r\n  for (let date = startDate; date <= endDate; date.setDate(date.getDate() + 1)) {\r\n    dates.push(date.toISOString().slice(0,10));\r\n  }\r\n\r\n  return (\r\n    <div className=\"overflow-x-auto\">\r\n      {modelIds.map((modelId, rowIndex) => (\r\n        <div key={modelId} className=\"mb-6\">\r\n          <h2 className=\"text-lg font-semibold mb-2\">{modelId}</h2>\r\n          <table className=\"table-auto border border-collapse border-gray-500\">\r\n            <thead>\r\n              <tr className=\"bg-gray-200\">\r\n                <th colSpan={dates.length + 1} className=\"text-center\">\r\n                  <span className=\"mx-8\">Monthly data for April</span>\r\n                </th>\r\n              </tr>\r\n              <tr className=\"bg-gray-200\">\r\n                <th className=\"border border-gray-500\"></th>\r\n                {dates.map((date, index) => (\r\n                  <th key={index} className=\"border border-gray-500 px-4 py-2\">\r\n                    {date}\r\n                  </th>\r\n                ))}\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              <tr key={modelId}>\r\n                <td className=\"border border-gray-500 px-4 py-2\">{modelId}</td>\r\n                {dates.map((date, colIndex) => {\r\n                  const cellKey = `${rowIndex}-${colIndex}`;\r\n                  return (\r\n                    <td\r\n                      key={date}\r\n                      className=\"border border-gray-500 px-4 py-2\"\r\n                      onClick={() => handleCellClick(rowIndex, colIndex)}\r\n                    >\r\n                      {editingCell.rowId === rowIndex &&\r\n                      editingCell.colId === colIndex ? (\r\n                        <input\r\n                          type=\"text\"\r\n                          value={cellValues[cellKey] || \"\"}\r\n                          onChange={handleInputChange}\r\n                          onBlur={handleInputBlur}\r\n                        />\r\n                      ) : (\r\n                        cellValues[cellKey] || \"\"\r\n                      )}\r\n                    </td>\r\n                  );\r\n                })}\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      ))}\r\n      <div className=\"flex justify-center my-10 \">\r\n        <button\r\n          onClick={handleSave}\r\n          className=\"py-0 mx-4 border   border-gray-500 px-6   \"\r\n        >\r\n          Save\r\n        </button>\r\n        <button\r\n          onClick={handleCancel}\r\n          className=\"py-0 mx-4 border  border-gray-500 px-6 \"\r\n        >\r\n          Cancel\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Table;\r\n"],"mappings":";;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}