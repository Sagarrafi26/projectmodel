{"ast":null,"code":"var _jsxFileName = \"D:\\\\ModelProject\\\\frontend\\\\src\\\\Components\\\\Table.js\",\n  _s = $RefreshSig$();\n// import React from 'react';\n\n// class Table extends React.Component {\n//   render() {\n//     // Generate IDs 1 to 30\n//     const ids = Array.from({ length: 30 }, (_, i) => i + 1);\n//     // Sample ModelIds\n//     const modelIds = ['model1', 'model2', 'model3', 'model4', 'model5'];\n\n//     return (\n//       <div className=\"overflow-x-auto\">\n//         <table className=\"table-auto border border-collapse border-gray-500\">\n//           <thead>\n//             <tr className=\"bg-gray-200\">\n//               <th className=\"border border-gray-500\"></th>\n//               {/* Render IDs horizontally */}\n//               {ids.map(id => (\n//                 <th key={id} className=\"border border-gray-500 px-4 py-2\">{id}</th>\n//               ))}\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {/* Render ModelIds vertically */}\n//             {modelIds.map(modelId => (\n//               <tr key={modelId}>\n//                 <td className=\"border border-gray-500 px-4 py-2\">{modelId}</td>\n\n//                 {ids.map(id => (\n//                   <td key={id} className=\"border border-gray-500 px-4 py-2\"></td>\n//                 ))}\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//       </div>\n//     );\n//   }\n// }\n\n// export default Table;\n\n// import React from 'react';\n\n// class Table extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       editedValue: '', // State to track edited value\n//       selectedCell: null // State to track selected cell\n//     };\n//   }\n\n//   handleCellClick = (modelId, id) => {\n//     this.setState({\n//       selectedCell: { modelId, id }, // Set the selected cell\n//       editedValue: this.props.data[modelId][id] || '' // Set the edited value from props or empty string\n//     });\n//   };\n\n//   handleValueChange = (event) => {\n//     this.setState({ editedValue: event.target.value });\n//   };\n\n//   handleSave = async () => {\n//     const { selectedCell, editedValue } = this.state;\n//     const { modelId, id } = selectedCell;\n\n//     try {\n//       const response = await fetch(`http://localhost:8081/update/${id}/${modelId}`, {\n//         method: \"PUT\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//         body: JSON.stringify({ productionValue: editedValue }),\n//       });\n\n//       if (!response.ok) {\n//         throw new Error(`HTTP error! Status: ${response.status}`);\n//       }\n\n//       console.log('Data saved successfully');\n//       // Refresh data after saving\n//       this.props.refreshData();\n//     } catch (error) {\n//       console.error('Error saving data:', error);\n//     }\n\n//     // Clear selected cell and edited value\n//     this.setState({ selectedCell: null, editedValue: '' });\n//   };\n\n//   handleCancel = () => {\n//     // Clear selected cell and edited value\n//     this.setState({ selectedCell: null, editedValue: '' });\n//   };\n\n//   render() {\n//     const { data } = this.props;\n//     const { editedValue, selectedCell } = this.state;\n\n//     const ids = Array.from({ length: 30 }, (_, i) => i + 1);\n//     const modelIds = ['model1', 'model2', 'model3', 'model4', 'model5'];\n\n//     return (\n//       <div className=\"overflow-x-auto\">\n//         <table className=\"table-auto border border-collapse border-gray-500\">\n//           <thead>\n//             <tr className=\"bg-gray-200\">\n//               <th className=\"border border-gray-500\"></th>\n//               {ids.map(id => (\n//                 <th key={id} className=\"border border-gray-500 px-4 py-2\">{id}</th>\n//               ))}\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {modelIds.map(modelId => (\n//               <tr key={modelId}>\n//                 <td className=\"border border-gray-500 px-4 py-2\">{modelId}</td>\n//                 {ids.map(id => {\n//                   const cellValue = data[modelId][id];\n//                   return (\n//                     <td\n//                       key={id}\n//                       className={`border border-gray-500 px-4 py-2 ${selectedCell && selectedCell.modelId === modelId && selectedCell.id === id ? 'bg-gray-200' : ''}`}\n//                       onClick={() => this.handleCellClick(modelId, id)}\n//                     >\n//                       {selectedCell && selectedCell.modelId === modelId && selectedCell.id === id ? (\n//                         <input\n//                           type=\"text\"\n//                           value={editedValue}\n//                           onChange={this.handleValueChange}\n//                           autoFocus\n//                         />\n//                       ) : (\n//                         cellValue\n//                       )}\n//                     </td>\n//                   );\n//                 })}\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//         {selectedCell && (\n//           <div>\n//             <button onClick={this.handleSave}>Save</button>\n//             <button onClick={this.handleCancel}>Cancel</button>\n//           </div>\n//         )}\n//       </div>\n//     );\n//   }\n// }\n\n// export default Table;\n\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Table = ({\n  modelIds\n}) => {\n  _s();\n  const [editingCell, setEditingCell] = useState(null);\n  const [cellValues, setCellValues] = useState({});\n\n  // Function to handle cell click\n  const handleCellClick = (rowId, colId) => {\n    setEditingCell({\n      rowId,\n      colId\n    });\n    // Initialize cell value if not present\n    setCellValues(prevState => ({\n      ...prevState,\n      [`${rowId}-${colId}`]: prevState[`${rowId}-${colId}`] || \"\"\n    }));\n  };\n\n  // Function to handle input change\n  const handleInputChange = e => {\n    const {\n      rowId,\n      colId\n    } = editingCell;\n    const value = e.target.value;\n    setCellValues(prevState => ({\n      ...prevState,\n      [`${rowId}-${colId}`]: value\n    }));\n  };\n\n  // Function to handle input blur\n  const handleInputBlur = () => {\n    setEditingCell(null);\n  };\n  const handleCancel = () => {\n    setEditingCell(null); // Clear editingCell state\n    setCellValues({}); // Clear cellValues state\n  };\n\n  // Function to handle saving edited cell values\n  const handleSave = async e => {\n    e.preventDefault();\n    if (editingCell) {\n      const {\n        rowId,\n        colId\n      } = editingCell;\n      const value = cellValues[`${rowId}-${colId}`];\n      try {\n        const response = await fetch(`http://localhost:8082/update`, {\n          method: \"PUT\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            productionValue: value,\n            id: rowId,\n            modelId: modelIds[colId]\n          })\n        });\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        console.log(\"Data updated successfully\");\n        setEditingCell(null);\n      } catch (error) {\n        console.error(\"Error updating data:\", error);\n      }\n    } else {\n      console.error(\"Editing cell is null\");\n    }\n  };\n\n  // Fetch data from backend when the component mounts\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  // Function to fetch data from backend\n  const fetchData = async () => {\n    try {\n      const response = await fetch(\"http://localhost:8082/data\");\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch data\");\n      }\n      const jsonData = await response.json();\n      // Update cellValues state with fetched data\n      // Assuming data is in the format { rowId-colId: value }\n      setCellValues(jsonData.data.reduce((acc, row) => {\n        Object.entries(row).forEach(([key, value]) => {\n          if (key !== \"Id\") {\n            acc[key] = value;\n          }\n        });\n        return acc;\n      }, {}));\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n    }\n  };\n\n  // Generate IDs 1 to 30\n  const ids = Array.from({\n    length: 30\n  }, (_, i) => i + 1);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"overflow-x-auto\",\n    children: [/*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"table-auto border border-collapse border-gray-500\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          className: \"bg-gray-200\",\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            className: \"border border-gray-500\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 13\n          }, this), ids.map(id => /*#__PURE__*/_jsxDEV(\"th\", {\n            className: \"border border-gray-500 px-4 py-2\",\n            children: id\n          }, id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 268,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: modelIds.map((modelId, rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"border border-gray-500 px-4 py-2\",\n            children: modelId\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 278,\n            columnNumber: 15\n          }, this), ids.map((id, colIndex) => {\n            const cellKey = `${rowIndex}-${colIndex}`;\n            return /*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"border border-gray-500 px-4 py-2\",\n              onClick: () => handleCellClick(rowIndex, colIndex),\n              children: editingCell && editingCell.rowId === rowIndex && editingCell.colId === colIndex ? /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                value: cellValues[cellKey],\n                onChange: handleInputChange,\n                onBlur: handleInputBlur\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 291,\n                columnNumber: 23\n              }, this) : cellValues[cellKey]\n            }, id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 282,\n              columnNumber: 19\n            }, this);\n          })]\n        }, modelId, true, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSave,\n      className: \"py-0 mx-12 border my-7 justify-items-center  border-gray-500 px-6   \",\n      children: \"Save\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleCancel,\n      className: \"py-0  border  my-7 justify-items-center border-gray-500 px-6 \",\n      children: \"Cancel\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 261,\n    columnNumber: 5\n  }, this);\n};\n_s(Table, \"c0fupBJRtyRTjJvDRyy9bOkIkHs=\");\n_c = Table;\nexport default Table;\nvar _c;\n$RefreshReg$(_c, \"Table\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Table","modelIds","_s","editingCell","setEditingCell","cellValues","setCellValues","handleCellClick","rowId","colId","prevState","handleInputChange","e","value","target","handleInputBlur","handleCancel","handleSave","preventDefault","response","fetch","method","headers","body","JSON","stringify","productionValue","id","modelId","ok","Error","status","console","log","error","fetchData","jsonData","json","data","reduce","acc","row","Object","entries","forEach","key","ids","Array","from","length","_","i","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","rowIndex","colIndex","cellKey","onClick","type","onChange","onBlur","_c","$RefreshReg$"],"sources":["D:/ModelProject/frontend/src/Components/Table.js"],"sourcesContent":["// import React from 'react';\r\n\r\n// class Table extends React.Component {\r\n//   render() {\r\n//     // Generate IDs 1 to 30\r\n//     const ids = Array.from({ length: 30 }, (_, i) => i + 1);\r\n//     // Sample ModelIds\r\n//     const modelIds = ['model1', 'model2', 'model3', 'model4', 'model5'];\r\n\r\n//     return (\r\n//       <div className=\"overflow-x-auto\">\r\n//         <table className=\"table-auto border border-collapse border-gray-500\">\r\n//           <thead>\r\n//             <tr className=\"bg-gray-200\">\r\n//               <th className=\"border border-gray-500\"></th>\r\n//               {/* Render IDs horizontally */}\r\n//               {ids.map(id => (\r\n//                 <th key={id} className=\"border border-gray-500 px-4 py-2\">{id}</th>\r\n//               ))}\r\n//             </tr>\r\n//           </thead>\r\n//           <tbody>\r\n//             {/* Render ModelIds vertically */}\r\n//             {modelIds.map(modelId => (\r\n//               <tr key={modelId}>\r\n//                 <td className=\"border border-gray-500 px-4 py-2\">{modelId}</td>\r\n\r\n//                 {ids.map(id => (\r\n//                   <td key={id} className=\"border border-gray-500 px-4 py-2\"></td>\r\n//                 ))}\r\n//               </tr>\r\n//             ))}\r\n//           </tbody>\r\n//         </table>\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// export default Table;\r\n\r\n// import React from 'react';\r\n\r\n// class Table extends React.Component {\r\n//   constructor(props) {\r\n//     super(props);\r\n//     this.state = {\r\n//       editedValue: '', // State to track edited value\r\n//       selectedCell: null // State to track selected cell\r\n//     };\r\n//   }\r\n\r\n//   handleCellClick = (modelId, id) => {\r\n//     this.setState({\r\n//       selectedCell: { modelId, id }, // Set the selected cell\r\n//       editedValue: this.props.data[modelId][id] || '' // Set the edited value from props or empty string\r\n//     });\r\n//   };\r\n\r\n//   handleValueChange = (event) => {\r\n//     this.setState({ editedValue: event.target.value });\r\n//   };\r\n\r\n//   handleSave = async () => {\r\n//     const { selectedCell, editedValue } = this.state;\r\n//     const { modelId, id } = selectedCell;\r\n\r\n//     try {\r\n//       const response = await fetch(`http://localhost:8081/update/${id}/${modelId}`, {\r\n//         method: \"PUT\",\r\n//         headers: {\r\n//           \"Content-Type\": \"application/json\",\r\n//         },\r\n//         body: JSON.stringify({ productionValue: editedValue }),\r\n//       });\r\n\r\n//       if (!response.ok) {\r\n//         throw new Error(`HTTP error! Status: ${response.status}`);\r\n//       }\r\n\r\n//       console.log('Data saved successfully');\r\n//       // Refresh data after saving\r\n//       this.props.refreshData();\r\n//     } catch (error) {\r\n//       console.error('Error saving data:', error);\r\n//     }\r\n\r\n//     // Clear selected cell and edited value\r\n//     this.setState({ selectedCell: null, editedValue: '' });\r\n//   };\r\n\r\n//   handleCancel = () => {\r\n//     // Clear selected cell and edited value\r\n//     this.setState({ selectedCell: null, editedValue: '' });\r\n//   };\r\n\r\n//   render() {\r\n//     const { data } = this.props;\r\n//     const { editedValue, selectedCell } = this.state;\r\n\r\n//     const ids = Array.from({ length: 30 }, (_, i) => i + 1);\r\n//     const modelIds = ['model1', 'model2', 'model3', 'model4', 'model5'];\r\n\r\n//     return (\r\n//       <div className=\"overflow-x-auto\">\r\n//         <table className=\"table-auto border border-collapse border-gray-500\">\r\n//           <thead>\r\n//             <tr className=\"bg-gray-200\">\r\n//               <th className=\"border border-gray-500\"></th>\r\n//               {ids.map(id => (\r\n//                 <th key={id} className=\"border border-gray-500 px-4 py-2\">{id}</th>\r\n//               ))}\r\n//             </tr>\r\n//           </thead>\r\n//           <tbody>\r\n//             {modelIds.map(modelId => (\r\n//               <tr key={modelId}>\r\n//                 <td className=\"border border-gray-500 px-4 py-2\">{modelId}</td>\r\n//                 {ids.map(id => {\r\n//                   const cellValue = data[modelId][id];\r\n//                   return (\r\n//                     <td\r\n//                       key={id}\r\n//                       className={`border border-gray-500 px-4 py-2 ${selectedCell && selectedCell.modelId === modelId && selectedCell.id === id ? 'bg-gray-200' : ''}`}\r\n//                       onClick={() => this.handleCellClick(modelId, id)}\r\n//                     >\r\n//                       {selectedCell && selectedCell.modelId === modelId && selectedCell.id === id ? (\r\n//                         <input\r\n//                           type=\"text\"\r\n//                           value={editedValue}\r\n//                           onChange={this.handleValueChange}\r\n//                           autoFocus\r\n//                         />\r\n//                       ) : (\r\n//                         cellValue\r\n//                       )}\r\n//                     </td>\r\n//                   );\r\n//                 })}\r\n//               </tr>\r\n//             ))}\r\n//           </tbody>\r\n//         </table>\r\n//         {selectedCell && (\r\n//           <div>\r\n//             <button onClick={this.handleSave}>Save</button>\r\n//             <button onClick={this.handleCancel}>Cancel</button>\r\n//           </div>\r\n//         )}\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// export default Table;\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\n\r\nconst Table = ({ modelIds }) => {\r\n  const [editingCell, setEditingCell] = useState(null);\r\n  const [cellValues, setCellValues] = useState({});\r\n\r\n  // Function to handle cell click\r\n  const handleCellClick = (rowId, colId) => {\r\n    setEditingCell({ rowId, colId });\r\n    // Initialize cell value if not present\r\n    setCellValues((prevState) => ({\r\n      ...prevState,\r\n      [`${rowId}-${colId}`]: prevState[`${rowId}-${colId}`] || \"\",\r\n    }));\r\n  };\r\n\r\n  // Function to handle input change\r\n  const handleInputChange = (e) => {\r\n    const { rowId, colId } = editingCell;\r\n    const value = e.target.value;\r\n    setCellValues((prevState) => ({\r\n      ...prevState,\r\n      [`${rowId}-${colId}`]: value,\r\n    }));\r\n  };\r\n\r\n  // Function to handle input blur\r\n  const handleInputBlur = () => {\r\n    setEditingCell(null);\r\n  };\r\n  const handleCancel = () => {\r\n    setEditingCell(null); // Clear editingCell state\r\n    setCellValues({}); // Clear cellValues state\r\n  };\r\n\r\n  // Function to handle saving edited cell values\r\n  const handleSave = async (e) => {\r\n    e.preventDefault();\r\n    if (editingCell) {\r\n      const { rowId, colId } = editingCell;\r\n      const value = cellValues[`${rowId}-${colId}`];\r\n\r\n      try {\r\n        \r\n        const response = await fetch(`http://localhost:8082/update`, {\r\n          method: \"PUT\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({\r\n            productionValue: value,\r\n            id: rowId,\r\n            modelId: modelIds[colId],\r\n          }),\r\n        });\r\n\r\n        if (!response.ok) {\r\n          throw new Error(`HTTP error! Status: ${response.status}`);\r\n        }\r\n\r\n        console.log(\"Data updated successfully\");\r\n        setEditingCell(null);\r\n      } catch (error) {\r\n        console.error(\"Error updating data:\", error);\r\n      }\r\n    } else {\r\n      console.error(\"Editing cell is null\");\r\n    }\r\n  };\r\n\r\n  // Fetch data from backend when the component mounts\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  // Function to fetch data from backend\r\n  const fetchData = async () => {\r\n    try {\r\n      const response = await fetch(\"http://localhost:8082/data\");\r\n      if (!response.ok) {\r\n        throw new Error(\"Failed to fetch data\");\r\n      }\r\n      const jsonData = await response.json();\r\n      // Update cellValues state with fetched data\r\n      // Assuming data is in the format { rowId-colId: value }\r\n      setCellValues(\r\n        jsonData.data.reduce((acc, row) => {\r\n          Object.entries(row).forEach(([key, value]) => {\r\n            if (key !== \"Id\") {\r\n              acc[key] = value;\r\n            }\r\n          });\r\n          return acc;\r\n        }, {})\r\n      );\r\n    } catch (error) {\r\n      console.error(\"Error fetching data:\", error);\r\n    }\r\n  };\r\n\r\n  // Generate IDs 1 to 30\r\n  const ids = Array.from({ length: 30 }, (_, i) => i + 1);\r\n\r\n  return (\r\n    <div className=\"overflow-x-auto\">\r\n      <table className=\"table-auto border border-collapse border-gray-500\">\r\n        <thead>\r\n          <tr className=\"bg-gray-200\">\r\n            <th className=\"border border-gray-500\"></th>\r\n            {/* Render IDs horizontally */}\r\n            {ids.map((id) => (\r\n              <th key={id} className=\"border border-gray-500 px-4 py-2\">\r\n                {id}\r\n              </th>\r\n            ))}\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {/* Render ModelIds vertically */}\r\n          {modelIds.map((modelId, rowIndex) => (\r\n            <tr key={modelId}>\r\n              <td className=\"border border-gray-500 px-4 py-2\">{modelId}</td>\r\n              {ids.map((id, colIndex) => {\r\n                const cellKey = `${rowIndex}-${colIndex}`;\r\n                return (\r\n                  <td\r\n                    key={id}\r\n                    className=\"border border-gray-500 px-4 py-2\"\r\n                    onClick={() => handleCellClick(rowIndex, colIndex)}\r\n                  >\r\n                    {/* Conditionally render input field */}\r\n                    {editingCell &&\r\n                    editingCell.rowId === rowIndex &&\r\n                    editingCell.colId === colIndex ? (\r\n                      <input\r\n                        type=\"text\"\r\n                        value={cellValues[cellKey]}\r\n                        onChange={handleInputChange}\r\n                        onBlur={handleInputBlur}\r\n                      />\r\n                    ) : (\r\n                      cellValues[cellKey]\r\n                    )}\r\n                  </td>\r\n                );\r\n              })}\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n      {/* Save button */}\r\n      <button\r\n        onClick={handleSave}\r\n        className=\"py-0 mx-12 border my-7 justify-items-center  border-gray-500 px-6   \"\r\n      >\r\n        Save\r\n      </button>\r\n      <button\r\n        onClick={handleCancel}\r\n        className=\"py-0  border  my-7 justify-items-center border-gray-500 px-6 \"\r\n      >\r\n        Cancel\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Table;\r\n"],"mappings":";;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,KAAK,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC9B,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACS,UAAU,EAAEC,aAAa,CAAC,GAAGV,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAEhD;EACA,MAAMW,eAAe,GAAGA,CAACC,KAAK,EAAEC,KAAK,KAAK;IACxCL,cAAc,CAAC;MAAEI,KAAK;MAAEC;IAAM,CAAC,CAAC;IAChC;IACAH,aAAa,CAAEI,SAAS,KAAM;MAC5B,GAAGA,SAAS;MACZ,CAAE,GAAEF,KAAM,IAAGC,KAAM,EAAC,GAAGC,SAAS,CAAE,GAAEF,KAAM,IAAGC,KAAM,EAAC,CAAC,IAAI;IAC3D,CAAC,CAAC,CAAC;EACL,CAAC;;EAED;EACA,MAAME,iBAAiB,GAAIC,CAAC,IAAK;IAC/B,MAAM;MAAEJ,KAAK;MAAEC;IAAM,CAAC,GAAGN,WAAW;IACpC,MAAMU,KAAK,GAAGD,CAAC,CAACE,MAAM,CAACD,KAAK;IAC5BP,aAAa,CAAEI,SAAS,KAAM;MAC5B,GAAGA,SAAS;MACZ,CAAE,GAAEF,KAAM,IAAGC,KAAM,EAAC,GAAGI;IACzB,CAAC,CAAC,CAAC;EACL,CAAC;;EAED;EACA,MAAME,eAAe,GAAGA,CAAA,KAAM;IAC5BX,cAAc,CAAC,IAAI,CAAC;EACtB,CAAC;EACD,MAAMY,YAAY,GAAGA,CAAA,KAAM;IACzBZ,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC;IACtBE,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACrB,CAAC;;EAED;EACA,MAAMW,UAAU,GAAG,MAAOL,CAAC,IAAK;IAC9BA,CAAC,CAACM,cAAc,CAAC,CAAC;IAClB,IAAIf,WAAW,EAAE;MACf,MAAM;QAAEK,KAAK;QAAEC;MAAM,CAAC,GAAGN,WAAW;MACpC,MAAMU,KAAK,GAAGR,UAAU,CAAE,GAAEG,KAAM,IAAGC,KAAM,EAAC,CAAC;MAE7C,IAAI;QAEF,MAAMU,QAAQ,GAAG,MAAMC,KAAK,CAAE,8BAA6B,EAAE;UAC3DC,MAAM,EAAE,KAAK;UACbC,OAAO,EAAE;YACP,cAAc,EAAE;UAClB,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YACnBC,eAAe,EAAEb,KAAK;YACtBc,EAAE,EAAEnB,KAAK;YACToB,OAAO,EAAE3B,QAAQ,CAACQ,KAAK;UACzB,CAAC;QACH,CAAC,CAAC;QAEF,IAAI,CAACU,QAAQ,CAACU,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAE,uBAAsBX,QAAQ,CAACY,MAAO,EAAC,CAAC;QAC3D;QAEAC,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;QACxC7B,cAAc,CAAC,IAAI,CAAC;MACtB,CAAC,CAAC,OAAO8B,KAAK,EAAE;QACdF,OAAO,CAACE,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C;IACF,CAAC,MAAM;MACLF,OAAO,CAACE,KAAK,CAAC,sBAAsB,CAAC;IACvC;EACF,CAAC;;EAED;EACArC,SAAS,CAAC,MAAM;IACdsC,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMA,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC5B,IAAI;MACF,MAAMhB,QAAQ,GAAG,MAAMC,KAAK,CAAC,4BAA4B,CAAC;MAC1D,IAAI,CAACD,QAAQ,CAACU,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,sBAAsB,CAAC;MACzC;MACA,MAAMM,QAAQ,GAAG,MAAMjB,QAAQ,CAACkB,IAAI,CAAC,CAAC;MACtC;MACA;MACA/B,aAAa,CACX8B,QAAQ,CAACE,IAAI,CAACC,MAAM,CAAC,CAACC,GAAG,EAAEC,GAAG,KAAK;QACjCC,MAAM,CAACC,OAAO,CAACF,GAAG,CAAC,CAACG,OAAO,CAAC,CAAC,CAACC,GAAG,EAAEhC,KAAK,CAAC,KAAK;UAC5C,IAAIgC,GAAG,KAAK,IAAI,EAAE;YAChBL,GAAG,CAACK,GAAG,CAAC,GAAGhC,KAAK;UAClB;QACF,CAAC,CAAC;QACF,OAAO2B,GAAG;MACZ,CAAC,EAAE,CAAC,CAAC,CACP,CAAC;IACH,CAAC,CAAC,OAAON,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C;EACF,CAAC;;EAED;EACA,MAAMY,GAAG,GAAGC,KAAK,CAACC,IAAI,CAAC;IAAEC,MAAM,EAAE;EAAG,CAAC,EAAE,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,GAAG,CAAC,CAAC;EAEvD,oBACEpD,OAAA;IAAKqD,SAAS,EAAC,iBAAiB;IAAAC,QAAA,gBAC9BtD,OAAA;MAAOqD,SAAS,EAAC,mDAAmD;MAAAC,QAAA,gBAClEtD,OAAA;QAAAsD,QAAA,eACEtD,OAAA;UAAIqD,SAAS,EAAC,aAAa;UAAAC,QAAA,gBACzBtD,OAAA;YAAIqD,SAAS,EAAC;UAAwB;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,EAE3CX,GAAG,CAACY,GAAG,CAAE/B,EAAE,iBACV5B,OAAA;YAAaqD,SAAS,EAAC,kCAAkC;YAAAC,QAAA,EACtD1B;UAAE,GADIA,EAAE;YAAA2B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAEP,CACL,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACA;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC,eACR1D,OAAA;QAAAsD,QAAA,EAEGpD,QAAQ,CAACyD,GAAG,CAAC,CAAC9B,OAAO,EAAE+B,QAAQ,kBAC9B5D,OAAA;UAAAsD,QAAA,gBACEtD,OAAA;YAAIqD,SAAS,EAAC,kCAAkC;YAAAC,QAAA,EAAEzB;UAAO;YAAA0B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,EAC9DX,GAAG,CAACY,GAAG,CAAC,CAAC/B,EAAE,EAAEiC,QAAQ,KAAK;YACzB,MAAMC,OAAO,GAAI,GAAEF,QAAS,IAAGC,QAAS,EAAC;YACzC,oBACE7D,OAAA;cAEEqD,SAAS,EAAC,kCAAkC;cAC5CU,OAAO,EAAEA,CAAA,KAAMvD,eAAe,CAACoD,QAAQ,EAAEC,QAAQ,CAAE;cAAAP,QAAA,EAGlDlD,WAAW,IACZA,WAAW,CAACK,KAAK,KAAKmD,QAAQ,IAC9BxD,WAAW,CAACM,KAAK,KAAKmD,QAAQ,gBAC5B7D,OAAA;gBACEgE,IAAI,EAAC,MAAM;gBACXlD,KAAK,EAAER,UAAU,CAACwD,OAAO,CAAE;gBAC3BG,QAAQ,EAAErD,iBAAkB;gBAC5BsD,MAAM,EAAElD;cAAgB;gBAAAuC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACzB,CAAC,GAEFpD,UAAU,CAACwD,OAAO;YACnB,GAhBIlC,EAAE;cAAA2B,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAiBL,CAAC;UAET,CAAC,CAAC;QAAA,GAzBK7B,OAAO;UAAA0B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OA0BZ,CACL;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eAER1D,OAAA;MACE+D,OAAO,EAAE7C,UAAW;MACpBmC,SAAS,EAAC,sEAAsE;MAAAC,QAAA,EACjF;IAED;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACT1D,OAAA;MACE+D,OAAO,EAAE9C,YAAa;MACtBoC,SAAS,EAAC,+DAA+D;MAAAC,QAAA,EAC1E;IAED;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV,CAAC;AAACvD,EAAA,CAnKIF,KAAK;AAAAkE,EAAA,GAALlE,KAAK;AAqKX,eAAeA,KAAK;AAAC,IAAAkE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}