{"ast":null,"code":"var _jsxFileName = \"D:\\\\projectmodel\\\\frontend\\\\src\\\\Components\\\\Table.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n\n// const Table = ({ modelIds }) => {\n//   const [editingCell, setEditingCell] = useState(null);\n//   const [cellValues, setCellValues] = useState({});\n//   const[data,setData]=useState([])\n//   // Function to handle cell click\n//   const handleCellClick = (rowId, colId) => {\n//     console.log(\"Clicked cell:\", rowId, colId);\n//     setEditingCell({ rowId, colId });\n//     // Initialize cell value if not present\n//     setCellValues((prevState) => ({\n//       ...prevState,\n//       [`${rowId}-${colId}`]: prevState[`${rowId}-${colId}`] || \"\",\n//     }));\n//   };\n\n//   // Function to handle input change\n//   const handleInputChange = (e) => {\n\n//     if (editingCell) {\n//       const { rowId, colId } = editingCell;\n//       const value = e.target.value;\n//       setCellValues((prevState) => ({\n//         ...prevState,\n//         [`${rowId}-${colId}`]: value,\n//       }));\n//     }\n//   };\n\n//   // Function to handle input blur\n//   const handleInputBlur = () => {\n//     setEditingCell(null);\n//   };\n//   const handleCancel = () => {\n//     setEditingCell(null); // Clear editingCell state\n//     setCellValues({}); // Clear cellValues state\n//   };\n\n//   // Function to handle saving edited cell values\n//   const handleSave = async (e) => {\n//      e.preventDefault();\n//     console.log(\"Current editingCell:\", editingCell);\n//     if (editingCell) {\n//       const { rowId, colId } = editingCell;\n//       console.log(\"rowId:\", rowId); // Log the value of rowId\n//     console.log(\"colId:\", colId); // Log the value of colId\n//     console.log(\"modelId:\", modelIds[rowId]); // Log the value of modelId\n//     console.log(\"Id:\", ids[colId]); // Log the value of Id\n//      const  value = cellValues[`${rowId}-${colId}`];\n\n//     try {\n\n//         // Make the update request\n//         const response = await fetch(`http://localhost:8082/update`, {\n//           method: \"PUT\",\n//           headers: {\n//             \"Content-Type\": \"application/json\",\n//           },\n//           body: JSON.stringify({\n//             productionValue: value,\n//             id: rowId,\n//             modelId: modelIds[colId],\n//           }),\n//         });\n\n//         // Check if the response is successful\n//         if (!response.ok) {\n//           throw new Error(`HTTP error! Status: ${response.status}`);\n//         }\n//         const newData = [...data];\n//         newData[rowId][colId] = value;\n//         setData(newData);\n\n//         // Update the state if the response is successful\n//         setEditingCell(null);\n//         console.log(\"Data updated successfully\");\n//       } catch (error) {\n//         console.error(\"Error updating data:\", error);\n//       }\n//     } else {\n//       console.error(\"Editing cell is null\");\n\n//   };\n//     }\n//     useEffect(() => {\n//       // API call to fetch data from backend\n//       fetch('http://localhost:8082/data')\n//         .then(response => response.json())\n//         .then(result => {\n//           console.log(\"Received data:\", result.data); // Log the received data\n//           // Check if data is an array before calling map\n//           if (Array.isArray(result.data)) {\n//             // Transform data into the desired format\n//             const transformedData = result.data.map(item => ({\n//               modelId: item.ModelID,\n//               date: item.date\n//               // Add other properties you need\n//             }));\n\n//             // Update state with transformed data\n//             setData(transformedData);\n//           } else {\n//             console.error(\"Received data is not an array:\", result.data);\n//           }\n//         })\n//         .catch(error => console.error('Error fetching model data:', error));\n//     }, []);\n\n//   // Generate IDs 1 to 30\n//   const ids = Array.from({ length: 30 }, (_, i) => i + 1);\n\n//   return (\n//     <div className=\"overflow-x-auto\">\n//       <table className=\"table-auto border border-collapse border-gray-500\">\n//         <thead>\n//         <tr className=\"bg-gray-200\">\n//       <th colSpan=\"40\" className=\"text-center\">\n//         <span className=\"mx-8\">Monthly data for April</span>\n//       </th>\n//     </tr>\n//           <tr className=\"bg-gray-200\">\n\n//             <th className=\"border border-gray-500\"></th>\n//             {/* Render IDs horizontally */}\n//             {ids.map((date) => (\n//               <th key={date} className=\"border border-gray-500 px-4 py-2\">\n//                 {date}\n//               </th>\n//             ))}\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {/* Render ModelIds vertically */}\n//           {modelIds.map((modelId, rowIndex) => (\n//             <tr key={modelId}>\n//               <td className=\"border border-gray-500 px-4 py-2\">{modelId}</td>\n//               {ids.map((id, colIndex) => {\n//                 const cellKey = `${rowIndex}-${colIndex}`;\n//                 const productionValue = data.find(item => item.modelId === modelId && item.date === id)?.productionValue || \"\";\n\n//                 return (\n//                   <td\n//                     key={id}\n//                     className=\"border border-gray-500 px-4 py-2\"\n//                     onClick={() => handleCellClick(rowIndex, colIndex)}\n//                   >\n//                     {/* Conditionally render input field */}\n//                     {editingCell &&\n//                     editingCell.rowId === rowIndex &&\n//                     editingCell.colId === colIndex ? (\n//                       <input\n//                         type=\"text\"\n//                         value={cellValues[cellKey]}\n//                         onChange={handleInputChange}\n//                         onBlur={handleInputBlur}\n//                       />\n//                     ) : (\n//                       productionValue\n//                     )}\n//                   </td>\n//                 );\n//               })}\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//       {/* Save button */}\n//       <div className=\"flex justify-center my-10 \">\n//       <button\n//         onClick={handleSave}\n//         className=\"py-0 mx-4 border   border-gray-500 px-6   \"\n//       >\n//         Save\n//       </button>\n//       <button\n//         onClick={handleCancel}\n//         className=\"py-0 mx-4 border  border-gray-500 px-6 \"\n//       >\n//         Cancel\n//       </button>\n//       </div>            \n//     </div>\n//   );\n// };\n\n// export default Table;\n\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Table = ({\n  modelIds\n}) => {\n  _s();\n  const [editingCell, setEditingCell] = useState({\n    rowId: null,\n    colId: null\n  });\n  const [cellValues, setCellValues] = useState({});\n  const [data, setData] = useState([]);\n  const handleCellClick = (rowId, colId) => {\n    console.log(\"Clicked cell:\", rowId, colId);\n    setEditingCell({\n      rowId,\n      colId\n    });\n    setCellValues(prevState => ({\n      ...prevState,\n      [`${rowId}-${colId}`]: prevState[`${rowId}-${colId}`] || \"\"\n    }));\n  };\n  const handleInputChange = e => {\n    const {\n      rowId,\n      colId\n    } = editingCell;\n    const value = e.target.value;\n    setCellValues(prevState => ({\n      ...prevState,\n      [`${rowId}-${colId}`]: value\n    }));\n  };\n  const handleInputBlur = () => {\n    setEditingCell({\n      rowId: null,\n      colId: null\n    });\n  };\n  const handleCancel = () => {\n    setEditingCell({\n      rowId: null,\n      colId: null\n    });\n    setCellValues({});\n  };\n  const handleSave = async e => {\n    e.preventDefault();\n    console.log(\"Current editingCell:\", editingCell);\n    if (editingCell && editingCell.rowId !== undefined && editingCell.colId !== undefined) {\n      const {\n        rowId,\n        colId\n      } = editingCell;\n      console.log(\"rowId:\", rowId); // Log the value of rowId\n      console.log(\"colId:\", colId); // Log the value of colId\n      console.log(\"modelId:\", modelIds[rowId]); // Log the value of modelId\n      console.log(\"Id:\", ids[colId]); // Log the value of Id\n\n      const value = cellValues[`${rowId}-${colId}`];\n      const date = `${new Date().getFullYear()}-04-${colId + 1}`; // Assuming the month is April\n\n      try {\n        const response = await fetch(`http://localhost:8082/update`, {\n          method: \"PUT\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            productionValue: value,\n            date: date,\n            id: days[colId],\n            modelId: modelIds[rowId]\n          })\n        });\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        const newData = [...data];\n        newData[rowId][colId] = value;\n        setData(newData);\n        setEditingCell({\n          rowId: null,\n          colId: null\n        });\n        console.log(\"Data updated successfully\");\n      } catch (error) {\n        console.error(\"Error updating data:\", error);\n      }\n    }\n    ;\n    const days = Array.from({\n      length: 30\n    }, (_, i) => i + 1); // Assuming there are 30 days in a month\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"overflow-x-auto\",\n      children: [/*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"table-auto border border-collapse border-gray-500\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n            className: \"bg-gray-200\",\n            children: /*#__PURE__*/_jsxDEV(\"th\", {\n              colSpan: days.length + 1,\n              className: \"text-center\",\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"mx-8\",\n                children: \"Monthly data for April\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 279,\n                columnNumber: 15\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 278,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 277,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n            className: \"bg-gray-200\",\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              className: \"border border-gray-500\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 283,\n              columnNumber: 13\n            }, this), days.map(day => /*#__PURE__*/_jsxDEV(\"th\", {\n              className: \"border border-gray-500 px-4 py-2\",\n              children: day\n            }, day, false, {\n              fileName: _jsxFileName,\n              lineNumber: 285,\n              columnNumber: 15\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 282,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: modelIds.map((modelId, rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"border border-gray-500 px-4 py-2\",\n              children: modelId\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 294,\n              columnNumber: 15\n            }, this), days.map((day, colIndex) => {\n              const cellKey = `${rowIndex}-${colIndex}`;\n              return /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"border border-gray-500 px-4 py-2\",\n                onClick: () => handleCellClick(rowIndex, colIndex),\n                children: editingCell.rowId === rowIndex && editingCell.colId === colIndex ? /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  value: cellValues[cellKey] || \"\",\n                  onChange: handleInputChange,\n                  onBlur: handleInputBlur\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 305,\n                  columnNumber: 23\n                }, this) : cellValues[cellKey] || \"\"\n              }, day, false, {\n                fileName: _jsxFileName,\n                lineNumber: 298,\n                columnNumber: 19\n              }, this);\n            })]\n          }, modelId, true, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 13\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex justify-center my-10 \",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSave,\n          className: \"py-0 mx-4 border   border-gray-500 px-6   \",\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 322,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleCancel,\n          className: \"py-0 mx-4 border  border-gray-500 px-6 \",\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 5\n    }, this);\n  };\n};\n_s(Table, \"1KxGARsz2ba7ObXv7mYFt9ThQ2k=\");\n_c = Table;\nexport default Table;\nvar _c;\n$RefreshReg$(_c, \"Table\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Table","modelIds","_s","editingCell","setEditingCell","rowId","colId","cellValues","setCellValues","data","setData","handleCellClick","console","log","prevState","handleInputChange","e","value","target","handleInputBlur","handleCancel","handleSave","preventDefault","undefined","ids","date","Date","getFullYear","response","fetch","method","headers","body","JSON","stringify","productionValue","id","days","modelId","ok","Error","status","newData","error","Array","from","length","_","i","className","children","colSpan","fileName","_jsxFileName","lineNumber","columnNumber","map","day","rowIndex","colIndex","cellKey","onClick","type","onChange","onBlur","_c","$RefreshReg$"],"sources":["D:/projectmodel/frontend/src/Components/Table.js"],"sourcesContent":[" \r\n// import React, { useState, useEffect } from \"react\";\r\n \r\n// const Table = ({ modelIds }) => {\r\n//   const [editingCell, setEditingCell] = useState(null);\r\n//   const [cellValues, setCellValues] = useState({});\r\n//   const[data,setData]=useState([])\r\n//   // Function to handle cell click\r\n//   const handleCellClick = (rowId, colId) => {\r\n//     console.log(\"Clicked cell:\", rowId, colId);\r\n//     setEditingCell({ rowId, colId });\r\n//     // Initialize cell value if not present\r\n//     setCellValues((prevState) => ({\r\n//       ...prevState,\r\n//       [`${rowId}-${colId}`]: prevState[`${rowId}-${colId}`] || \"\",\r\n//     }));\r\n//   };\r\n \r\n//   // Function to handle input change\r\n//   const handleInputChange = (e) => {\r\n   \r\n//     if (editingCell) {\r\n//       const { rowId, colId } = editingCell;\r\n//       const value = e.target.value;\r\n//       setCellValues((prevState) => ({\r\n//         ...prevState,\r\n//         [`${rowId}-${colId}`]: value,\r\n//       }));\r\n//     }\r\n//   };\r\n \r\n//   // Function to handle input blur\r\n//   const handleInputBlur = () => {\r\n//     setEditingCell(null);\r\n//   };\r\n//   const handleCancel = () => {\r\n//     setEditingCell(null); // Clear editingCell state\r\n//     setCellValues({}); // Clear cellValues state\r\n//   };\r\n \r\n//   // Function to handle saving edited cell values\r\n//   const handleSave = async (e) => {\r\n//      e.preventDefault();\r\n//     console.log(\"Current editingCell:\", editingCell);\r\n//     if (editingCell) {\r\n//       const { rowId, colId } = editingCell;\r\n//       console.log(\"rowId:\", rowId); // Log the value of rowId\r\n//     console.log(\"colId:\", colId); // Log the value of colId\r\n//     console.log(\"modelId:\", modelIds[rowId]); // Log the value of modelId\r\n//     console.log(\"Id:\", ids[colId]); // Log the value of Id\r\n//      const  value = cellValues[`${rowId}-${colId}`];\r\n   \r\n//     try {\r\n   \r\n     \r\n//         // Make the update request\r\n//         const response = await fetch(`http://localhost:8082/update`, {\r\n//           method: \"PUT\",\r\n//           headers: {\r\n//             \"Content-Type\": \"application/json\",\r\n//           },\r\n//           body: JSON.stringify({\r\n//             productionValue: value,\r\n//             id: rowId,\r\n//             modelId: modelIds[colId],\r\n//           }),\r\n//         });\r\n       \r\n \r\n//         // Check if the response is successful\r\n//         if (!response.ok) {\r\n//           throw new Error(`HTTP error! Status: ${response.status}`);\r\n//         }\r\n//         const newData = [...data];\r\n//         newData[rowId][colId] = value;\r\n//         setData(newData);\r\n \r\n//         // Update the state if the response is successful\r\n//         setEditingCell(null);\r\n//         console.log(\"Data updated successfully\");\r\n//       } catch (error) {\r\n//         console.error(\"Error updating data:\", error);\r\n//       }\r\n//     } else {\r\n//       console.error(\"Editing cell is null\");\r\n \r\n//   };\r\n//     }\r\n//     useEffect(() => {\r\n//       // API call to fetch data from backend\r\n//       fetch('http://localhost:8082/data')\r\n//         .then(response => response.json())\r\n//         .then(result => {\r\n//           console.log(\"Received data:\", result.data); // Log the received data\r\n//           // Check if data is an array before calling map\r\n//           if (Array.isArray(result.data)) {\r\n//             // Transform data into the desired format\r\n//             const transformedData = result.data.map(item => ({\r\n//               modelId: item.ModelID,\r\n//               date: item.date\r\n//               // Add other properties you need\r\n//             }));\r\n   \r\n//             // Update state with transformed data\r\n//             setData(transformedData);\r\n//           } else {\r\n//             console.error(\"Received data is not an array:\", result.data);\r\n//           }\r\n//         })\r\n//         .catch(error => console.error('Error fetching model data:', error));\r\n//     }, []);\r\n \r\n   \r\n \r\n \r\n//   // Generate IDs 1 to 30\r\n//   const ids = Array.from({ length: 30 }, (_, i) => i + 1);\r\n \r\n//   return (\r\n//     <div className=\"overflow-x-auto\">\r\n//       <table className=\"table-auto border border-collapse border-gray-500\">\r\n//         <thead>\r\n//         <tr className=\"bg-gray-200\">\r\n//       <th colSpan=\"40\" className=\"text-center\">\r\n//         <span className=\"mx-8\">Monthly data for April</span>\r\n//       </th>\r\n//     </tr>\r\n//           <tr className=\"bg-gray-200\">\r\n         \r\n//             <th className=\"border border-gray-500\"></th>\r\n//             {/* Render IDs horizontally */}\r\n//             {ids.map((date) => (\r\n//               <th key={date} className=\"border border-gray-500 px-4 py-2\">\r\n//                 {date}\r\n//               </th>\r\n//             ))}\r\n//           </tr>\r\n//         </thead>\r\n//         <tbody>\r\n//           {/* Render ModelIds vertically */}\r\n//           {modelIds.map((modelId, rowIndex) => (\r\n//             <tr key={modelId}>\r\n//               <td className=\"border border-gray-500 px-4 py-2\">{modelId}</td>\r\n//               {ids.map((id, colIndex) => {\r\n//                 const cellKey = `${rowIndex}-${colIndex}`;\r\n//                 const productionValue = data.find(item => item.modelId === modelId && item.date === id)?.productionValue || \"\";\r\n \r\n//                 return (\r\n//                   <td\r\n//                     key={id}\r\n//                     className=\"border border-gray-500 px-4 py-2\"\r\n//                     onClick={() => handleCellClick(rowIndex, colIndex)}\r\n//                   >\r\n//                     {/* Conditionally render input field */}\r\n//                     {editingCell &&\r\n//                     editingCell.rowId === rowIndex &&\r\n//                     editingCell.colId === colIndex ? (\r\n//                       <input\r\n//                         type=\"text\"\r\n//                         value={cellValues[cellKey]}\r\n//                         onChange={handleInputChange}\r\n//                         onBlur={handleInputBlur}\r\n//                       />\r\n//                     ) : (\r\n//                       productionValue\r\n//                     )}\r\n//                   </td>\r\n//                 );\r\n//               })}\r\n//             </tr>\r\n//           ))}\r\n//         </tbody>\r\n//       </table>\r\n//       {/* Save button */}\r\n//       <div className=\"flex justify-center my-10 \">\r\n//       <button\r\n//         onClick={handleSave}\r\n//         className=\"py-0 mx-4 border   border-gray-500 px-6   \"\r\n//       >\r\n//         Save\r\n//       </button>\r\n//       <button\r\n//         onClick={handleCancel}\r\n//         className=\"py-0 mx-4 border  border-gray-500 px-6 \"\r\n//       >\r\n//         Cancel\r\n//       </button>\r\n//       </div>            \r\n//     </div>\r\n//   );\r\n// };\r\n \r\n// export default Table;\r\n \r\nimport React, { useState } from \"react\";\r\n\r\nconst Table = ({ modelIds }) => {\r\n  const [editingCell, setEditingCell] = useState({ rowId: null, colId: null });\r\n  const [cellValues, setCellValues] = useState({});\r\n  const [data, setData] = useState([]);\r\n\r\n  const handleCellClick = (rowId, colId) => {\r\n    console.log(\"Clicked cell:\", rowId, colId);\r\n    setEditingCell({ rowId, colId });\r\n    setCellValues((prevState) => ({\r\n      ...prevState,\r\n      [`${rowId}-${colId}`]: prevState[`${rowId}-${colId}`] || \"\",\r\n    }));\r\n  };\r\n\r\n  const handleInputChange = (e) => {\r\n    const { rowId, colId } = editingCell;\r\n    const value = e.target.value;\r\n    setCellValues((prevState) => ({\r\n      ...prevState,\r\n      [`${rowId}-${colId}`]: value,\r\n    }));\r\n  };\r\n\r\n  const handleInputBlur = () => {\r\n    setEditingCell({ rowId: null, colId: null });\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setEditingCell({ rowId: null, colId: null });\r\n    setCellValues({});\r\n  };\r\n\r\n  const handleSave = async (e) => {\r\n    e.preventDefault();\r\n    console.log(\"Current editingCell:\", editingCell);\r\n    if (editingCell && editingCell.rowId !== undefined && editingCell.colId !== undefined) {\r\n      const { rowId, colId } = editingCell;\r\n      console.log(\"rowId:\", rowId); // Log the value of rowId\r\n      console.log(\"colId:\", colId); // Log the value of colId\r\n      console.log(\"modelId:\", modelIds[rowId]); // Log the value of modelId\r\n      console.log(\"Id:\", ids[colId]); // Log the value of Id\r\n   \r\n    const value = cellValues[`${rowId}-${colId}`];\r\n    const date = `${new Date().getFullYear()}-04-${colId + 1}`; // Assuming the month is April\r\n\r\n    try {\r\n      const response = await fetch(`http://localhost:8082/update`, {\r\n        method: \"PUT\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          productionValue: value,\r\n          date: date,\r\n          id: days[colId],\r\n          modelId: modelIds[rowId],\r\n        }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! Status: ${response.status}`);\r\n      }\r\n\r\n      const newData = [...data];\r\n      newData[rowId][colId] = value;\r\n      setData(newData);\r\n\r\n      setEditingCell({ rowId: null, colId: null });\r\n      console.log(\"Data updated successfully\");\r\n    } catch (error) {\r\n      console.error(\"Error updating data:\", error);\r\n    }\r\n  };\r\n\r\n  const days = Array.from({ length: 30 }, (_, i) => i + 1); // Assuming there are 30 days in a month\r\n\r\n  return (\r\n    <div className=\"overflow-x-auto\">\r\n      <table className=\"table-auto border border-collapse border-gray-500\">\r\n        <thead>\r\n          <tr className=\"bg-gray-200\">\r\n            <th colSpan={days.length + 1} className=\"text-center\">\r\n              <span className=\"mx-8\">Monthly data for April</span>\r\n            </th>\r\n          </tr>\r\n          <tr className=\"bg-gray-200\">\r\n            <th className=\"border border-gray-500\"></th>\r\n            {days.map((day) => (\r\n              <th key={day} className=\"border border-gray-500 px-4 py-2\">\r\n                {day}\r\n              </th>\r\n            ))}\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {modelIds.map((modelId, rowIndex) => (\r\n            <tr key={modelId}>\r\n              <td className=\"border border-gray-500 px-4 py-2\">{modelId}</td>\r\n              {days.map((day, colIndex) => {\r\n                const cellKey = `${rowIndex}-${colIndex}`;\r\n                return (\r\n                  <td\r\n                    key={day}\r\n                    className=\"border border-gray-500 px-4 py-2\"\r\n                    onClick={() => handleCellClick(rowIndex, colIndex)}\r\n                  >\r\n                    {editingCell.rowId === rowIndex &&\r\n                    editingCell.colId === colIndex ? (\r\n                      <input\r\n                        type=\"text\"\r\n                        value={cellValues[cellKey] || \"\"}\r\n                        onChange={handleInputChange}\r\n                        onBlur={handleInputBlur}\r\n                      />\r\n                    ) : (\r\n                      cellValues[cellKey] || \"\"\r\n                    )}\r\n                  </td>\r\n                );\r\n              })}\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n      <div className=\"flex justify-center my-10 \">\r\n        <button\r\n          onClick={handleSave}\r\n          className=\"py-0 mx-4 border   border-gray-500 px-6   \"\r\n        >\r\n          Save\r\n        </button>\r\n        <button\r\n          onClick={handleCancel}\r\n          className=\"py-0 mx-4 border  border-gray-500 px-6 \"\r\n        >\r\n          Cancel\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n}\r\n\r\nexport default Table;\r\n"],"mappings":";;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,KAAK,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC9B,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGP,QAAQ,CAAC;IAAEQ,KAAK,EAAE,IAAI;IAAEC,KAAK,EAAE;EAAK,CAAC,CAAC;EAC5E,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGX,QAAQ,CAAC,CAAC,CAAC,CAAC;EAChD,MAAM,CAACY,IAAI,EAAEC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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}