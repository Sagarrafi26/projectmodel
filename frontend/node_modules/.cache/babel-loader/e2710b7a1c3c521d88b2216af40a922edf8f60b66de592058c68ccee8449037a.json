{"ast":null,"code":"var _jsxFileName = \"D:\\\\projectmodel\\\\frontend\\\\src\\\\Components\\\\Table.js\",\n  _s = $RefreshSig$();\n// import React from 'react';\n\n// class Table extends React.Component {\n//   render() {\n//     // Generate IDs 1 to 30\n//     const ids = Array.from({ length: 30 }, (_, i) => i + 1);\n//     // Sample ModelIds\n//     const modelIds = ['model1', 'model2', 'model3', 'model4', 'model5'];\n\n//     return (\n//       <div className=\"overflow-x-auto\">\n//         <table className=\"table-auto border border-collapse border-gray-500\">\n//           <thead>\n//             <tr className=\"bg-gray-200\">\n//               <th className=\"border border-gray-500\"></th>\n//               {/* Render IDs horizontally */}\n//               {ids.map(id => (\n//                 <th key={id} className=\"border border-gray-500 px-4 py-2\">{id}</th>\n//               ))}\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {/* Render ModelIds vertically */}\n//             {modelIds.map(modelId => (\n//               <tr key={modelId}>\n//                 <td className=\"border border-gray-500 px-4 py-2\">{modelId}</td>\n\n//                 {ids.map(id => (\n//                   <td key={id} className=\"border border-gray-500 px-4 py-2\"></td>\n//                 ))}\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//       </div>\n//     );\n//   }\n// }\n\n// export default Table;\n\n// import React from 'react';\n\n// class Table extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       editedValue: '', // State to track edited value\n//       selectedCell: null // State to track selected cell\n//     };\n//   }\n\n//   handleCellClick = (modelId, id) => {\n//     this.setState({\n//       selectedCell: { modelId, id }, // Set the selected cell\n//       editedValue: this.props.data[modelId][id] || '' // Set the edited value from props or empty string\n//     });\n//   };\n\n//   handleValueChange = (event) => {\n//     this.setState({ editedValue: event.target.value });\n//   };\n\n//   handleSave = async () => {\n//     const { selectedCell, editedValue } = this.state;\n//     const { modelId, id } = selectedCell;\n\n//     try {\n//       const response = await fetch(`http://localhost:8081/update/${id}/${modelId}`, {\n//         method: \"PUT\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//         body: JSON.stringify({ productionValue: editedValue }),\n//       });\n\n//       if (!response.ok) {\n//         throw new Error(`HTTP error! Status: ${response.status}`);\n//       }\n\n//       console.log('Data saved successfully');\n//       // Refresh data after saving\n//       this.props.refreshData();\n//     } catch (error) {\n//       console.error('Error saving data:', error);\n//     }\n\n//     // Clear selected cell and edited value\n//     this.setState({ selectedCell: null, editedValue: '' });\n//   };\n\n//   handleCancel = () => {\n//     // Clear selected cell and edited value\n//     this.setState({ selectedCell: null, editedValue: '' });\n//   };\n\n//   render() {\n//     const { data } = this.props;\n//     const { editedValue, selectedCell } = this.state;\n\n//     const ids = Array.from({ length: 30 }, (_, i) => i + 1);\n//     const modelIds = ['model1', 'model2', 'model3', 'model4', 'model5'];\n\n//     return (\n//       <div className=\"overflow-x-auto\">\n//         <table className=\"table-auto border border-collapse border-gray-500\">\n//           <thead>\n//             <tr className=\"bg-gray-200\">\n//               <th className=\"border border-gray-500\"></th>\n//               {ids.map(id => (\n//                 <th key={id} className=\"border border-gray-500 px-4 py-2\">{id}</th>\n//               ))}\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {modelIds.map(modelId => (\n//               <tr key={modelId}>\n//                 <td className=\"border border-gray-500 px-4 py-2\">{modelId}</td>\n//                 {ids.map(id => {\n//                   const cellValue = data[modelId][id];\n//                   return (\n//                     <td\n//                       key={id}\n//                       className={`border border-gray-500 px-4 py-2 ${selectedCell && selectedCell.modelId === modelId && selectedCell.id === id ? 'bg-gray-200' : ''}`}\n//                       onClick={() => this.handleCellClick(modelId, id)}\n//                     >\n//                       {selectedCell && selectedCell.modelId === modelId && selectedCell.id === id ? (\n//                         <input\n//                           type=\"text\"\n//                           value={editedValue}\n//                           onChange={this.handleValueChange}\n//                           autoFocus\n//                         />\n//                       ) : (\n//                         cellValue\n//                       )}\n//                     </td>\n//                   );\n//                 })}\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//         {selectedCell && (\n//           <div>\n//             <button onClick={this.handleSave}>Save</button>\n//             <button onClick={this.handleCancel}>Cancel</button>\n//           </div>\n//         )}\n//       </div>\n//     );\n//   }\n// }\n\n// export default Table;\n\n// import React, { useState, useEffect } from \"react\";\n\n// const Table = ({ modelIds }) => {\n//   const [editingCell, setEditingCell] = useState(null);\n//   const [cellValues, setCellValues] = useState({});\n//   const[data,setData]=useState([])\n//   // Function to handle cell click\n//   const handleCellClick = (rowId, colId) => {\n//     console.log(\"Clicked cell:\", rowId, colId);\n//     setEditingCell({ rowId, colId });\n//     // Initialize cell value if not present\n//     setCellValues((prevState) => ({\n//       ...prevState,\n//       [`${rowId}-${colId}`]: prevState[`${rowId}-${colId}`] || \"\",\n//     }));\n//   };\n\n//   // Function to handle input change\n//   const handleInputChange = (e) => {\n\n//     if (editingCell) {\n//       const { rowId, colId } = editingCell;\n//       const value = e.target.value;\n//       setCellValues((prevState) => ({\n//         ...prevState,\n//         [`${rowId}-${colId}`]: value,\n//       }));\n//     }\n//   };\n\n//   // Function to handle input blur\n//   const handleInputBlur = () => {\n//     setEditingCell(null);\n//   };\n//   const handleCancel = () => {\n//     setEditingCell(null); // Clear editingCell state\n//     setCellValues({}); // Clear cellValues state\n//   };\n\n//   // Function to handle saving edited cell values\n//   const handleSave = async (e) => {\n//      e.preventDefault();\n//     console.log(\"Current editingCell:\", editingCell); \n//     if (editingCell) {\n//       const { rowId, colId } = editingCell;\n//       console.log(\"rowId:\", rowId); // Log the value of rowId\n//     console.log(\"colId:\", colId); // Log the value of colId\n//     console.log(\"modelId:\", modelIds[rowId]); // Log the value of modelId\n//     console.log(\"Id:\", ids[colId]); // Log the value of Id\n//      const  value = cellValues[`${rowId}-${colId}`];\n\n//     try {\n\n//         // Make the update request\n//         const response = await fetch(`http://localhost:8082/update`, {\n//           method: \"PUT\",\n//           headers: {\n//             \"Content-Type\": \"application/json\",\n//           },\n//           body: JSON.stringify({\n//             productionValue: value,\n//             id: rowId,\n//             modelId: modelIds[colId],\n//           }),\n//         });\n\n//         // Check if the response is successful\n//         if (!response.ok) {\n//           throw new Error(`HTTP error! Status: ${response.status}`);\n//         }\n//         const newData = [...data];\n//         newData[rowId][colId] = value;\n//         setData(newData);\n\n//         // Update the state if the response is successful\n//         setEditingCell(null);\n//         console.log(\"Data updated successfully\");\n//       } catch (error) {\n//         console.error(\"Error updating data:\", error);\n//       }\n//     } else {\n//       console.error(\"Editing cell is null\");\n\n//   };\n//     }\n//     useEffect(() => {\n//       // API call to fetch data from backend\n//       fetch('http://localhost:8082/data')\n//         .then(response => response.json())\n//         .then(result => { \n//           console.log(\"Received data:\", result.data); // Log the received data\n//           // Check if data is an array before calling map\n//           if (Array.isArray(result.data)) {\n//             // Transform data into the desired format\n//             const transformedData = result.data.map(item => ({\n//               modelId: item.ModelID,\n//               date: item.date\n//               // Add other properties you need\n//             }));\n\n//             // Update state with transformed data\n//             setData(transformedData);\n//           } else {\n//             console.error(\"Received data is not an array:\", result.data);\n//           }\n//         })\n//         .catch(error => console.error('Error fetching model data:', error));\n//     }, []);\n\n//   // Generate IDs 1 to 30\n//   const ids = Array.from({ length: 30 }, (_, i) => i + 1);\n\n//   return (\n//     <div className=\"overflow-x-auto\">\n//       <table className=\"table-auto border border-collapse border-gray-500\">\n//         <thead>\n//         <tr className=\"bg-gray-200\">\n//       <th colSpan=\"40\" className=\"text-center\">\n//         <span className=\"mx-8\">Monthly data for April</span>\n//       </th>\n//     </tr>\n//           <tr className=\"bg-gray-200\">\n\n//             <th className=\"border border-gray-500\"></th>\n//             {/* Render IDs horizontally */}\n//             {ids.map((date) => (\n//               <th key={date} className=\"border border-gray-500 px-4 py-2\">\n//                 {date}\n//               </th>\n//             ))}\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {/* Render ModelIds vertically */}\n//           {modelIds.map((modelId, rowIndex) => (\n//             <tr key={modelId}>\n//               <td className=\"border border-gray-500 px-4 py-2\">{modelId}</td>\n//               {ids.map((id, colIndex) => {\n//                 const cellKey = `${rowIndex}-${colIndex}`;\n//                 const productionValue = data.find(item => item.modelId === modelId && item.date === id)?.productionValue || \"\";\n\n//                 return (\n//                   <td\n//                     key={id}\n//                     className=\"border border-gray-500 px-4 py-2\"\n//                     onClick={() => handleCellClick(rowIndex, colIndex)}\n//                   >\n//                     {/* Conditionally render input field */}\n//                     {editingCell &&\n//                     editingCell.rowId === rowIndex &&\n//                     editingCell.colId === colIndex ? (\n//                       <input\n//                         type=\"text\"\n//                         value={cellValues[cellKey]}\n//                         onChange={handleInputChange}\n//                         onBlur={handleInputBlur}\n//                       />\n//                     ) : (\n//                       productionValue\n//                     )}\n//                   </td>\n//                 );\n//               })}\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//       {/* Save button */}\n//       <div className=\"flex justify-center my-10 \">\n//       <button\n//         onClick={handleSave}\n//         className=\"py-0 mx-4 border   border-gray-500 px-6   \"\n//       >\n//         Save\n//       </button>\n//       <button\n//         onClick={handleCancel}\n//         className=\"py-0 mx-4 border  border-gray-500 px-6 \"\n//       >\n//         Cancel\n//       </button> \n//       </div>            \n//     </div>\n//   );\n// };\n\n// export default Table;\n\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Table = ({\n  modelIds\n}) => {\n  _s();\n  const [editingCell, setEditingCell] = useState(null);\n  const [cellValues, setCellValues] = useState({});\n  const [data, setData] = useState([]);\n  const handleCellClick = (rowIndex, colIndex) => {\n    setEditingCell({\n      rowIndex,\n      colIndex\n    });\n    const defaultValue = data[rowIndex] && data[rowIndex][colIndex];\n    setCellValues(defaultValue || \"\");\n  };\n  const handleInputChange = e => {\n    setCellValues(e.target.value);\n  };\n  const handleInputBlur = () => {\n    setEditingCell(null);\n  };\n  const handleSave = async () => {\n    if (editingCell) {\n      const {\n        rowIndex,\n        colIndex\n      } = editingCell;\n      const updatedData = [...data];\n      updatedData[rowIndex][colIndex] = cellValues;\n      try {\n        const response = await fetch(`http://localhost:8082/update`, {\n          method: \"PUT\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            productionValue: cellValues,\n            id: rowIndex,\n            modelId: modelIds[colIndex]\n          })\n        });\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        setData(updatedData);\n        setEditingCell(null);\n      } catch (error) {\n        console.error(\"Error updating data:\", error);\n      }\n    } else {\n      console.error(\"Editing cell is null\");\n    }\n  };\n  useEffect(() => {\n    fetch(\"http://localhost:8082/data\").then(response => response.json()).then(result => {\n      if (Array.isArray(result.data)) {\n        setData(result.data);\n      } else {\n        console.error(\"Received data is not an array:\", result.data);\n      }\n    }).catch(error => console.error(\"Error fetching model data:\", error));\n  }, []);\n  const ids = Array.from({\n    length: 30\n  }, (_, i) => i + 1);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"overflow-x-auto\",\n    children: [/*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"table-auto border border-collapse border-gray-500\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n          className: \"bg-gray-200\",\n          children: /*#__PURE__*/_jsxDEV(\"th\", {\n            colSpan: \"40\",\n            className: \"text-center\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"mx-8\",\n              children: \"Monthly data for April\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 425,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 424,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 423,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n          className: \"bg-gray-200\",\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            className: \"border border-gray-500\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 429,\n            columnNumber: 13\n          }, this), ids.map(date => /*#__PURE__*/_jsxDEV(\"th\", {\n            className: \"border border-gray-500 px-4 py-2\",\n            children: date\n          }, date, false, {\n            fileName: _jsxFileName,\n            lineNumber: 431,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 428,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 422,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: modelIds.map((modelId, rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"border border-gray-500 px-4 py-2\",\n            children: modelId\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 440,\n            columnNumber: 15\n          }, this), ids.map((id, colIndex) => {\n            const productionValue = data[rowIndex][colIndex];\n            return /*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"border border-gray-500 px-4 py-2\",\n              onClick: () => handleCellClick(rowIndex, colIndex),\n              children: editingCell && editingCell.rowIndex === rowIndex && editingCell.colIndex === colIndex ? /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                value: cellValues,\n                onChange: handleInputChange,\n                onBlur: handleInputBlur\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 453,\n                columnNumber: 23\n              }, this) : productionValue\n            }, id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 445,\n              columnNumber: 19\n            }, this);\n          })]\n        }, modelId, true, {\n          fileName: _jsxFileName,\n          lineNumber: 439,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 437,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 421,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-center my-10 \",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSave,\n        className: \"py-0 mx-4 border   border-gray-500 px-6\",\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 470,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setEditingCell(null),\n        className: \"py-0 mx-4 border  border-gray-500 px-6\",\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 476,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 469,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 420,\n    columnNumber: 5\n  }, this);\n};\n_s(Table, \"NG44jlnFEDdGFrb0Y7ypZ1Hbejo=\");\n_c = Table;\nexport default Table;\nvar _c;\n$RefreshReg$(_c, \"Table\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Table","modelIds","_s","editingCell","setEditingCell","cellValues","setCellValues","data","setData","handleCellClick","rowIndex","colIndex","defaultValue","handleInputChange","e","target","value","handleInputBlur","handleSave","updatedData","response","fetch","method","headers","body","JSON","stringify","productionValue","id","modelId","ok","Error","status","error","console","then","json","result","Array","isArray","catch","ids","from","length","_","i","className","children","colSpan","fileName","_jsxFileName","lineNumber","columnNumber","map","date","onClick","type","onChange","onBlur","_c","$RefreshReg$"],"sources":["D:/projectmodel/frontend/src/Components/Table.js"],"sourcesContent":["// import React from 'react';\r\n\r\n// class Table extends React.Component {\r\n//   render() {\r\n//     // Generate IDs 1 to 30\r\n//     const ids = Array.from({ length: 30 }, (_, i) => i + 1);\r\n//     // Sample ModelIds\r\n//     const modelIds = ['model1', 'model2', 'model3', 'model4', 'model5'];\r\n\r\n//     return (\r\n//       <div className=\"overflow-x-auto\">\r\n//         <table className=\"table-auto border border-collapse border-gray-500\">\r\n//           <thead>\r\n//             <tr className=\"bg-gray-200\">\r\n//               <th className=\"border border-gray-500\"></th>\r\n//               {/* Render IDs horizontally */}\r\n//               {ids.map(id => (\r\n//                 <th key={id} className=\"border border-gray-500 px-4 py-2\">{id}</th>\r\n//               ))}\r\n//             </tr>\r\n//           </thead>\r\n//           <tbody>\r\n//             {/* Render ModelIds vertically */}\r\n//             {modelIds.map(modelId => (\r\n//               <tr key={modelId}>\r\n//                 <td className=\"border border-gray-500 px-4 py-2\">{modelId}</td>\r\n\r\n//                 {ids.map(id => (\r\n//                   <td key={id} className=\"border border-gray-500 px-4 py-2\"></td>\r\n//                 ))}\r\n//               </tr>\r\n//             ))}\r\n//           </tbody>\r\n//         </table>\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// export default Table;\r\n\r\n// import React from 'react';\r\n\r\n// class Table extends React.Component {\r\n//   constructor(props) {\r\n//     super(props);\r\n//     this.state = {\r\n//       editedValue: '', // State to track edited value\r\n//       selectedCell: null // State to track selected cell\r\n//     };\r\n//   }\r\n\r\n//   handleCellClick = (modelId, id) => {\r\n//     this.setState({\r\n//       selectedCell: { modelId, id }, // Set the selected cell\r\n//       editedValue: this.props.data[modelId][id] || '' // Set the edited value from props or empty string\r\n//     });\r\n//   };\r\n\r\n//   handleValueChange = (event) => {\r\n//     this.setState({ editedValue: event.target.value });\r\n//   };\r\n\r\n//   handleSave = async () => {\r\n//     const { selectedCell, editedValue } = this.state;\r\n//     const { modelId, id } = selectedCell;\r\n\r\n//     try {\r\n//       const response = await fetch(`http://localhost:8081/update/${id}/${modelId}`, {\r\n//         method: \"PUT\",\r\n//         headers: {\r\n//           \"Content-Type\": \"application/json\",\r\n//         },\r\n//         body: JSON.stringify({ productionValue: editedValue }),\r\n//       });\r\n\r\n//       if (!response.ok) {\r\n//         throw new Error(`HTTP error! Status: ${response.status}`);\r\n//       }\r\n\r\n//       console.log('Data saved successfully');\r\n//       // Refresh data after saving\r\n//       this.props.refreshData();\r\n//     } catch (error) {\r\n//       console.error('Error saving data:', error);\r\n//     }\r\n\r\n//     // Clear selected cell and edited value\r\n//     this.setState({ selectedCell: null, editedValue: '' });\r\n//   };\r\n\r\n//   handleCancel = () => {\r\n//     // Clear selected cell and edited value\r\n//     this.setState({ selectedCell: null, editedValue: '' });\r\n//   };\r\n\r\n//   render() {\r\n//     const { data } = this.props;\r\n//     const { editedValue, selectedCell } = this.state;\r\n\r\n//     const ids = Array.from({ length: 30 }, (_, i) => i + 1);\r\n//     const modelIds = ['model1', 'model2', 'model3', 'model4', 'model5'];\r\n\r\n//     return (\r\n//       <div className=\"overflow-x-auto\">\r\n//         <table className=\"table-auto border border-collapse border-gray-500\">\r\n//           <thead>\r\n//             <tr className=\"bg-gray-200\">\r\n//               <th className=\"border border-gray-500\"></th>\r\n//               {ids.map(id => (\r\n//                 <th key={id} className=\"border border-gray-500 px-4 py-2\">{id}</th>\r\n//               ))}\r\n//             </tr>\r\n//           </thead>\r\n//           <tbody>\r\n//             {modelIds.map(modelId => (\r\n//               <tr key={modelId}>\r\n//                 <td className=\"border border-gray-500 px-4 py-2\">{modelId}</td>\r\n//                 {ids.map(id => {\r\n//                   const cellValue = data[modelId][id];\r\n//                   return (\r\n//                     <td\r\n//                       key={id}\r\n//                       className={`border border-gray-500 px-4 py-2 ${selectedCell && selectedCell.modelId === modelId && selectedCell.id === id ? 'bg-gray-200' : ''}`}\r\n//                       onClick={() => this.handleCellClick(modelId, id)}\r\n//                     >\r\n//                       {selectedCell && selectedCell.modelId === modelId && selectedCell.id === id ? (\r\n//                         <input\r\n//                           type=\"text\"\r\n//                           value={editedValue}\r\n//                           onChange={this.handleValueChange}\r\n//                           autoFocus\r\n//                         />\r\n//                       ) : (\r\n//                         cellValue\r\n//                       )}\r\n//                     </td>\r\n//                   );\r\n//                 })}\r\n//               </tr>\r\n//             ))}\r\n//           </tbody>\r\n//         </table>\r\n//         {selectedCell && (\r\n//           <div>\r\n//             <button onClick={this.handleSave}>Save</button>\r\n//             <button onClick={this.handleCancel}>Cancel</button>\r\n//           </div>\r\n//         )}\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// export default Table;\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n\r\n// const Table = ({ modelIds }) => {\r\n//   const [editingCell, setEditingCell] = useState(null);\r\n//   const [cellValues, setCellValues] = useState({});\r\n//   const[data,setData]=useState([])\r\n//   // Function to handle cell click\r\n//   const handleCellClick = (rowId, colId) => {\r\n//     console.log(\"Clicked cell:\", rowId, colId);\r\n//     setEditingCell({ rowId, colId });\r\n//     // Initialize cell value if not present\r\n//     setCellValues((prevState) => ({\r\n//       ...prevState,\r\n//       [`${rowId}-${colId}`]: prevState[`${rowId}-${colId}`] || \"\",\r\n//     }));\r\n//   };\r\n\r\n//   // Function to handle input change\r\n//   const handleInputChange = (e) => {\r\n    \r\n//     if (editingCell) {\r\n//       const { rowId, colId } = editingCell;\r\n//       const value = e.target.value;\r\n//       setCellValues((prevState) => ({\r\n//         ...prevState,\r\n//         [`${rowId}-${colId}`]: value,\r\n//       }));\r\n//     }\r\n//   };\r\n\r\n//   // Function to handle input blur\r\n//   const handleInputBlur = () => {\r\n//     setEditingCell(null);\r\n//   };\r\n//   const handleCancel = () => {\r\n//     setEditingCell(null); // Clear editingCell state\r\n//     setCellValues({}); // Clear cellValues state\r\n//   };\r\n\r\n//   // Function to handle saving edited cell values\r\n//   const handleSave = async (e) => {\r\n//      e.preventDefault();\r\n//     console.log(\"Current editingCell:\", editingCell); \r\n//     if (editingCell) {\r\n//       const { rowId, colId } = editingCell;\r\n//       console.log(\"rowId:\", rowId); // Log the value of rowId\r\n//     console.log(\"colId:\", colId); // Log the value of colId\r\n//     console.log(\"modelId:\", modelIds[rowId]); // Log the value of modelId\r\n//     console.log(\"Id:\", ids[colId]); // Log the value of Id\r\n//      const  value = cellValues[`${rowId}-${colId}`];\r\n    \r\n//     try {\r\n    \r\n      \r\n//         // Make the update request\r\n//         const response = await fetch(`http://localhost:8082/update`, {\r\n//           method: \"PUT\",\r\n//           headers: {\r\n//             \"Content-Type\": \"application/json\",\r\n//           },\r\n//           body: JSON.stringify({\r\n//             productionValue: value,\r\n//             id: rowId,\r\n//             modelId: modelIds[colId],\r\n//           }),\r\n//         });\r\n        \r\n  \r\n//         // Check if the response is successful\r\n//         if (!response.ok) {\r\n//           throw new Error(`HTTP error! Status: ${response.status}`);\r\n//         }\r\n//         const newData = [...data];\r\n//         newData[rowId][colId] = value;\r\n//         setData(newData);\r\n  \r\n//         // Update the state if the response is successful\r\n//         setEditingCell(null);\r\n//         console.log(\"Data updated successfully\");\r\n//       } catch (error) {\r\n//         console.error(\"Error updating data:\", error);\r\n//       }\r\n//     } else {\r\n//       console.error(\"Editing cell is null\");\r\n  \r\n//   };\r\n//     }\r\n//     useEffect(() => {\r\n//       // API call to fetch data from backend\r\n//       fetch('http://localhost:8082/data')\r\n//         .then(response => response.json())\r\n//         .then(result => { \r\n//           console.log(\"Received data:\", result.data); // Log the received data\r\n//           // Check if data is an array before calling map\r\n//           if (Array.isArray(result.data)) {\r\n//             // Transform data into the desired format\r\n//             const transformedData = result.data.map(item => ({\r\n//               modelId: item.ModelID,\r\n//               date: item.date\r\n//               // Add other properties you need\r\n//             }));\r\n    \r\n//             // Update state with transformed data\r\n//             setData(transformedData);\r\n//           } else {\r\n//             console.error(\"Received data is not an array:\", result.data);\r\n//           }\r\n//         })\r\n//         .catch(error => console.error('Error fetching model data:', error));\r\n//     }, []);\r\n  \r\n    \r\n  \r\n\r\n//   // Generate IDs 1 to 30\r\n//   const ids = Array.from({ length: 30 }, (_, i) => i + 1);\r\n\r\n//   return (\r\n//     <div className=\"overflow-x-auto\">\r\n//       <table className=\"table-auto border border-collapse border-gray-500\">\r\n//         <thead>\r\n//         <tr className=\"bg-gray-200\">\r\n//       <th colSpan=\"40\" className=\"text-center\">\r\n//         <span className=\"mx-8\">Monthly data for April</span>\r\n//       </th>\r\n//     </tr>\r\n//           <tr className=\"bg-gray-200\">\r\n          \r\n//             <th className=\"border border-gray-500\"></th>\r\n//             {/* Render IDs horizontally */}\r\n//             {ids.map((date) => (\r\n//               <th key={date} className=\"border border-gray-500 px-4 py-2\">\r\n//                 {date}\r\n//               </th>\r\n//             ))}\r\n//           </tr>\r\n//         </thead>\r\n//         <tbody>\r\n//           {/* Render ModelIds vertically */}\r\n//           {modelIds.map((modelId, rowIndex) => (\r\n//             <tr key={modelId}>\r\n//               <td className=\"border border-gray-500 px-4 py-2\">{modelId}</td>\r\n//               {ids.map((id, colIndex) => {\r\n//                 const cellKey = `${rowIndex}-${colIndex}`;\r\n//                 const productionValue = data.find(item => item.modelId === modelId && item.date === id)?.productionValue || \"\";\r\n\r\n//                 return (\r\n//                   <td\r\n//                     key={id}\r\n//                     className=\"border border-gray-500 px-4 py-2\"\r\n//                     onClick={() => handleCellClick(rowIndex, colIndex)}\r\n//                   >\r\n//                     {/* Conditionally render input field */}\r\n//                     {editingCell &&\r\n//                     editingCell.rowId === rowIndex &&\r\n//                     editingCell.colId === colIndex ? (\r\n//                       <input\r\n//                         type=\"text\"\r\n//                         value={cellValues[cellKey]}\r\n//                         onChange={handleInputChange}\r\n//                         onBlur={handleInputBlur}\r\n//                       />\r\n//                     ) : (\r\n//                       productionValue\r\n//                     )}\r\n//                   </td>\r\n//                 );\r\n//               })}\r\n//             </tr>\r\n//           ))}\r\n//         </tbody>\r\n//       </table>\r\n//       {/* Save button */}\r\n//       <div className=\"flex justify-center my-10 \">\r\n//       <button\r\n//         onClick={handleSave}\r\n//         className=\"py-0 mx-4 border   border-gray-500 px-6   \"\r\n//       >\r\n//         Save\r\n//       </button>\r\n//       <button\r\n//         onClick={handleCancel}\r\n//         className=\"py-0 mx-4 border  border-gray-500 px-6 \"\r\n//       >\r\n//         Cancel\r\n//       </button> \r\n//       </div>            \r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Table;\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\n\r\nconst Table = ({ modelIds }) => {\r\n  const [editingCell, setEditingCell] = useState(null);\r\n  const [cellValues, setCellValues] = useState({});\r\n  const [data, setData] = useState([]);\r\n\r\n  const handleCellClick = (rowIndex, colIndex) => {\r\n    setEditingCell({ rowIndex, colIndex });\r\n    const defaultValue = data[rowIndex] && data[rowIndex][colIndex];\r\n    setCellValues(defaultValue || \"\");\r\n  };\r\n\r\n  const handleInputChange = (e) => {\r\n    setCellValues(e.target.value);\r\n  };\r\n\r\n  const handleInputBlur = () => {\r\n    setEditingCell(null);\r\n  };\r\n\r\n  const handleSave = async () => {\r\n    if (editingCell) {\r\n      const { rowIndex, colIndex } = editingCell;\r\n      const updatedData = [...data];\r\n      updatedData[rowIndex][colIndex] = cellValues;\r\n\r\n      try {\r\n        const response = await fetch(`http://localhost:8082/update`, {\r\n          method: \"PUT\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({\r\n            productionValue: cellValues,\r\n            id: rowIndex,\r\n            modelId: modelIds[colIndex],\r\n          }),\r\n        });\r\n\r\n        if (!response.ok) {\r\n          throw new Error(`HTTP error! Status: ${response.status}`);\r\n        }\r\n\r\n        setData(updatedData);\r\n        setEditingCell(null);\r\n      } catch (error) {\r\n        console.error(\"Error updating data:\", error);\r\n      }\r\n    } else {\r\n      console.error(\"Editing cell is null\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetch(\"http://localhost:8082/data\")\r\n      .then((response) => response.json())\r\n      .then((result) => {\r\n        if (Array.isArray(result.data)) {\r\n          setData(result.data);\r\n        } else {\r\n          console.error(\"Received data is not an array:\", result.data);\r\n        }\r\n      })\r\n      .catch((error) => console.error(\"Error fetching model data:\", error));\r\n  }, []);\r\n\r\n  const ids = Array.from({ length: 30 }, (_, i) => i + 1);\r\n\r\n  return (\r\n    <div className=\"overflow-x-auto\">\r\n      <table className=\"table-auto border border-collapse border-gray-500\">\r\n        <thead>\r\n          <tr className=\"bg-gray-200\">\r\n            <th colSpan=\"40\" className=\"text-center\">\r\n              <span className=\"mx-8\">Monthly data for April</span>\r\n            </th>\r\n          </tr>\r\n          <tr className=\"bg-gray-200\">\r\n            <th className=\"border border-gray-500\"></th>\r\n            {ids.map((date) => (\r\n              <th key={date} className=\"border border-gray-500 px-4 py-2\">\r\n                {date}\r\n              </th>\r\n            ))}\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {modelIds.map((modelId, rowIndex) => (\r\n            <tr key={modelId}>\r\n              <td className=\"border border-gray-500 px-4 py-2\">{modelId}</td>\r\n              {ids.map((id, colIndex) => {\r\n                const productionValue = data[rowIndex][colIndex];\r\n\r\n                return (\r\n                  <td\r\n                    key={id}\r\n                    className=\"border border-gray-500 px-4 py-2\"\r\n                    onClick={() => handleCellClick(rowIndex, colIndex)}\r\n                  >\r\n                    {editingCell &&\r\n                    editingCell.rowIndex === rowIndex &&\r\n                    editingCell.colIndex === colIndex ? (\r\n                      <input\r\n                        type=\"text\"\r\n                        value={cellValues}\r\n                        onChange={handleInputChange}\r\n                        onBlur={handleInputBlur}\r\n                      />\r\n                    ) : (\r\n                      productionValue\r\n                    )}\r\n                  </td>\r\n                );\r\n              })}\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n      <div className=\"flex justify-center my-10 \">\r\n        <button\r\n          onClick={handleSave}\r\n          className=\"py-0 mx-4 border   border-gray-500 px-6\"\r\n        >\r\n          Save\r\n        </button>\r\n        <button\r\n          onClick={() => setEditingCell(null)}\r\n          className=\"py-0 mx-4 border  border-gray-500 px-6\"\r\n        >\r\n          Cancel\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Table;\r\n\r\n\r\n"],"mappings":";;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAC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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}