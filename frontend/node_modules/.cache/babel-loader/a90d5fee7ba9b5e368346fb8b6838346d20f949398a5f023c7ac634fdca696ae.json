{"ast":null,"code":"var _jsxFileName = \"D:\\\\projectmodel\\\\frontend\\\\src\\\\Components\\\\Table.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n\n// const Table = ({ modelIds }) => {\n//   const [editingCell, setEditingCell] = useState(null);\n//   const [cellValues, setCellValues] = useState({});\n//   const[data,setData]=useState([])\n//   // Function to handle cell click\n//   const handleCellClick = (rowId, colId) => {\n//     console.log(\"Clicked cell:\", rowId, colId);\n//     setEditingCell({ rowId, colId });\n//     // Initialize cell value if not present\n//     setCellValues((prevState) => ({\n//       ...prevState,\n//       [`${rowId}-${colId}`]: prevState[`${rowId}-${colId}`] || \"\",\n//     }));\n//   };\n\n//   // Function to handle input change\n//   const handleInputChange = (e) => {\n\n//     if (editingCell) {\n//       const { rowId, colId } = editingCell;\n//       const value = e.target.value;\n//       setCellValues((prevState) => ({\n//         ...prevState,\n//         [`${rowId}-${colId}`]: value,\n//       }));\n//     }\n//   };\n\n//   // Function to handle input blur\n//   const handleInputBlur = () => {\n//     setEditingCell(null);\n//   };\n//   const handleCancel = () => {\n//     setEditingCell(null); // Clear editingCell state\n//     setCellValues({}); // Clear cellValues state\n//   };\n\n//   // Function to handle saving edited cell values\n//   const handleSave = async (e) => {\n//      e.preventDefault();\n//     console.log(\"Current editingCell:\", editingCell);\n//     if (editingCell) {\n//       const { rowId, colId } = editingCell;\n//       console.log(\"rowId:\", rowId); // Log the value of rowId\n//     console.log(\"colId:\", colId); // Log the value of colId\n//     console.log(\"modelId:\", modelIds[rowId]); // Log the value of modelId\n//     console.log(\"Id:\", ids[colId]); // Log the value of Id\n//      const  value = cellValues[`${rowId}-${colId}`];\n\n//     try {\n\n//         // Make the update request\n//         const response = await fetch(`http://localhost:8082/update`, {\n//           method: \"PUT\",\n//           headers: {\n//             \"Content-Type\": \"application/json\",\n//           },\n//           body: JSON.stringify({\n//             productionValue: value,\n//             id: rowId,\n//             modelId: modelIds[colId],\n//           }),\n//         });\n\n//         // Check if the response is successful\n//         if (!response.ok) {\n//           throw new Error(`HTTP error! Status: ${response.status}`);\n//         }\n//         const newData = [...data];\n//         newData[rowId][colId] = value;\n//         setData(newData);\n\n//         // Update the state if the response is successful\n//         setEditingCell(null);\n//         console.log(\"Data updated successfully\");\n//       } catch (error) {\n//         console.error(\"Error updating data:\", error);\n//       }\n//     } else {\n//       console.error(\"Editing cell is null\");\n\n//   };\n//     }\n//     useEffect(() => {\n//       // API call to fetch data from backend\n//       fetch('http://localhost:8082/data')\n//         .then(response => response.json())\n//         .then(result => {\n//           console.log(\"Received data:\", result.data); // Log the received data\n//           // Check if data is an array before calling map\n//           if (Array.isArray(result.data)) {\n//             // Transform data into the desired format\n//             const transformedData = result.data.map(item => ({\n//               modelId: item.ModelID,\n//               date: item.date\n//               // Add other properties you need\n//             }));\n\n//             // Update state with transformed data\n//             setData(transformedData);\n//           } else {\n//             console.error(\"Received data is not an array:\", result.data);\n//           }\n//         })\n//         .catch(error => console.error('Error fetching model data:', error));\n//     }, []);\n\n//   // Generate IDs 1 to 30\n//   const ids = Array.from({ length: 30 }, (_, i) => i + 1);\n\n//   return (\n//     <div className=\"overflow-x-auto\">\n//       <table className=\"table-auto border border-collapse border-gray-500\">\n//         <thead>\n//         <tr className=\"bg-gray-200\">\n//       <th colSpan=\"40\" className=\"text-center\">\n//         <span className=\"mx-8\">Monthly data for April</span>\n//       </th>\n//     </tr>\n//           <tr className=\"bg-gray-200\">\n\n//             <th className=\"border border-gray-500\"></th>\n//             {/* Render IDs horizontally */}\n//             {ids.map((date) => (\n//               <th key={date} className=\"border border-gray-500 px-4 py-2\">\n//                 {date}\n//               </th>\n//             ))}\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {/* Render ModelIds vertically */}\n//           {modelIds.map((modelId, rowIndex) => (\n//             <tr key={modelId}>\n//               <td className=\"border border-gray-500 px-4 py-2\">{modelId}</td>\n//               {ids.map((id, colIndex) => {\n//                 const cellKey = `${rowIndex}-${colIndex}`;\n//                 const productionValue = data.find(item => item.modelId === modelId && item.date === id)?.productionValue || \"\";\n\n//                 return (\n//                   <td\n//                     key={id}\n//                     className=\"border border-gray-500 px-4 py-2\"\n//                     onClick={() => handleCellClick(rowIndex, colIndex)}\n//                   >\n//                     {/* Conditionally render input field */}\n//                     {editingCell &&\n//                     editingCell.rowId === rowIndex &&\n//                     editingCell.colId === colIndex ? (\n//                       <input\n//                         type=\"text\"\n//                         value={cellValues[cellKey]}\n//                         onChange={handleInputChange}\n//                         onBlur={handleInputBlur}\n//                       />\n//                     ) : (\n//                       productionValue\n//                     )}\n//                   </td>\n//                 );\n//               })}\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//       {/* Save button */}\n//       <div className=\"flex justify-center my-10 \">\n//       <button\n//         onClick={handleSave}\n//         className=\"py-0 mx-4 border   border-gray-500 px-6   \"\n//       >\n//         Save\n//       </button>\n//       <button\n//         onClick={handleCancel}\n//         className=\"py-0 mx-4 border  border-gray-500 px-6 \"\n//       >\n//         Cancel\n//       </button>\n//       </div>            \n//     </div>\n//   );\n// };\n\n// export default Table;\n\n// import React, { useState, useEffect } from \"react\";\n\n// const Table = ({ modelIds }) => {\n//   const [editingCell, setEditingCell] = useState(null);\n//   const [cellValues, setCellValues] = useState({});\n//   const[data,setData]=useState({})\n//   // Function to handle cell click\n//   const handleCellClick = (rowId, colId) => {\n//     console.log(\"Clicked cell:\", rowId, colId);\n//     setEditingCell({ rowId, colId });\n//     // Initialize cell value if not present\n//     setCellValues((prevState) => ({\n//       ...prevState,\n//       [`${rowId}-${colId}`]: prevState[`${rowId}-${colId}`] || \"\",\n//     }));\n//   };\n\n//   // Function to handle input change\n//   const handleInputChange = (e) => {\n//     if (editingCell) {\n//       const { rowId, colId } = editingCell;\n//       const value = e.target.value;\n//       setCellValues((prevState) => ({\n//         ...prevState,\n//         [`${rowId}-${colId}`]: value,\n//       }));\n//     }\n//   };\n\n//   // Function to handle input blur\n//   const handleInputBlur = () => {\n//     setEditingCell(null);\n//   };\n//   const handleCancel = () => {\n//     setEditingCell(null); // Clear editingCell state\n//     setCellValues({}); // Clear cellValues state\n//   };\n\n//   // Function to handle saving edited cell values\n//   const handleSave = async (e) => {\n//     e.preventDefault();\n//     console.log(\"Current editingCell:\", editingCell); \n//     if (editingCell) {\n//       const { rowId, colId } = editingCell;\n//       console.log(\"rowId:\", rowId); // Log the value of rowId\n//     console.log(\"colId:\", colId); // Log the value of colId\n//     console.log(\"modelId:\", modelIds[rowId]); // Log the value of modelId\n//     console.log(\"Id:\", ids[colId]); // Log the value of Id\n//      const  value = cellValues[`${rowId}-${colId}`];\n\n//     try {\n\n//         // Make the update request\n//         const response = await fetch(`http://localhost:8082/update`, {\n//           method: \"PUT\",\n//           headers: {\n//             \"Content-Type\": \"application/json\",\n//           },\n//           body: JSON.stringify({\n//             productionValue: value,\n//             id: rowId,\n//             modelId: modelIds[colId],\n//           }),\n//         });\n\n//         // Check if the response is successful\n//         if (!response.ok) {\n//           throw new Error(`HTTP error! Status: ${response.status}`);\n//         }\n//         const newData = [...data];\n//         newData[rowId][colId] = value;\n//         setData(newData);\n\n//         // Update the state if the response is successful\n//         setEditingCell(null);\n//         console.log(\"Data updated successfully\");\n//       } catch (error) {\n//         console.error(\"Error updating data:\", error);\n//       }\n//     } else {\n//       console.error(\"Editing cell is null\");\n\n//   };\n//     }\n\n//   // Generate IDs 1 to 30\n//   const ids = Array.from({ length: 30 }, (_, i) => i + 1);\n\n//   return (\n//     <div className=\"overflow-x-auto\">\n//       <table className=\"table-auto border border-collapse border-gray-500\">\n//         <thead>\n//         <tr className=\"bg-gray-200\">\n//       <th colSpan=\"40\" className=\"text-center\">\n//         <span className=\"mx-8\">Monthly data for April</span>\n//       </th>\n//     </tr>\n//           <tr className=\"bg-gray-200\">\n\n//             <th className=\"border border-gray-500\"></th>\n//             {/* Render IDs horizontally */}\n//             {ids.map((id) => (\n//               <th key={id} className=\"border border-gray-500 px-4 py-2\">\n//                 {id}\n//               </th>\n//             ))}\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {/* Render ModelIds vertically */}\n//           {modelIds.map((modelId, rowIndex) => (\n//             <tr key={modelId}>\n//               <td className=\"border border-gray-500 px-4 py-2\">{modelId}</td>\n//               {ids.map((id, colIndex) => {\n//                 const cellKey = `${rowIndex}-${colIndex}`;\n//                 return (\n//                   <td\n//                     key={id}\n//                     className=\"border border-gray-500 px-4 py-2\"\n//                     onClick={() => handleCellClick(rowIndex, colIndex)}\n//                   >\n//                     {/* Conditionally render input field */}\n//                     {editingCell &&\n//                     editingCell.rowId === rowIndex &&\n//                     editingCell.colId === colIndex ? (\n//                       <input\n//                         type=\"text\"\n//                         value={cellValues[cellKey]}\n//                         onChange={handleInputChange}\n//                         onBlur={handleInputBlur}\n//                       />\n//                     ) : (\n//                       cellValues[cellKey]\n//                     )}\n//                   </td>\n//                 );\n//               })}\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//       {/* Save button */}\n//       <div className=\"flex justify-center my-10 \">\n//       <button\n//         onClick={handleSave}\n//         className=\"py-0 mx-4 border   border-gray-500 px-6   \"\n//       >\n//         Save\n//       </button>\n//       <button\n//         onClick={handleCancel}\n//         className=\"py-0 mx-4 border  border-gray-500 px-6 \"\n//       >\n//         Cancel\n//       </button> \n//       </div>            \n//     </div>\n//   );\n// };\n\n// export default Table;\n\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Table = ({\n  modelIds\n}) => {\n  _s();\n  const [editingCell, setEditingCell] = useState(null);\n  const [cellValues, setCellValues] = useState({});\n  const [data, setData] = useState([]);\n\n  // Function to handle cell click\n  const handleCellClick = (date, modelId) => {\n    // Find the index of the date in the data array\n    const rowIndex = data.findIndex(row => row.date === date);\n    // Find the index of the modelId in the modelIds array\n    const colIndex = modelIds.findIndex(id => id === modelId);\n\n    // Check if both rowIndex and colIndex are found\n    if (rowIndex !== -1 && colIndex !== -1) {\n      console.log(\"Clicked cell:\", rowIndex, colIndex);\n      setEditingCell({\n        rowId: rowIndex,\n        colId: colIndex\n      });\n      // Initialize cell value if not present\n      setCellValues(prevState => ({\n        ...prevState,\n        [`${rowIndex}-${colIndex}`]: prevState[`${rowIndex}-${colIndex}`] || \"\"\n      }));\n    } else {\n      console.error(\"Row or column index not found\");\n    }\n  };\n\n  // Function to handle input change\n  const handleInputChange = e => {\n    if (editingCell) {\n      const {\n        rowId,\n        colId\n      } = editingCell;\n      const value = e.target.value;\n      setCellValues(prevState => ({\n        ...prevState,\n        [`${rowId}-${colId}`]: value\n      }));\n    }\n  };\n\n  // Function to handle input blur\n  const handleInputBlur = () => {\n    setEditingCell(null);\n  };\n\n  // Function to handle cancel button click\n  const handleCancel = () => {\n    setEditingCell(null); // Clear editingCell state\n    setCellValues({}); // Clear cellValues state\n  };\n\n  // Function to handle saving edited cell values\n  const handleSave = async e => {\n    e.preventDefault();\n    console.log(\"Current editingCell:\", editingCell);\n    if (editingCell) {\n      const {\n        rowId,\n        colId\n      } = editingCell;\n      const value = cellValues[`${rowId}-${colId}`];\n      try {\n        // Make the update request\n        const response = await fetch(`http://localhost:8082/update`, {\n          method: \"PUT\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            productionValue: value,\n            date: data[rowId].date,\n            id: rowId,\n            modelId: modelIds[colId]\n          })\n        });\n\n        // Check if the response is successful\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n\n        // Update the cell value in state\n        const newData = [...data];\n        newData[rowId][colId] = value;\n        setData(newData);\n\n        // Update the state if the response is successful\n        setEditingCell(null);\n        console.log(\"Data updated successfully\");\n      } catch (error) {\n        console.error(\"Error updating data:\", error);\n      }\n    } else {\n      console.error(\"Editing cell is null\");\n    }\n  };\n\n  // Generate IDs 1 to 30\n  const ids = Array.from({\n    length: 30\n  }, (_, i) => i + 1);\n\n  // Fetch data from the server\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(\"http://localhost:8082/data\");\n        const jsonData = await response.json();\n        setData(jsonData.data);\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    };\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"overflow-x-auto\",\n    children: [/*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"table-auto border border-collapse border-gray-500\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n          className: \"bg-gray-200\",\n          children: /*#__PURE__*/_jsxDEV(\"th\", {\n            colSpan: \"40\",\n            className: \"text-center\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"mx-8\",\n              children: \"Monthly data for April\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 485,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 484,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 483,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n          className: \"bg-gray-200\",\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            className: \"border border-gray-500\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 489,\n            columnNumber: 13\n          }, this), ids.map(id => /*#__PURE__*/_jsxDEV(\"th\", {\n            className: \"border border-gray-500 px-4 py-2\",\n            children: id\n          }, id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 492,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 488,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 482,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: data.map((rowData, rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"border border-gray-500 px-4 py-2\",\n            children: rowData.date\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 502,\n            columnNumber: 15\n          }, this), modelIds.map((modelId, colIndex) => {\n            const cellKey = `${rowIndex}-${colIndex}`;\n            return /*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"border border-gray-500 px-4 py-2\",\n              onClick: () => handleCellClick(rowData.date, modelId),\n              children: editingCell && editingCell.rowId === rowIndex && editingCell.colId === colIndex ? /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                value: cellValues[cellKey],\n                onChange: handleInputChange,\n                onBlur: handleInputBlur\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 515,\n                columnNumber: 23\n              }, this) : rowData.productionValues[colIndex] || \"\"\n            }, colIndex, false, {\n              fileName: _jsxFileName,\n              lineNumber: 506,\n              columnNumber: 19\n            }, this);\n          })]\n        }, rowIndex, true, {\n          fileName: _jsxFileName,\n          lineNumber: 501,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 498,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 481,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-center my-10\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSave,\n        className: \"py-0 mx-4 border   border-gray-500 px-6   \",\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 533,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleCancel,\n        className: \"py-0 mx-4 border  border-gray-500 px-6 \",\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 539,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 532,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 480,\n    columnNumber: 5\n  }, this);\n};\n_s(Table, \"NG44jlnFEDdGFrb0Y7ypZ1Hbejo=\");\n_c = Table;\nexport default Table;\nvar _c;\n$RefreshReg$(_c, \"Table\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Table","modelIds","_s","editingCell","setEditingCell","cellValues","setCellValues","data","setData","handleCellClick","date","modelId","rowIndex","findIndex","row","colIndex","id","console","log","rowId","colId","prevState","error","handleInputChange","e","value","target","handleInputBlur","handleCancel","handleSave","preventDefault","response","fetch","method","headers","body","JSON","stringify","productionValue","ok","Error","status","newData","ids","Array","from","length","_","i","fetchData","jsonData","json","className","children","colSpan","fileName","_jsxFileName","lineNumber","columnNumber","map","rowData","cellKey","onClick","type","onChange","onBlur","productionValues","_c","$RefreshReg$"],"sources":["D:/projectmodel/frontend/src/Components/Table.js"],"sourcesContent":[" \r\n// import React, { useState, useEffect } from \"react\";\r\n \r\n// const Table = ({ modelIds }) => {\r\n//   const [editingCell, setEditingCell] = useState(null);\r\n//   const [cellValues, setCellValues] = useState({});\r\n//   const[data,setData]=useState([])\r\n//   // Function to handle cell click\r\n//   const handleCellClick = (rowId, colId) => {\r\n//     console.log(\"Clicked cell:\", rowId, colId);\r\n//     setEditingCell({ rowId, colId });\r\n//     // Initialize cell value if not present\r\n//     setCellValues((prevState) => ({\r\n//       ...prevState,\r\n//       [`${rowId}-${colId}`]: prevState[`${rowId}-${colId}`] || \"\",\r\n//     }));\r\n//   };\r\n \r\n//   // Function to handle input change\r\n//   const handleInputChange = (e) => {\r\n   \r\n//     if (editingCell) {\r\n//       const { rowId, colId } = editingCell;\r\n//       const value = e.target.value;\r\n//       setCellValues((prevState) => ({\r\n//         ...prevState,\r\n//         [`${rowId}-${colId}`]: value,\r\n//       }));\r\n//     }\r\n//   };\r\n \r\n//   // Function to handle input blur\r\n//   const handleInputBlur = () => {\r\n//     setEditingCell(null);\r\n//   };\r\n//   const handleCancel = () => {\r\n//     setEditingCell(null); // Clear editingCell state\r\n//     setCellValues({}); // Clear cellValues state\r\n//   };\r\n \r\n//   // Function to handle saving edited cell values\r\n//   const handleSave = async (e) => {\r\n//      e.preventDefault();\r\n//     console.log(\"Current editingCell:\", editingCell);\r\n//     if (editingCell) {\r\n//       const { rowId, colId } = editingCell;\r\n//       console.log(\"rowId:\", rowId); // Log the value of rowId\r\n//     console.log(\"colId:\", colId); // Log the value of colId\r\n//     console.log(\"modelId:\", modelIds[rowId]); // Log the value of modelId\r\n//     console.log(\"Id:\", ids[colId]); // Log the value of Id\r\n//      const  value = cellValues[`${rowId}-${colId}`];\r\n   \r\n//     try {\r\n   \r\n     \r\n//         // Make the update request\r\n//         const response = await fetch(`http://localhost:8082/update`, {\r\n//           method: \"PUT\",\r\n//           headers: {\r\n//             \"Content-Type\": \"application/json\",\r\n//           },\r\n//           body: JSON.stringify({\r\n//             productionValue: value,\r\n//             id: rowId,\r\n//             modelId: modelIds[colId],\r\n//           }),\r\n//         });\r\n       \r\n \r\n//         // Check if the response is successful\r\n//         if (!response.ok) {\r\n//           throw new Error(`HTTP error! Status: ${response.status}`);\r\n//         }\r\n//         const newData = [...data];\r\n//         newData[rowId][colId] = value;\r\n//         setData(newData);\r\n \r\n//         // Update the state if the response is successful\r\n//         setEditingCell(null);\r\n//         console.log(\"Data updated successfully\");\r\n//       } catch (error) {\r\n//         console.error(\"Error updating data:\", error);\r\n//       }\r\n//     } else {\r\n//       console.error(\"Editing cell is null\");\r\n \r\n//   };\r\n//     }\r\n//     useEffect(() => {\r\n//       // API call to fetch data from backend\r\n//       fetch('http://localhost:8082/data')\r\n//         .then(response => response.json())\r\n//         .then(result => {\r\n//           console.log(\"Received data:\", result.data); // Log the received data\r\n//           // Check if data is an array before calling map\r\n//           if (Array.isArray(result.data)) {\r\n//             // Transform data into the desired format\r\n//             const transformedData = result.data.map(item => ({\r\n//               modelId: item.ModelID,\r\n//               date: item.date\r\n//               // Add other properties you need\r\n//             }));\r\n   \r\n//             // Update state with transformed data\r\n//             setData(transformedData);\r\n//           } else {\r\n//             console.error(\"Received data is not an array:\", result.data);\r\n//           }\r\n//         })\r\n//         .catch(error => console.error('Error fetching model data:', error));\r\n//     }, []);\r\n \r\n   \r\n \r\n \r\n//   // Generate IDs 1 to 30\r\n//   const ids = Array.from({ length: 30 }, (_, i) => i + 1);\r\n \r\n//   return (\r\n//     <div className=\"overflow-x-auto\">\r\n//       <table className=\"table-auto border border-collapse border-gray-500\">\r\n//         <thead>\r\n//         <tr className=\"bg-gray-200\">\r\n//       <th colSpan=\"40\" className=\"text-center\">\r\n//         <span className=\"mx-8\">Monthly data for April</span>\r\n//       </th>\r\n//     </tr>\r\n//           <tr className=\"bg-gray-200\">\r\n         \r\n//             <th className=\"border border-gray-500\"></th>\r\n//             {/* Render IDs horizontally */}\r\n//             {ids.map((date) => (\r\n//               <th key={date} className=\"border border-gray-500 px-4 py-2\">\r\n//                 {date}\r\n//               </th>\r\n//             ))}\r\n//           </tr>\r\n//         </thead>\r\n//         <tbody>\r\n//           {/* Render ModelIds vertically */}\r\n//           {modelIds.map((modelId, rowIndex) => (\r\n//             <tr key={modelId}>\r\n//               <td className=\"border border-gray-500 px-4 py-2\">{modelId}</td>\r\n//               {ids.map((id, colIndex) => {\r\n//                 const cellKey = `${rowIndex}-${colIndex}`;\r\n//                 const productionValue = data.find(item => item.modelId === modelId && item.date === id)?.productionValue || \"\";\r\n \r\n//                 return (\r\n//                   <td\r\n//                     key={id}\r\n//                     className=\"border border-gray-500 px-4 py-2\"\r\n//                     onClick={() => handleCellClick(rowIndex, colIndex)}\r\n//                   >\r\n//                     {/* Conditionally render input field */}\r\n//                     {editingCell &&\r\n//                     editingCell.rowId === rowIndex &&\r\n//                     editingCell.colId === colIndex ? (\r\n//                       <input\r\n//                         type=\"text\"\r\n//                         value={cellValues[cellKey]}\r\n//                         onChange={handleInputChange}\r\n//                         onBlur={handleInputBlur}\r\n//                       />\r\n//                     ) : (\r\n//                       productionValue\r\n//                     )}\r\n//                   </td>\r\n//                 );\r\n//               })}\r\n//             </tr>\r\n//           ))}\r\n//         </tbody>\r\n//       </table>\r\n//       {/* Save button */}\r\n//       <div className=\"flex justify-center my-10 \">\r\n//       <button\r\n//         onClick={handleSave}\r\n//         className=\"py-0 mx-4 border   border-gray-500 px-6   \"\r\n//       >\r\n//         Save\r\n//       </button>\r\n//       <button\r\n//         onClick={handleCancel}\r\n//         className=\"py-0 mx-4 border  border-gray-500 px-6 \"\r\n//       >\r\n//         Cancel\r\n//       </button>\r\n//       </div>            \r\n//     </div>\r\n//   );\r\n// };\r\n \r\n// export default Table;\r\n \r\n \r\n \r\n \r\n// import React, { useState, useEffect } from \"react\";\r\n\r\n// const Table = ({ modelIds }) => {\r\n//   const [editingCell, setEditingCell] = useState(null);\r\n//   const [cellValues, setCellValues] = useState({});\r\n//   const[data,setData]=useState({})\r\n//   // Function to handle cell click\r\n//   const handleCellClick = (rowId, colId) => {\r\n//     console.log(\"Clicked cell:\", rowId, colId);\r\n//     setEditingCell({ rowId, colId });\r\n//     // Initialize cell value if not present\r\n//     setCellValues((prevState) => ({\r\n//       ...prevState,\r\n//       [`${rowId}-${colId}`]: prevState[`${rowId}-${colId}`] || \"\",\r\n//     }));\r\n//   };\r\n\r\n//   // Function to handle input change\r\n//   const handleInputChange = (e) => {\r\n//     if (editingCell) {\r\n//       const { rowId, colId } = editingCell;\r\n//       const value = e.target.value;\r\n//       setCellValues((prevState) => ({\r\n//         ...prevState,\r\n//         [`${rowId}-${colId}`]: value,\r\n//       }));\r\n//     }\r\n//   };\r\n\r\n//   // Function to handle input blur\r\n//   const handleInputBlur = () => {\r\n//     setEditingCell(null);\r\n//   };\r\n//   const handleCancel = () => {\r\n//     setEditingCell(null); // Clear editingCell state\r\n//     setCellValues({}); // Clear cellValues state\r\n//   };\r\n\r\n//   // Function to handle saving edited cell values\r\n//   const handleSave = async (e) => {\r\n//     e.preventDefault();\r\n//     console.log(\"Current editingCell:\", editingCell); \r\n//     if (editingCell) {\r\n//       const { rowId, colId } = editingCell;\r\n//       console.log(\"rowId:\", rowId); // Log the value of rowId\r\n//     console.log(\"colId:\", colId); // Log the value of colId\r\n//     console.log(\"modelId:\", modelIds[rowId]); // Log the value of modelId\r\n//     console.log(\"Id:\", ids[colId]); // Log the value of Id\r\n//      const  value = cellValues[`${rowId}-${colId}`];\r\n    \r\n//     try {\r\n    \r\n      \r\n//         // Make the update request\r\n//         const response = await fetch(`http://localhost:8082/update`, {\r\n//           method: \"PUT\",\r\n//           headers: {\r\n//             \"Content-Type\": \"application/json\",\r\n//           },\r\n//           body: JSON.stringify({\r\n//             productionValue: value,\r\n//             id: rowId,\r\n//             modelId: modelIds[colId],\r\n//           }),\r\n//         });\r\n        \r\n  \r\n//         // Check if the response is successful\r\n//         if (!response.ok) {\r\n//           throw new Error(`HTTP error! Status: ${response.status}`);\r\n//         }\r\n//         const newData = [...data];\r\n//         newData[rowId][colId] = value;\r\n//         setData(newData);\r\n  \r\n//         // Update the state if the response is successful\r\n//         setEditingCell(null);\r\n//         console.log(\"Data updated successfully\");\r\n//       } catch (error) {\r\n//         console.error(\"Error updating data:\", error);\r\n//       }\r\n//     } else {\r\n//       console.error(\"Editing cell is null\");\r\n  \r\n//   };\r\n//     }\r\n    \r\n  \r\n\r\n//   // Generate IDs 1 to 30\r\n//   const ids = Array.from({ length: 30 }, (_, i) => i + 1);\r\n\r\n//   return (\r\n//     <div className=\"overflow-x-auto\">\r\n//       <table className=\"table-auto border border-collapse border-gray-500\">\r\n//         <thead>\r\n//         <tr className=\"bg-gray-200\">\r\n//       <th colSpan=\"40\" className=\"text-center\">\r\n//         <span className=\"mx-8\">Monthly data for April</span>\r\n//       </th>\r\n//     </tr>\r\n//           <tr className=\"bg-gray-200\">\r\n          \r\n//             <th className=\"border border-gray-500\"></th>\r\n//             {/* Render IDs horizontally */}\r\n//             {ids.map((id) => (\r\n//               <th key={id} className=\"border border-gray-500 px-4 py-2\">\r\n//                 {id}\r\n//               </th>\r\n//             ))}\r\n//           </tr>\r\n//         </thead>\r\n//         <tbody>\r\n//           {/* Render ModelIds vertically */}\r\n//           {modelIds.map((modelId, rowIndex) => (\r\n//             <tr key={modelId}>\r\n//               <td className=\"border border-gray-500 px-4 py-2\">{modelId}</td>\r\n//               {ids.map((id, colIndex) => {\r\n//                 const cellKey = `${rowIndex}-${colIndex}`;\r\n//                 return (\r\n//                   <td\r\n//                     key={id}\r\n//                     className=\"border border-gray-500 px-4 py-2\"\r\n//                     onClick={() => handleCellClick(rowIndex, colIndex)}\r\n//                   >\r\n//                     {/* Conditionally render input field */}\r\n//                     {editingCell &&\r\n//                     editingCell.rowId === rowIndex &&\r\n//                     editingCell.colId === colIndex ? (\r\n//                       <input\r\n//                         type=\"text\"\r\n//                         value={cellValues[cellKey]}\r\n//                         onChange={handleInputChange}\r\n//                         onBlur={handleInputBlur}\r\n//                       />\r\n//                     ) : (\r\n//                       cellValues[cellKey]\r\n//                     )}\r\n//                   </td>\r\n//                 );\r\n//               })}\r\n//             </tr>\r\n//           ))}\r\n//         </tbody>\r\n//       </table>\r\n//       {/* Save button */}\r\n//       <div className=\"flex justify-center my-10 \">\r\n//       <button\r\n//         onClick={handleSave}\r\n//         className=\"py-0 mx-4 border   border-gray-500 px-6   \"\r\n//       >\r\n//         Save\r\n//       </button>\r\n//       <button\r\n//         onClick={handleCancel}\r\n//         className=\"py-0 mx-4 border  border-gray-500 px-6 \"\r\n//       >\r\n//         Cancel\r\n//       </button> \r\n//       </div>            \r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Table;\r\n\r\n\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\n\r\nconst Table = ({ modelIds }) => {\r\n  const [editingCell, setEditingCell] = useState(null);\r\n  const [cellValues, setCellValues] = useState({});\r\n  const [data, setData] = useState([]);\r\n\r\n  // Function to handle cell click\r\n  const handleCellClick = (date, modelId) => {\r\n    // Find the index of the date in the data array\r\n    const rowIndex = data.findIndex((row) => row.date === date);\r\n    // Find the index of the modelId in the modelIds array\r\n    const colIndex = modelIds.findIndex((id) => id === modelId);\r\n\r\n    // Check if both rowIndex and colIndex are found\r\n    if (rowIndex !== -1 && colIndex !== -1) {\r\n      console.log(\"Clicked cell:\", rowIndex, colIndex);\r\n      setEditingCell({ rowId: rowIndex, colId: colIndex });\r\n      // Initialize cell value if not present\r\n      setCellValues((prevState) => ({\r\n        ...prevState,\r\n        [`${rowIndex}-${colIndex}`]: prevState[`${rowIndex}-${colIndex}`] || \"\",\r\n      }));\r\n    } else {\r\n      console.error(\"Row or column index not found\");\r\n    }\r\n  };\r\n\r\n  // Function to handle input change\r\n  const handleInputChange = (e) => {\r\n    if (editingCell) {\r\n      const { rowId, colId } = editingCell;\r\n      const value = e.target.value;\r\n      setCellValues((prevState) => ({\r\n        ...prevState,\r\n        [`${rowId}-${colId}`]: value,\r\n      }));\r\n    }\r\n  };\r\n\r\n  // Function to handle input blur\r\n  const handleInputBlur = () => {\r\n    setEditingCell(null);\r\n  };\r\n\r\n  // Function to handle cancel button click\r\n  const handleCancel = () => {\r\n    setEditingCell(null); // Clear editingCell state\r\n    setCellValues({}); // Clear cellValues state\r\n  };\r\n\r\n  // Function to handle saving edited cell values\r\n  const handleSave = async (e) => {\r\n    e.preventDefault();\r\n    console.log(\"Current editingCell:\", editingCell);\r\n    if (editingCell) {\r\n      const { rowId, colId } = editingCell;\r\n      const value = cellValues[`${rowId}-${colId}`];\r\n\r\n      try {\r\n        // Make the update request\r\n        const response = await fetch(`http://localhost:8082/update`, {\r\n          method: \"PUT\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({\r\n            productionValue: value,\r\n            date: data[rowId].date,\r\n            id: rowId,\r\n            modelId: modelIds[colId],\r\n          }),\r\n        });\r\n\r\n        // Check if the response is successful\r\n        if (!response.ok) {\r\n          throw new Error(`HTTP error! Status: ${response.status}`);\r\n        }\r\n\r\n        // Update the cell value in state\r\n        const newData = [...data];\r\n        newData[rowId][colId] = value;\r\n        setData(newData);\r\n\r\n        // Update the state if the response is successful\r\n        setEditingCell(null);\r\n        console.log(\"Data updated successfully\");\r\n      } catch (error) {\r\n        console.error(\"Error updating data:\", error);\r\n      }\r\n    } else {\r\n      console.error(\"Editing cell is null\");\r\n    }\r\n  };\r\n\r\n  // Generate IDs 1 to 30\r\n  const ids = Array.from({ length: 30 }, (_, i) => i + 1);\r\n\r\n  // Fetch data from the server\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch(\"http://localhost:8082/data\");\r\n        const jsonData = await response.json();\r\n        setData(jsonData.data);\r\n      } catch (error) {\r\n        console.error(\"Error fetching data:\", error);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"overflow-x-auto\">\r\n      <table className=\"table-auto border border-collapse border-gray-500\">\r\n        <thead>\r\n          <tr className=\"bg-gray-200\">\r\n            <th colSpan=\"40\" className=\"text-center\">\r\n              <span className=\"mx-8\">Monthly data for April</span>\r\n            </th>\r\n          </tr>\r\n          <tr className=\"bg-gray-200\">\r\n            <th className=\"border border-gray-500\"></th>\r\n            {/* Render IDs horizontally */}\r\n            {ids.map((id) => (\r\n              <th key={id} className=\"border border-gray-500 px-4 py-2\">\r\n                {id}\r\n              </th>\r\n            ))}\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {/* Render ModelIds vertically */}\r\n          {data.map((rowData, rowIndex) => (\r\n            <tr key={rowIndex}>\r\n              <td className=\"border border-gray-500 px-4 py-2\">{rowData.date}</td>\r\n              {modelIds.map((modelId, colIndex) => {\r\n                const cellKey = `${rowIndex}-${colIndex}`;\r\n                return (\r\n                  <td\r\n                    key={colIndex}\r\n                    className=\"border border-gray-500 px-4 py-2\"\r\n                    onClick={() => handleCellClick(rowData.date, modelId)}\r\n                  >\r\n                    {/* Conditionally render input field */}\r\n                    {editingCell &&\r\n                    editingCell.rowId === rowIndex &&\r\n                    editingCell.colId === colIndex ? (\r\n                      <input\r\n                        type=\"text\"\r\n                        value={cellValues[cellKey]}\r\n                        onChange={handleInputChange}\r\n                        onBlur={handleInputBlur}\r\n                      />\r\n                    ) : (\r\n                      rowData.productionValues[colIndex] || \"\"\r\n                    )}\r\n                  </td>\r\n                );\r\n              })}\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n      {/* Save button */}\r\n      <div className=\"flex justify-center my-10\">\r\n    <button\r\n        onClick={handleSave}\r\n        className=\"py-0 mx-4 border   border-gray-500 px-6   \"\r\n      >\r\n        Save\r\n      </button>\r\n      <button\r\n        onClick={handleCancel}\r\n        className=\"py-0 mx-4 border  border-gray-500 px-6 \"\r\n      >\r\n        Cancel\r\n      </button> \r\n      </div>            \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Table; "],"mappings":";;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAKA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}