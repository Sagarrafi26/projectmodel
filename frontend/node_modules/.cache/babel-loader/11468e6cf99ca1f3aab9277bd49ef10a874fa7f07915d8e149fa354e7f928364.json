{"ast":null,"code":"var _jsxFileName = \"D:\\\\projectmodel\\\\frontend\\\\src\\\\Components\\\\Table.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n\n// const Table = ({ modelIds }) => {\n//   const [editingCell, setEditingCell] = useState(null);\n//   const [cellValues, setCellValues] = useState({});\n//   const[data,setData]=useState([])\n//   // Function to handle cell click\n//   const handleCellClick = (rowId, colId) => {\n//     console.log(\"Clicked cell:\", rowId, colId);\n//     setEditingCell({ rowId, colId });\n//     // Initialize cell value if not present\n//     setCellValues((prevState) => ({\n//       ...prevState,\n//       [`${rowId}-${colId}`]: prevState[`${rowId}-${colId}`] || \"\",\n//     }));\n//   };\n\n//   // Function to handle input change\n//   const handleInputChange = (e) => {\n\n//     if (editingCell) {\n//       const { rowId, colId } = editingCell;\n//       const value = e.target.value;\n//       setCellValues((prevState) => ({\n//         ...prevState,\n//         [`${rowId}-${colId}`]: value,\n//       }));\n//     }\n//   };\n\n//   // Function to handle input blur\n//   const handleInputBlur = () => {\n//     setEditingCell(null);\n//   };\n//   const handleCancel = () => {\n//     setEditingCell(null); // Clear editingCell state\n//     setCellValues({}); // Clear cellValues state\n//   };\n\n//   // Function to handle saving edited cell values\n//   const handleSave = async (e) => {\n//      e.preventDefault();\n//     console.log(\"Current editingCell:\", editingCell);\n//     if (editingCell) {\n//       const { rowId, colId } = editingCell;\n//       console.log(\"rowId:\", rowId); // Log the value of rowId\n//     console.log(\"colId:\", colId); // Log the value of colId\n//     console.log(\"modelId:\", modelIds[rowId]); // Log the value of modelId\n//     console.log(\"Id:\", ids[colId]); // Log the value of Id\n//      const  value = cellValues[`${rowId}-${colId}`];\n\n//     try {\n\n//         // Make the update request\n//         const response = await fetch(`http://localhost:8082/update`, {\n//           method: \"PUT\",\n//           headers: {\n//             \"Content-Type\": \"application/json\",\n//           },\n//           body: JSON.stringify({\n//             productionValue: value,\n//             id: rowId,\n//             modelId: modelIds[colId],\n//           }),\n//         });\n\n//         // Check if the response is successful\n//         if (!response.ok) {\n//           throw new Error(`HTTP error! Status: ${response.status}`);\n//         }\n//         const newData = [...data];\n//         newData[rowId][colId] = value;\n//         setData(newData);\n\n//         // Update the state if the response is successful\n//         setEditingCell(null);\n//         console.log(\"Data updated successfully\");\n//       } catch (error) {\n//         console.error(\"Error updating data:\", error);\n//       }\n//     } else {\n//       console.error(\"Editing cell is null\");\n\n//   };\n//     }\n//     useEffect(() => {\n//       // API call to fetch data from backend\n//       fetch('http://localhost:8082/data')\n//         .then(response => response.json())\n//         .then(result => {\n//           console.log(\"Received data:\", result.data); // Log the received data\n//           // Check if data is an array before calling map\n//           if (Array.isArray(result.data)) {\n//             // Transform data into the desired format\n//             const transformedData = result.data.map(item => ({\n//               modelId: item.ModelID,\n//               date: item.date\n//               // Add other properties you need\n//             }));\n\n//             // Update state with transformed data\n//             setData(transformedData);\n//           } else {\n//             console.error(\"Received data is not an array:\", result.data);\n//           }\n//         })\n//         .catch(error => console.error('Error fetching model data:', error));\n//     }, []);\n\n//   // Generate IDs 1 to 30\n//   const ids = Array.from({ length: 30 }, (_, i) => i + 1);\n\n//   return (\n//     <div className=\"overflow-x-auto\">\n//       <table className=\"table-auto border border-collapse border-gray-500\">\n//         <thead>\n//         <tr className=\"bg-gray-200\">\n//       <th colSpan=\"40\" className=\"text-center\">\n//         <span className=\"mx-8\">Monthly data for April</span>\n//       </th>\n//     </tr>\n//           <tr className=\"bg-gray-200\">\n\n//             <th className=\"border border-gray-500\"></th>\n//             {/* Render IDs horizontally */}\n//             {ids.map((date) => (\n//               <th key={date} className=\"border border-gray-500 px-4 py-2\">\n//                 {date}\n//               </th>\n//             ))}\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {/* Render ModelIds vertically */}\n//           {modelIds.map((modelId, rowIndex) => (\n//             <tr key={modelId}>\n//               <td className=\"border border-gray-500 px-4 py-2\">{modelId}</td>\n//               {ids.map((id, colIndex) => {\n//                 const cellKey = `${rowIndex}-${colIndex}`;\n//                 const productionValue = data.find(item => item.modelId === modelId && item.date === id)?.productionValue || \"\";\n\n//                 return (\n//                   <td\n//                     key={id}\n//                     className=\"border border-gray-500 px-4 py-2\"\n//                     onClick={() => handleCellClick(rowIndex, colIndex)}\n//                   >\n//                     {/* Conditionally render input field */}\n//                     {editingCell &&\n//                     editingCell.rowId === rowIndex &&\n//                     editingCell.colId === colIndex ? (\n//                       <input\n//                         type=\"text\"\n//                         value={cellValues[cellKey]}\n//                         onChange={handleInputChange}\n//                         onBlur={handleInputBlur}\n//                       />\n//                     ) : (\n//                       productionValue\n//                     )}\n//                   </td>\n//                 );\n//               })}\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//       {/* Save button */}\n//       <div className=\"flex justify-center my-10 \">\n//       <button\n//         onClick={handleSave}\n//         className=\"py-0 mx-4 border   border-gray-500 px-6   \"\n//       >\n//         Save\n//       </button>\n//       <button\n//         onClick={handleCancel}\n//         className=\"py-0 mx-4 border  border-gray-500 px-6 \"\n//       >\n//         Cancel\n//       </button>\n//       </div>            \n//     </div>\n//   );\n// };\n\n// export default Table;\n\n// import React, { useState, useEffect } from \"react\";\n\n// const Table = ({ modelIds }) => {\n//   const [editingCell, setEditingCell] = useState(null);\n//   const [cellValues, setCellValues] = useState({});\n//   const[data,setData]=useState({})\n//   // Function to handle cell click\n//   const handleCellClick = (rowId, colId) => {\n//     console.log(\"Clicked cell:\", rowId, colId);\n//     setEditingCell({ rowId, colId });\n//     // Initialize cell value if not present\n//     setCellValues((prevState) => ({\n//       ...prevState,\n//       [`${rowId}-${colId}`]: prevState[`${rowId}-${colId}`] || \"\",\n//     }));\n//   };\n\n//   // Function to handle input change\n//   const handleInputChange = (e) => {\n//     if (editingCell) {\n//       const { rowId, colId } = editingCell;\n//       const value = e.target.value;\n//       setCellValues((prevState) => ({\n//         ...prevState,\n//         [`${rowId}-${colId}`]: value,\n//       }));\n//     }\n//   };\n\n//   // Function to handle input blur\n//   const handleInputBlur = () => {\n//     setEditingCell(null);\n//   };\n//   const handleCancel = () => {\n//     setEditingCell(null); // Clear editingCell state\n//     setCellValues({}); // Clear cellValues state\n//   };\n\n//   // Function to handle saving edited cell values\n//   const handleSave = async (e) => {\n//     e.preventDefault();\n//     console.log(\"Current editingCell:\", editingCell); \n//     if (editingCell) {\n//       const { rowId, colId } = editingCell;\n//       console.log(\"rowId:\", rowId); // Log the value of rowId\n//     console.log(\"colId:\", colId); // Log the value of colId\n//     console.log(\"modelId:\", modelIds[rowId]); // Log the value of modelId\n//     console.log(\"Id:\", ids[colId]); // Log the value of Id\n//      const  value = cellValues[`${rowId}-${colId}`];\n\n//     try {\n\n//         // Make the update request\n//         const response = await fetch(`http://localhost:8082/update`, {\n//           method: \"PUT\",\n//           headers: {\n//             \"Content-Type\": \"application/json\",\n//           },\n//           body: JSON.stringify({\n//             productionValue: value,\n//             id: rowId,\n//             modelId: modelIds[colId],\n//           }),\n//         });\n\n//         // Check if the response is successful\n//         if (!response.ok) {\n//           throw new Error(`HTTP error! Status: ${response.status}`);\n//         }\n//         const newData = [...data];\n//         newData[rowId][colId] = value;\n//         setData(newData);\n\n//         // Update the state if the response is successful\n//         setEditingCell(null);\n//         console.log(\"Data updated successfully\");\n//       } catch (error) {\n//         console.error(\"Error updating data:\", error);\n//       }\n//     } else {\n//       console.error(\"Editing cell is null\");\n\n//   };\n//     }\n\n//   // Generate IDs 1 to 30\n//   const ids = Array.from({ length: 30 }, (_, i) => i + 1);\n\n//   return (\n//     <div className=\"overflow-x-auto\">\n//       <table className=\"table-auto border border-collapse border-gray-500\">\n//         <thead>\n//         <tr className=\"bg-gray-200\">\n//       <th colSpan=\"40\" className=\"text-center\">\n//         <span className=\"mx-8\">Monthly data for April</span>\n//       </th>\n//     </tr>\n//           <tr className=\"bg-gray-200\">\n\n//             <th className=\"border border-gray-500\"></th>\n//             {/* Render IDs horizontally */}\n//             {ids.map((id) => (\n//               <th key={id} className=\"border border-gray-500 px-4 py-2\">\n//                 {id}\n//               </th>\n//             ))}\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {/* Render ModelIds vertically */}\n//           {modelIds.map((modelId, rowIndex) => (\n//             <tr key={modelId}>\n//               <td className=\"border border-gray-500 px-4 py-2\">{modelId}</td>\n//               {ids.map((id, colIndex) => {\n//                 const cellKey = `${rowIndex}-${colIndex}`;\n//                 return (\n//                   <td\n//                     key={id}\n//                     className=\"border border-gray-500 px-4 py-2\"\n//                     onClick={() => handleCellClick(rowIndex, colIndex)}\n//                   >\n//                     {/* Conditionally render input field */}\n//                     {editingCell &&\n//                     editingCell.rowId === rowIndex &&\n//                     editingCell.colId === colIndex ? (\n//                       <input\n//                         type=\"text\"\n//                         value={cellValues[cellKey]}\n//                         onChange={handleInputChange}\n//                         onBlur={handleInputBlur}\n//                       />\n//                     ) : (\n//                       cellValues[cellKey]\n//                     )}\n//                   </td>\n//                 );\n//               })}\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//       {/* Save button */}\n//       <div className=\"flex justify-center my-10 \">\n//       <button\n//         onClick={handleSave}\n//         className=\"py-0 mx-4 border   border-gray-500 px-6   \"\n//       >\n//         Save\n//       </button>\n//       <button\n//         onClick={handleCancel}\n//         className=\"py-0 mx-4 border  border-gray-500 px-6 \"\n//       >\n//         Cancel\n//       </button> \n//       </div>            \n//     </div>\n//   );\n// };\n\n// export default Table;\n\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Table = ({\n  dates,\n  modelIds\n}) => {\n  _s();\n  const [editingCell, setEditingCell] = useState(null);\n  const [cellValues, setCellValues] = useState({});\n  const [data, setData] = useState([]);\n\n  // Function to handle cell click\n  const handleCellClick = (date, modelId) => {\n    console.log(\"Clicked cell:\", date, modelId);\n    setEditingCell({\n      date,\n      modelId\n    });\n    // Initialize cell value if not present\n    setCellValues(prevState => ({\n      ...prevState,\n      [`${date}-${modelId}`]: prevState[`${date}-${modelId}`] || \"\"\n    }));\n  };\n\n  // Function to handle input change\n  const handleInputChange = e => {\n    if (editingCell) {\n      const {\n        date,\n        modelId\n      } = editingCell;\n      const value = e.target.value;\n      setCellValues(prevState => ({\n        ...prevState,\n        [`${date}-${modelId}`]: value\n      }));\n    }\n  };\n\n  // Function to handle input blur\n  const handleInputBlur = () => {\n    setEditingCell(null);\n  };\n  const handleCancel = () => {\n    //     setEditingCell(null); // Clear editingCell state\n    //     setCellValues({}); // Clear cellValues state\n    //   };\n\n    // Function to handle saving edited cell values\n    const handleSave = async e => {\n      e.preventDefault();\n      console.log(\"Current editingCell:\", editingCell);\n      if (editingCell) {\n        const {\n          date,\n          modelId\n        } = editingCell;\n        const value = cellValues[`${date}-${modelId}`];\n        try {\n          // Make the update request\n          const response = await fetch(`http://localhost:8082/update`, {\n            method: \"PUT\",\n            headers: {\n              \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n              productionValue: value,\n              date: date,\n              modelId: modelId\n            })\n          });\n\n          // Check if the response is successful\n          if (!response.ok) {\n            throw new Error(`HTTP error! Status: ${response.status}`);\n          }\n\n          // Update the state if the response is successful\n          setEditingCell(null);\n          console.log(\"Data updated successfully\");\n        } catch (error) {\n          console.error(\"Error updating data:\", error);\n        }\n      } else {\n        console.error(\"Editing cell is null\");\n      }\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"overflow-x-auto\",\n      children: [/*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"table-auto border border-collapse border-gray-500\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n            className: \"bg-gray-200\",\n            children: /*#__PURE__*/_jsxDEV(\"th\", {\n              colSpan: \"40\",\n              className: \"text-center\",\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"mx-8\",\n                children: \"Monthly data for April\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 448,\n                columnNumber: 15\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 447,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 446,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n            className: \"bg-gray-200\",\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              className: \"border border-gray-500\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 452,\n              columnNumber: 13\n            }, this), modelIds.map(modelId => /*#__PURE__*/_jsxDEV(\"th\", {\n              className: \"border border-gray-500 px-4 py-2\",\n              children: modelId\n            }, modelId, false, {\n              fileName: _jsxFileName,\n              lineNumber: 455,\n              columnNumber: 15\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 451,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 445,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: dates.map(date => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"border border-gray-500 px-4 py-2\",\n              children: date\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 465,\n              columnNumber: 15\n            }, this), modelIds.map(modelId => {\n              const cellKey = `${date}-${modelId}`;\n              return /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"border border-gray-500 px-4 py-2\",\n                onClick: () => handleCellClick(date, modelId),\n                children: editingCell && editingCell.date === date && editingCell.modelId === modelId ? /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  value: cellValues[cellKey],\n                  onChange: handleInputChange,\n                  onBlur: handleInputBlur\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 479,\n                  columnNumber: 23\n                }, this) : cellValues[cellKey]\n              }, modelId, false, {\n                fileName: _jsxFileName,\n                lineNumber: 470,\n                columnNumber: 19\n              }, this);\n            })]\n          }, date, true, {\n            fileName: _jsxFileName,\n            lineNumber: 464,\n            columnNumber: 13\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 461,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 444,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex justify-center my-10 \",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSave,\n          className: \"py-0 mx-4 border   border-gray-500 px-6   \",\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 497,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleCancel,\n          className: \"py-0 mx-4 border  border-gray-500 px-6 \",\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 503,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 496,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 443,\n      columnNumber: 5\n    }, this);\n  };\n};\n_s(Table, \"Beu+MQ+4jnSu1VAyvMp0LHU30Co=\");\n_c = Table;\nexport default Table;\nvar _c;\n$RefreshReg$(_c, \"Table\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Table","dates","modelIds","_s","editingCell","setEditingCell","cellValues","setCellValues","data","setData","handleCellClick","date","modelId","console","log","prevState","handleInputChange","e","value","target","handleInputBlur","handleCancel","handleSave","preventDefault","response","fetch","method","headers","body","JSON","stringify","productionValue","ok","Error","status","error","className","children","colSpan","fileName","_jsxFileName","lineNumber","columnNumber","map","cellKey","onClick","type","onChange","onBlur","_c","$RefreshReg$"],"sources":["D:/projectmodel/frontend/src/Components/Table.js"],"sourcesContent":[" \r\n// import React, { useState, useEffect } from \"react\";\r\n \r\n// const Table = ({ modelIds }) => {\r\n//   const [editingCell, setEditingCell] = useState(null);\r\n//   const [cellValues, setCellValues] = useState({});\r\n//   const[data,setData]=useState([])\r\n//   // Function to handle cell click\r\n//   const handleCellClick = (rowId, colId) => {\r\n//     console.log(\"Clicked cell:\", rowId, colId);\r\n//     setEditingCell({ rowId, colId });\r\n//     // Initialize cell value if not present\r\n//     setCellValues((prevState) => ({\r\n//       ...prevState,\r\n//       [`${rowId}-${colId}`]: prevState[`${rowId}-${colId}`] || \"\",\r\n//     }));\r\n//   };\r\n \r\n//   // Function to handle input change\r\n//   const handleInputChange = (e) => {\r\n   \r\n//     if (editingCell) {\r\n//       const { rowId, colId } = editingCell;\r\n//       const value = e.target.value;\r\n//       setCellValues((prevState) => ({\r\n//         ...prevState,\r\n//         [`${rowId}-${colId}`]: value,\r\n//       }));\r\n//     }\r\n//   };\r\n \r\n//   // Function to handle input blur\r\n//   const handleInputBlur = () => {\r\n//     setEditingCell(null);\r\n//   };\r\n//   const handleCancel = () => {\r\n//     setEditingCell(null); // Clear editingCell state\r\n//     setCellValues({}); // Clear cellValues state\r\n//   };\r\n \r\n//   // Function to handle saving edited cell values\r\n//   const handleSave = async (e) => {\r\n//      e.preventDefault();\r\n//     console.log(\"Current editingCell:\", editingCell);\r\n//     if (editingCell) {\r\n//       const { rowId, colId } = editingCell;\r\n//       console.log(\"rowId:\", rowId); // Log the value of rowId\r\n//     console.log(\"colId:\", colId); // Log the value of colId\r\n//     console.log(\"modelId:\", modelIds[rowId]); // Log the value of modelId\r\n//     console.log(\"Id:\", ids[colId]); // Log the value of Id\r\n//      const  value = cellValues[`${rowId}-${colId}`];\r\n   \r\n//     try {\r\n   \r\n     \r\n//         // Make the update request\r\n//         const response = await fetch(`http://localhost:8082/update`, {\r\n//           method: \"PUT\",\r\n//           headers: {\r\n//             \"Content-Type\": \"application/json\",\r\n//           },\r\n//           body: JSON.stringify({\r\n//             productionValue: value,\r\n//             id: rowId,\r\n//             modelId: modelIds[colId],\r\n//           }),\r\n//         });\r\n       \r\n \r\n//         // Check if the response is successful\r\n//         if (!response.ok) {\r\n//           throw new Error(`HTTP error! Status: ${response.status}`);\r\n//         }\r\n//         const newData = [...data];\r\n//         newData[rowId][colId] = value;\r\n//         setData(newData);\r\n \r\n//         // Update the state if the response is successful\r\n//         setEditingCell(null);\r\n//         console.log(\"Data updated successfully\");\r\n//       } catch (error) {\r\n//         console.error(\"Error updating data:\", error);\r\n//       }\r\n//     } else {\r\n//       console.error(\"Editing cell is null\");\r\n \r\n//   };\r\n//     }\r\n//     useEffect(() => {\r\n//       // API call to fetch data from backend\r\n//       fetch('http://localhost:8082/data')\r\n//         .then(response => response.json())\r\n//         .then(result => {\r\n//           console.log(\"Received data:\", result.data); // Log the received data\r\n//           // Check if data is an array before calling map\r\n//           if (Array.isArray(result.data)) {\r\n//             // Transform data into the desired format\r\n//             const transformedData = result.data.map(item => ({\r\n//               modelId: item.ModelID,\r\n//               date: item.date\r\n//               // Add other properties you need\r\n//             }));\r\n   \r\n//             // Update state with transformed data\r\n//             setData(transformedData);\r\n//           } else {\r\n//             console.error(\"Received data is not an array:\", result.data);\r\n//           }\r\n//         })\r\n//         .catch(error => console.error('Error fetching model data:', error));\r\n//     }, []);\r\n \r\n   \r\n \r\n \r\n//   // Generate IDs 1 to 30\r\n//   const ids = Array.from({ length: 30 }, (_, i) => i + 1);\r\n \r\n//   return (\r\n//     <div className=\"overflow-x-auto\">\r\n//       <table className=\"table-auto border border-collapse border-gray-500\">\r\n//         <thead>\r\n//         <tr className=\"bg-gray-200\">\r\n//       <th colSpan=\"40\" className=\"text-center\">\r\n//         <span className=\"mx-8\">Monthly data for April</span>\r\n//       </th>\r\n//     </tr>\r\n//           <tr className=\"bg-gray-200\">\r\n         \r\n//             <th className=\"border border-gray-500\"></th>\r\n//             {/* Render IDs horizontally */}\r\n//             {ids.map((date) => (\r\n//               <th key={date} className=\"border border-gray-500 px-4 py-2\">\r\n//                 {date}\r\n//               </th>\r\n//             ))}\r\n//           </tr>\r\n//         </thead>\r\n//         <tbody>\r\n//           {/* Render ModelIds vertically */}\r\n//           {modelIds.map((modelId, rowIndex) => (\r\n//             <tr key={modelId}>\r\n//               <td className=\"border border-gray-500 px-4 py-2\">{modelId}</td>\r\n//               {ids.map((id, colIndex) => {\r\n//                 const cellKey = `${rowIndex}-${colIndex}`;\r\n//                 const productionValue = data.find(item => item.modelId === modelId && item.date === id)?.productionValue || \"\";\r\n \r\n//                 return (\r\n//                   <td\r\n//                     key={id}\r\n//                     className=\"border border-gray-500 px-4 py-2\"\r\n//                     onClick={() => handleCellClick(rowIndex, colIndex)}\r\n//                   >\r\n//                     {/* Conditionally render input field */}\r\n//                     {editingCell &&\r\n//                     editingCell.rowId === rowIndex &&\r\n//                     editingCell.colId === colIndex ? (\r\n//                       <input\r\n//                         type=\"text\"\r\n//                         value={cellValues[cellKey]}\r\n//                         onChange={handleInputChange}\r\n//                         onBlur={handleInputBlur}\r\n//                       />\r\n//                     ) : (\r\n//                       productionValue\r\n//                     )}\r\n//                   </td>\r\n//                 );\r\n//               })}\r\n//             </tr>\r\n//           ))}\r\n//         </tbody>\r\n//       </table>\r\n//       {/* Save button */}\r\n//       <div className=\"flex justify-center my-10 \">\r\n//       <button\r\n//         onClick={handleSave}\r\n//         className=\"py-0 mx-4 border   border-gray-500 px-6   \"\r\n//       >\r\n//         Save\r\n//       </button>\r\n//       <button\r\n//         onClick={handleCancel}\r\n//         className=\"py-0 mx-4 border  border-gray-500 px-6 \"\r\n//       >\r\n//         Cancel\r\n//       </button>\r\n//       </div>            \r\n//     </div>\r\n//   );\r\n// };\r\n \r\n// export default Table;\r\n \r\n \r\n \r\n \r\n// import React, { useState, useEffect } from \"react\";\r\n\r\n// const Table = ({ modelIds }) => {\r\n//   const [editingCell, setEditingCell] = useState(null);\r\n//   const [cellValues, setCellValues] = useState({});\r\n//   const[data,setData]=useState({})\r\n//   // Function to handle cell click\r\n//   const handleCellClick = (rowId, colId) => {\r\n//     console.log(\"Clicked cell:\", rowId, colId);\r\n//     setEditingCell({ rowId, colId });\r\n//     // Initialize cell value if not present\r\n//     setCellValues((prevState) => ({\r\n//       ...prevState,\r\n//       [`${rowId}-${colId}`]: prevState[`${rowId}-${colId}`] || \"\",\r\n//     }));\r\n//   };\r\n\r\n//   // Function to handle input change\r\n//   const handleInputChange = (e) => {\r\n//     if (editingCell) {\r\n//       const { rowId, colId } = editingCell;\r\n//       const value = e.target.value;\r\n//       setCellValues((prevState) => ({\r\n//         ...prevState,\r\n//         [`${rowId}-${colId}`]: value,\r\n//       }));\r\n//     }\r\n//   };\r\n\r\n//   // Function to handle input blur\r\n//   const handleInputBlur = () => {\r\n//     setEditingCell(null);\r\n//   };\r\n//   const handleCancel = () => {\r\n//     setEditingCell(null); // Clear editingCell state\r\n//     setCellValues({}); // Clear cellValues state\r\n//   };\r\n\r\n//   // Function to handle saving edited cell values\r\n//   const handleSave = async (e) => {\r\n//     e.preventDefault();\r\n//     console.log(\"Current editingCell:\", editingCell); \r\n//     if (editingCell) {\r\n//       const { rowId, colId } = editingCell;\r\n//       console.log(\"rowId:\", rowId); // Log the value of rowId\r\n//     console.log(\"colId:\", colId); // Log the value of colId\r\n//     console.log(\"modelId:\", modelIds[rowId]); // Log the value of modelId\r\n//     console.log(\"Id:\", ids[colId]); // Log the value of Id\r\n//      const  value = cellValues[`${rowId}-${colId}`];\r\n    \r\n//     try {\r\n    \r\n      \r\n//         // Make the update request\r\n//         const response = await fetch(`http://localhost:8082/update`, {\r\n//           method: \"PUT\",\r\n//           headers: {\r\n//             \"Content-Type\": \"application/json\",\r\n//           },\r\n//           body: JSON.stringify({\r\n//             productionValue: value,\r\n//             id: rowId,\r\n//             modelId: modelIds[colId],\r\n//           }),\r\n//         });\r\n        \r\n  \r\n//         // Check if the response is successful\r\n//         if (!response.ok) {\r\n//           throw new Error(`HTTP error! Status: ${response.status}`);\r\n//         }\r\n//         const newData = [...data];\r\n//         newData[rowId][colId] = value;\r\n//         setData(newData);\r\n  \r\n//         // Update the state if the response is successful\r\n//         setEditingCell(null);\r\n//         console.log(\"Data updated successfully\");\r\n//       } catch (error) {\r\n//         console.error(\"Error updating data:\", error);\r\n//       }\r\n//     } else {\r\n//       console.error(\"Editing cell is null\");\r\n  \r\n//   };\r\n//     }\r\n    \r\n  \r\n\r\n//   // Generate IDs 1 to 30\r\n//   const ids = Array.from({ length: 30 }, (_, i) => i + 1);\r\n\r\n//   return (\r\n//     <div className=\"overflow-x-auto\">\r\n//       <table className=\"table-auto border border-collapse border-gray-500\">\r\n//         <thead>\r\n//         <tr className=\"bg-gray-200\">\r\n//       <th colSpan=\"40\" className=\"text-center\">\r\n//         <span className=\"mx-8\">Monthly data for April</span>\r\n//       </th>\r\n//     </tr>\r\n//           <tr className=\"bg-gray-200\">\r\n          \r\n//             <th className=\"border border-gray-500\"></th>\r\n//             {/* Render IDs horizontally */}\r\n//             {ids.map((id) => (\r\n//               <th key={id} className=\"border border-gray-500 px-4 py-2\">\r\n//                 {id}\r\n//               </th>\r\n//             ))}\r\n//           </tr>\r\n//         </thead>\r\n//         <tbody>\r\n//           {/* Render ModelIds vertically */}\r\n//           {modelIds.map((modelId, rowIndex) => (\r\n//             <tr key={modelId}>\r\n//               <td className=\"border border-gray-500 px-4 py-2\">{modelId}</td>\r\n//               {ids.map((id, colIndex) => {\r\n//                 const cellKey = `${rowIndex}-${colIndex}`;\r\n//                 return (\r\n//                   <td\r\n//                     key={id}\r\n//                     className=\"border border-gray-500 px-4 py-2\"\r\n//                     onClick={() => handleCellClick(rowIndex, colIndex)}\r\n//                   >\r\n//                     {/* Conditionally render input field */}\r\n//                     {editingCell &&\r\n//                     editingCell.rowId === rowIndex &&\r\n//                     editingCell.colId === colIndex ? (\r\n//                       <input\r\n//                         type=\"text\"\r\n//                         value={cellValues[cellKey]}\r\n//                         onChange={handleInputChange}\r\n//                         onBlur={handleInputBlur}\r\n//                       />\r\n//                     ) : (\r\n//                       cellValues[cellKey]\r\n//                     )}\r\n//                   </td>\r\n//                 );\r\n//               })}\r\n//             </tr>\r\n//           ))}\r\n//         </tbody>\r\n//       </table>\r\n//       {/* Save button */}\r\n//       <div className=\"flex justify-center my-10 \">\r\n//       <button\r\n//         onClick={handleSave}\r\n//         className=\"py-0 mx-4 border   border-gray-500 px-6   \"\r\n//       >\r\n//         Save\r\n//       </button>\r\n//       <button\r\n//         onClick={handleCancel}\r\n//         className=\"py-0 mx-4 border  border-gray-500 px-6 \"\r\n//       >\r\n//         Cancel\r\n//       </button> \r\n//       </div>            \r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Table;\r\n\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\n\r\nconst Table = ({ dates, modelIds }) => {\r\n  const [editingCell, setEditingCell] = useState(null);\r\n  const [cellValues, setCellValues] = useState({});\r\n  const [data, setData] = useState([]);\r\n\r\n  // Function to handle cell click\r\n  const handleCellClick = (date, modelId) => {\r\n    console.log(\"Clicked cell:\", date, modelId);\r\n    setEditingCell({ date, modelId });\r\n    // Initialize cell value if not present\r\n    setCellValues((prevState) => ({\r\n      ...prevState,\r\n      [`${date}-${modelId}`]: prevState[`${date}-${modelId}`] || \"\",\r\n    }));\r\n  };\r\n\r\n  // Function to handle input change\r\n  const handleInputChange = (e) => {\r\n    if (editingCell) {\r\n      const { date, modelId } = editingCell;\r\n      const value = e.target.value;\r\n      setCellValues((prevState) => ({\r\n        ...prevState,\r\n        [`${date}-${modelId}`]: value,\r\n      }));\r\n    }\r\n  };\r\n\r\n  // Function to handle input blur\r\n  const handleInputBlur = () => {\r\n    setEditingCell(null);\r\n  };\r\n  const handleCancel = () => {\r\n    //     setEditingCell(null); // Clear editingCell state\r\n    //     setCellValues({}); // Clear cellValues state\r\n    //   };\r\n\r\n  // Function to handle saving edited cell values\r\n  const handleSave = async (e) => {\r\n    e.preventDefault();\r\n    console.log(\"Current editingCell:\", editingCell);\r\n    if (editingCell) {\r\n      const { date, modelId } = editingCell;\r\n      const value = cellValues[`${date}-${modelId}`];\r\n\r\n      try {\r\n        // Make the update request\r\n        const response = await fetch(`http://localhost:8082/update`, {\r\n          method: \"PUT\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({\r\n            productionValue: value,\r\n            date: date,\r\n            modelId: modelId,\r\n          }),\r\n        });\r\n\r\n        // Check if the response is successful\r\n        if (!response.ok) {\r\n          throw new Error(`HTTP error! Status: ${response.status}`);\r\n        }\r\n\r\n        // Update the state if the response is successful\r\n        setEditingCell(null);\r\n        console.log(\"Data updated successfully\");\r\n      } catch (error) {\r\n        console.error(\"Error updating data:\", error);\r\n      }\r\n    } else {\r\n      console.error(\"Editing cell is null\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"overflow-x-auto\">\r\n      <table className=\"table-auto border border-collapse border-gray-500\">\r\n        <thead>\r\n          <tr className=\"bg-gray-200\">\r\n            <th colSpan=\"40\" className=\"text-center\">\r\n              <span className=\"mx-8\">Monthly data for April</span>\r\n            </th>\r\n          </tr>\r\n          <tr className=\"bg-gray-200\">\r\n            <th className=\"border border-gray-500\"></th>\r\n            {/* Render ModelIds horizontally */}\r\n            {modelIds.map((modelId) => (\r\n              <th key={modelId} className=\"border border-gray-500 px-4 py-2\">\r\n                {modelId}\r\n              </th>\r\n            ))}\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {/* Render Dates vertically */}\r\n          {dates.map((date) => (\r\n            <tr key={date}>\r\n              <td className=\"border border-gray-500 px-4 py-2\">{date}</td>\r\n              {/* Render cell values */}\r\n              {modelIds.map((modelId) => {\r\n                const cellKey = `${date}-${modelId}`;\r\n                return (\r\n                  <td\r\n                    key={modelId}\r\n                    className=\"border border-gray-500 px-4 py-2\"\r\n                    onClick={() => handleCellClick(date, modelId)}\r\n                  >\r\n                    {/* Conditionally render input field */}\r\n                    {editingCell &&\r\n                    editingCell.date === date &&\r\n                    editingCell.modelId === modelId ? (\r\n                      <input\r\n                        type=\"text\"\r\n                        value={cellValues[cellKey]}\r\n                        onChange={handleInputChange}\r\n                        onBlur={handleInputBlur}\r\n                      />\r\n                    ) : (\r\n                      cellValues[cellKey]\r\n                    )}\r\n                  </td>\r\n                );\r\n              })}\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n      {/* Save button */}\r\n      <div className=\"flex justify-center my-10 \">\r\n        <button\r\n          onClick={handleSave}\r\n          className=\"py-0 mx-4 border   border-gray-500 px-6   \"\r\n        >\r\n          Save\r\n        </button>\r\n        <button\r\n          onClick={handleCancel}\r\n          className=\"py-0 mx-4 border  border-gray-500 px-6 \"\r\n        >\r\n          Cancel\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n}\r\n\r\nexport default Table;\r\n"],"mappings":";;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAKA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}